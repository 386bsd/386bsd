


GREP(1)                         10                        GREP(1)


NNAAMMEE
       grep, egrep, fgrep - print lines matching a pattern

SSYYNNOOPPOOSSIISS
       ggrreepp [ --[[AABB] ]_n_u_m ] [ --[CCEEFFGGVVBBcchhiillnnssvvwwxx] ] [ --ee ] _p_a_t_t_e_r_n
       | --ff_f_i_l_e ] [ _f_i_l_e_s...  ]

DDEESSCCRRIIPPTTIIOONN
       GGrreepp searches the named input _f_i_l_e_s (or standard input  if
       no files are named, or the file name -- is given) for lines
       containing a match to the given _p_a_t_t_e_r_n.  By default, ggrreepp
       prints the matching lines.

       There  are three major variants of ggrreepp, controlled by the
       following options.
       --GG     Interpret _p_a_t_t_e_r_n as  a  basic  regular  expression
              (see below).  This is the default.
       --EE     Interpret _p_a_t_t_e_r_n as an extended regular expression
              (see below).
       --FF     Interpret _p_a_t_t_e_r_n  as  a  list  of  fixed  strings,
              separated  by  newlines,  any  of  which  is  to be
              matched.
       In addition, two variant  programs  eeggrreepp  and  ffggrreepp  are
       available.   EEggrreepp  is  similiar  (but  not  identical) to
       ggrreepp --EE, and is compatible with the historical Unix eeggrreepp.
       FFggrreepp is the same as ggrreepp --FF.

       All variants of ggrreepp understand the following options:
       --_n_u_m   Matches  will  be printed with _n_u_m lines of leading
              and trailing context.   However,  ggrreepp  will  never
              print any given line more than once.
       --AA _n_u_m Print  _n_u_m lines of trailing context after matching
              lines.
       --BB _n_u_m Print _n_u_m lines of leading context before  matching
              lines.
       --CC     Equivalent to --22.
       --VV     Print the version number of ggrreepp to standard error.
              This version number should be included in  all  bug
              reports (see below).
       --bb     Print  the byte offset within the input file before
              each line of output.
       --cc     Suppress normal output; instead print  a  count  of
              matching  lines  for  each input file.  With the --vv
              option (see below), count non-matching lines.
       --ee _p_a_t_t_e_r_n
              Use _p_a_t_t_e_r_n  as  the  pattern;  useful  to  protect
              patterns beginning with --.
       --ff _f_i_l_e
              Obtain the pattern from _f_i_l_e.
       --hh     Suppress  the prefixing of filenames on output when
              multiple files are searched.
       --ii     Ignore case distinctions in both  the  _p_a_t_t_e_r_n  and
              the input files.
       --LL     Suppress  normal  output; instead print the name of



September                      1992                             1





GREP(1)                         10                        GREP(1)


              each input file from which no output would normally
              have been printed.
       --ll     Suppress  normal  output; instead print the name of
              each input file from which  output  would  normally
              have been printed.
       --nn     Prefix  each  line  of  output with the line number
              within its input file.
       --qq     Quiet; suppress normal output.
       --ss     Suppress  error  messages  about   nonexistent   or
              unreadable files.
       --vv     Invert  the  sense  of  matching,  to  select  non-
              matching lines.
       --ww     Select only those  lines  containing  matches  that
              form  whole  words.   The test is that the matching
              substring must either be at the  beginning  of  the
              line,   or   preceded  by  a  non-word  constituent
              character.  Similarly, it must be either at the end
              of  the  line or followed by a non-word constituent
              character.    Word-constituent    characters    are
              letters, digits, and the underscore.
       --xx     Select  only  those  matches that exactly match the
              whole line.

RREEGGUULLAARR EEXXPPRREESSSSIIOONNSS
       A regular expression is a pattern that describes a set  of
       strings.   Regular expressions are constructed analagously
       to arithmetic expressions, by using various  operators  to
       combine smaller expressions.

       GGrreepp   understands   two  different  versions  of  regular
       expression  syntax:  ``basic''   and   ``extended.''    In
       GNU ggrreepp,    there   is   no   difference   in   available
       functionality   using    either    syntax.     In    other
       implementations,   basic   regular  expressions  are  less
       powerful.  The following description applies  to  extended
       regular   expressions;   differences   for  basic  regular
       expressions are summarized afterwards.

       The  fundamental   building   blocks   are   the   regular
       expressions   that   match   a   single  character.   Most
       characters, including all letters and digits, are  regular
       expressions that match themselves.  Any metacharacter with
       special meaning may be  quoted  by  preceding  it  with  a
       backslash.

       A  list  of  characters  enclosed  by  [[ and ]] matches any
       single character in that list; if the first  character  of
       the  list is the caret ^^ then it matches any character _n_o_t
       in  the  list.   For  example,  the   regular   expression
       [[00112233445566778899]]  matches  any single digit.  A range of ASCII
       characters may be specified by giving the first  and  last
       characters, separated by a hyphen.  Finally, certain named
       classes of characters are  predefined.   Their  names  are
       self  explanatory,  and  they  are  [[::aallnnuumm::]],  [[::aallpphhaa::]],



September                      1992                             2





GREP(1)                         10                        GREP(1)


       [[::ccnnttrrll::]],  [[::ddiiggiitt::]],  [[::ggrraapphh::]],  [[::lloowweerr::]],  [[::pprriinntt::]],
       [[::ppuunncctt::]],  [[::ssppaaccee::]],  [[::uuppppeerr::]],  and  [[::xxddiiggiitt::]]..   For
       example, [[[[::aallnnuumm::]]]] means [[00--99AA--ZZaa--zz]], except the  latter
       form  is  dependent  upon  the  ASCII  character encoding,
       whereas the former is portable.  (Note that  the  brackets
       in  these  class names are part of the symbolic names, and
       must be included in addition to  the  brackets  delimiting
       the bracket list.)  Most metacharacters lose their special
       meaning inside lists.  To include a  literal  ]]  place  it
       first  in  the  list.   Similarly,  to include a literal ^^
       place it  anywhere  but  first.   Finally,  to  include  a
       literal -- place it last.

       The period ..  matches any single character.  The symbol \\ww
       is a synonym for [[[[::aallnnuumm::]]]]  and  \\WW  is  a  synonym  for
       [[^^[[::aallnnuumm]]]].

       The  caret ^^ and the dollar sign $$ are metacharacters that
       respectively match the empty string at the  beginning  and
       end  of  a line.  The symbols \\<< and \\>> respectively match
       the empty string at the beginning and end of a word.   The
       symbol  \\bb matches the empty string at the edge of a word,
       and \\BB matches the empty string provided it's _n_o_t  at  the
       edge of a word.

       A  regular  expression  matching a single character may be
       followed by one of several repetition operators:
       ??      The preceding item is optional and matched at  most
              once.
       **      The  preceding  item  will  be matched zero or more
              times.
       ++      The preceding item will  be  matched  one  or  more
              times.
       {{_n}}    The preceding item is matched exactly _n times.
       {{_n,,}}   The preceding item is matched _n or more times.
       {{,,_m}}   The  preceding  item  is optional and is matched at
              most _m times.
       {{_n,,_m}}  The preceding item is matched at least _n times, but
              not more than _m times.

       Two regular expressions may be concatenated; the resulting
       regular  expression   matches   any   string   formed   by
       concatenating  two  substrings that respectively match the
       concatenated subexpressions.

       Two  regular  expressions  may  be  joined  by  the  infix
       operator  ||;  the resulting regular expression matches any
       string matching either subexpression.

       Repetition takes precedence over concatenation,  which  in
       turn   takes   precedence   over   alternation.   A  whole
       subexpression may be enclosed in parentheses  to  override
       these precedence rules.




September                      1992                             3





GREP(1)                         10                        GREP(1)


       The  backreference  \\_n, where _n is a single digit, matches
       the substring previously matched by the _nth  parenthesized
       subexpression of the regular expression.

       In  basic  regular expressions the metacharacters ??, ++, {{,
       ||, ((, and )) lose their special meaning;  instead  use  the
       backslashed versions \\??, \\++, \\{{, \\||, \\((, and \\)).

       In  eeggrreepp  the  metacharacter {{ loses its special meaning;
       instead use \\{{.

DDIIAAGGNNOOSSTTIICCSS
       Normally, exit status is 0 if matches were found, and 1 if
       no  matches  were found.  (The --vv option inverts the sense
       of the exit status.)  Exit  status  is  2  if  there  were
       syntax errors in the pattern, inaccessible input files, or
       other system errors.

BBUUGGSS
       Email bug reports  to  bbuugg--ggnnuu--uuttiillss@@pprreepp..aaii..mmiitt..eedduu.   Be
       sure  to  include  the  word  ``grep''  somewhere  in  the
       ``Subject:'' field.

       Large repetition counts in the {{_m,,_n}} construct  may  cause
       grep  to  use  lots of memory.  In addition, certain other
       obscure regular expressions require exponential  time  and
       space, and may cause ggrreepp to run out of memory.

       Backreferences  are very slow, and may require exponential
       time.



























September                      1992                             4


