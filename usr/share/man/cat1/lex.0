LEX(1)                      386BSD Reference Manual                     LEX(1)

NNAAMMEE
     lleexx - fast lexical analyzer generator

SSYYNNOOPPSSIISS
     lleexx [[--bbccddffiinnppssttvvFFIILLTT88] --CC[eeffmmFF] --SS_s_k_e_l_e_t_o_n] [_f_i_l_e ...]

DDEESSCCRRIIPPTTIIOONN
     LLeexx is a tool for generating _s_c_a_n_n_e_r_s: programs which recognized lexical
     patterns in text.  LLeexx reads the given input files, or its standard input
     if no file names are given, for a description of a scanner to generate.
     The description is in the form of pairs of regular expressions and C
     code, called _r_u_l_e_s. LLeexx generates as output a C source file, _l_e_x._y_y._c,
     which defines a routine yyyylleexx().  This file is compiled and linked with
     the --llffll library to produce an executable.  When the executable is run,
     it analyzes its input for occurrences of the regular expressions.  When-
     ever it finds one, it executes the corresponding C code.

     For full documentation, see _L_e_x_d_o_c. This manual entry is intended for use
     as a quick reference.

OOPPTTIIOONNSS
     LLeexx has the following options:

     --bb      Generate backtracking information to _l_e_x._b_a_c_k_t_r_a_c_k. This is a
             list of scanner states which require backtracking and the input
             characters on which they do so.  By adding rules one can remove
             backtracking states.  If all backtracking states are eliminated
             and --ff or --FF is used, the generated scanner will run faster.

     --cc      is a do-nothing, deprecated option included for POSIX compliance.

             _N_O_T_E: in previous releases of LLeexx [--cc] specified table-
             compression options.  This functionality is now given by the --CC
             flag.  To ease the the impact of this change, when lleexx encounters
             --cc,, it currently issues a warning message and assumes that --CC was
             desired instead.  In the future this "promotion" of --cc to --CC will
             go away in the name of full POSIX compliance (unless the POSIX
             meaning is removed first).

     --dd      Makes the generated scanner run in _d_e_b_u_g mode.  Whenever a pat-
             tern is recognized and the global _y_y__L_e_x__d_e_b_u_g is non-zero (which
             is the default), the scanner will write to stderr a line of the
             form:

                   --accepting rule at line 53 ("the matched text")

             The line number refers to the location of the rule in the file
             defining the scanner (i.e., the file that was fed to lex).  Mes-
             sages are also generated when the scanner backtracks, accepts the
             default rule, reaches the end of its input buffer (or encounters
             a NUL; the two look the same as far as the scanner's concerned),
             or reaches an end-of-file.

     --ff      Specifies (take your pick) _f_u_l_l _t_a_b_l_e or _f_a_s_t _s_c_a_n_n_e_r. No table
             compression is done.  The result is large but fast.  This option
             is equivalent to --CCff (see below).

     --ii      Instructs lleexx to generate a _c_a_s_e-_i_n_s_e_n_s_i_t_i_v_e scanner.  The case
             of letters given in the lleexx input patterns will be ignored, and
             tokens in the input will be matched regardless of case.  The
             matched text given in _y_y_t_e_x_t will have the preserved case (i.e.,


             it will not be folded).

     --nn      Is another do-nothing, deprecated option included only for POSIX
             compliance.

     --pp      Generates a performance report to stderr.  The report consists of
             comments regarding features of the lleexx input file which will
             cause a loss of performance in the resulting scanner.

     --ss      Causes the _d_e_f_a_u_l_t _r_u_l_e (that unmatched scanner input is echoed
             to _s_t_d_o_u_t) to be suppressed.  If the scanner encounters input
             that does not match any of its rules, it aborts with an error.

     --tt      Instructs lleexx to write the scanner it generates to standard out-
             put instead of _l_e_x._y_y._c.

     --vv      Specifies that lleexx should write to stderr a summary of statistics
             regarding the scanner it generates.

     --FF      Specifies that the _f_a_s_t scanner table representation should be
             used.  This representation is about as fast as the full table
             representation (--ff), and for some sets of patterns will be con-
             siderably smaller (and for others, larger).  See _L_e_x_d_o_c for de-
             tails.

             This option is equivalent to --CCFF (see below).

     --II      Instructs lleexx to generate an _i_n_t_e_r_a_c_t_i_v_e scanner, that is, a
             scanner which stops immediately rather than looking ahead if it
             knows that the currently scanned text cannot be part of a longer
             rule's match.  Again, see _L_e_x_d_o_c for details.

             Note, --II cannot be used in conjunction with _f_u_l_l or _f_a_s_t _t_a_b_l_e_s,
             i.e., the --ff, --FF, --CCff, or --CCFF flags.

     --LL      Instructs lleexx not to generate #line directives in _l_e_x._y_y._c. The
             default is to generate such directives so error messages in the
             actions will be correctly located with respect to the original
             lleexx input file, and not to the fairly meaningless line numbers of
             _l_e_x._y_y._c.

     --TT      Makes lleexx run in _t_r_a_c_e mode.  It will generate a lot of messages
             to stdout concerning the form of the input and the resultant non-
             deterministic and deterministic finite automata.  This option is
             mostly for use in maintaining lleexx.

     --88      Instructs lleexx to generate an 8-bit scanner.  On some sites, this
             is the default.  On others, the default is 7-bit characters.  To
             see which is the case, check the verbose (--vv) output for "equiva-
             lence classes created".  If the denominator of the number shown
             is 128, then by default lleexx is generating 7-bit characters.  If
             it is 256, then the default is 8-bit characters.

     --CC[eeffmmFF]
             Controls the degree of table compression. The default setting is
             --CCeemm.

             --CC      A lone --CC specifies that the scanner tables should be
                     compressed but neither equivalence classes nor meta-
                     equivalence classes should be used.

             --CCee     Directs lleexx to construct _e_q_u_i_v_a_l_e_n_c_e _c_l_a_s_s_e_s, i.e., sets
                     of characters which have identical lexical properties.
                     Equivalence classes usually give dramatic reductions in
                     the final table/object file sizes (typically a factor of
                     2-5) and are pretty cheap performance-wise (one array

                     look-up per character scanned).

             --CCff     Specifies that the _f_u_l_l scanner tables should be generat-
                     ed - lleexx should not compress the tables by taking advan-
                     tages of similar transition functions for different
                     states.

             --CCFF     Specifies that the alternate fast scanner representation
                     (described in _L_e_x_d_o_c) should be used.

             --CCmm     Directs lleexx to construct _m_e_t_a-_e_q_u_i_v_a_l_e_n_c_e _c_l_a_s_s_e_s, which
                     are sets of equivalence classes (or characters, if equiv-
                     alence classes are not being used) that are commonly used
                     together.  Meta-equivalence classes are often a big win
                     when using compressed tables, but they have a moderate
                     performance impact (one or two "if" tests and one array
                     look-up per character scanned).

             --CCeemm    (Default) Generate both equivalence classes and meta-
                     equivalence classes.  This setting provides the highest
                     degree of table compression.

             Faster-executing scanners can be traded off at the cost of larger
             tables with the following generally being true:

                             slowest & smallest
                                   -Cem
                                   -Cm
                                   -Ce
                                   -C
                                   -C{f,F}e
                                   -C{f,F} fastest & largest

             --CC options are not cumulative; whenever the flag is encountered,
             the previous -C settings are forgotten.

             The options --CCff or --CCFF and --CCmm do not make sense together - there
             is no opportunity for meta-equivalence classes if the table is
             not being compressed.  Otherwise the options may be freely mixed.

     --SS_s_k_e_l_e_t_o_n__f_i_l_e
             Overrides the default skeleton file from which lleexx constructs its
             scanners.  Useful for lleexx maintenance or development.

SSUUMMMMAARRYY OOFF LLEEXX RREEGGUULLAARR EEXXPPRREESSSSIIOONNSS
     The patterns in the input are written using an extended set of regular
     expressions.  These are:

     x           Match the character 'x'.
     .           Any character except newline.
     [xyz]       A "character class"; in this case, the pattern matches either
                 an 'x', a 'y', or a 'z'.
     [abj-oZ]    A "character class" with a range in it; matches an 'a', a
                 'b', any letter from 'j' through 'o', or a 'Z'.
     [^A-Z]      A "negated character class", i.e., any character but those in
                 the class.  In this case, any character _e_x_c_e_p_t an uppercase
                 letter.
     [^A-Z\n]    Any character _e_x_c_e_p_t an uppercase letter or a newline.
     r*          Zero or more r's, where r is any regular expression.
     r+          One or more r's.
     r?          Zero or one r's (that is, "an optional r").
     r{2,5}      Anywhere from two to five r's.
     r{2,}       Two or more r's.


     r{4}        Exactly 4 r's.
     {name}      The expansion of the "name" definition (see above).
     [xyz]\"foo  The literal string: [xyz]"foo.
     \X          If X is an 'a', 'b', 'f', 'n', 'r', 't', or 'v', then the
                 ANSI-C interpretation of \x.  Otherwise, a literal 'X' (used
                 to escape operators such as '*').
     \123        The character with octal value 123.
     \x2a        The character with hexadecimal value 2a.
     (r)         Match an r; parentheses are used to override precedence (see
                 below).
     rs          The regular expression r followed by the regular expression
                 s; called "concatenation".
     rs          Either an r or an s.
     r/s         An r but only if it is followed by an s.  The s is not part
                 of the matched text.  This type of pattern is called as
                 "trailing context".
     ^r          An r, but only at the beginning of a line.
     r$          An r, but only at the end of a line.  Equivalent to "r/\n".
     <s>r        An r, but only in start condition s (see below for discussion
                 of start conditions).
     <s1,s2,s3>r
                 Same, but in any of start conditions s1, s2, or s3.
     <<EOF>>     An end-of-file.
     <s1,s2><<EOF>>
                 An end-of-file when in start condition s1 or s2.
     The regular expressions listed above are grouped according to precedence,
     from highest precedence at the top to lowest at the bottom.  Those
     grouped together have equal precedence.

     Some notes on patterns:

     Negated character classes _m_a_t_c_h _n_e_w_l_i_n_e_s unless "\n" (or an equivalent
     escape sequence) is one of the characters explicitly present in the
     negated character class (e.g., " [^A-Z\n] ").

     A rule can have at most one instance of trailing context (the '/' opera-
     tor or the '$' operator).  The start condition, '^', and "<<EOF>>" pat-
     terns can only occur at the beginning of a pattern, and, as well as with
     '/' and '$', cannot be grouped inside parentheses.  The following are all
     illegal:

           foo/bar$
           foo(bar$)
           foo^bar
           <sc1>foo<sc2>bar

SSUUMMMMAARRYY OOFF SSPPEECCIIAALL AACCTTIIOONNSS
     In addition to arbitrary C code, the following can appear in actions:

     EECCHHOO        Copies _y_y_t_e_x_t to the scanner's output.

     BBEEGGIINN       Followed by the name of a start condition places the scanner
                 in the corresponding start condition.

     RREEJJEECCTT      Directs the scanner to proceed on to the "second best" rule
                 which matched the input (or a prefix of the input).  _y_y_t_e_x_t
                 and _y_y_l_e_n_g are set up appropriately.  Note that RREEJJEECCTT is a
                 particularly expensive feature in terms scanner performance;
                 if it is used in _a_n_y of the scanner's actions it will slow
                 down _a_l_l of the scanner's matching.  Furthermore, RREEJJEECCTT can-
                 not be used with the --ff or --FF options.

                 Note also that unlike the other special actions, RREEJJEECCTT is a
                 _b_r_a_n_c_h; code immediately following it in the action will _n_o_t


                 be executed.

     yyyymmoorree()    tells the scanner that the next time it matches a rule, the
                 corresponding token should be _a_p_p_e_n_d_e_d onto the current value
                 of _y_y_t_e_x_t rather than replacing it.

     yyyylleessss(_n)   returns all but the first _n characters of the current token
                 back to the input stream, where they will be rescanned when
                 the scanner looks for the next match.  _y_y_t_e_x_t and _y_y_l_e_n_g are
                 adjusted appropriately (e.g., _y_y_l_e_n_g will now be equal to _n).

     uunnppuutt(_c)    puts the character _c back onto the input stream.  It will be
                 the next character scanned.

     iinnppuutt()     reads the next character from the input stream (this routine
                 is called yyyyiinnppuutt() if the scanner is compiled using _C ++).

     yyyytteerrmmiinnaattee()
                 can be used in lieu of a return statement in an action.  It
                 terminates the scanner and returns a 0 to the scanner's
                 caller, indicating "all done".

                 By default, yyyytteerrmmiinnaattee() is also called when an end-of-file
                 is encountered.  It is a macro and may be redefined.

     YYYY__NNEEWW__FFIILLEE
                 is an action available only in <<EOF>> rules.  It means
                 "Okay, I've set up a new input file, continue scanning".

     yyyy__ccrreeaattee__bbuuffffeerr(_f_i_l_e, _s_i_z_e)
                 takes a FFIILLEE pointer and an integer _s_i_z_e. It returns a
                 YY_BUFFER_STATE handle to a new input buffer large enough to
                 accomodate _s_i_z_e characters and associated with the given
                 file.  When in doubt, use _Y_Y__B_U_F__S_I_Z_E for the size.

     yyyy__sswwiittcchh__ttoo__bbuuffffeerr(_n_e_w__b_u_f_f_e_r)
                 switches the scanner's processing to scan for tokens from the
                 given buffer, which must be a YY_BUFFER_STATE.

     yyyy__ddeelleettee__bbuuffffeerr(_b_u_f_f_e_r)
                 deletes the given buffer.

VVAALLUUEESS AAVVAAIILLAABBLLEE TTOO TTHHEE UUSSEERR
     _c_h_a_r *_y_y_t_e_x_t
                 holds the text of the current token.  It may not be modified.

     _i_n_t _y_y_l_e_n_g  holds the length of the current token.  It may not be modi-
                 fied.

     _F_I_L_E *_y_y_i_n  is the file which by default lleexx reads from.  It may be rede-
                 fined but doing so only makes sense before scanning begins.
                 Changing it in the middle of scanning will have unexpected
                 results since lleexx buffers its input.  Once scanning termi-
                 nates because an end-of-file has been seen, vvooiidd
                 yyyyrreessttaarrtt(_F_I_L_E *_n_e_w__f_i_l_e) may be called to point _y_y_i_n at the
                 new input file.

     _F_I_L_E *_y_y_o_u_t
                 is the file to which _E_C_H_O actions are done.  It can be reas-
                 signed by the user.

     _Y_Y__C_U_R_R_E_N_T__B_U_F_F_E_R
                 returns a YY_BUFFER_STATE handle to the current buffer.

MMAACCRROOSS TTHHEE UUSSEERR CCAANN RREEDDEEFFIINNEE


     _Y_Y__D_E_C_L     controls how the scanning routine is declared.  By default,
                 it is "int yylex()", or, if prototypes are being used, "int
                 yylex(void)".  This definition may be changed by redefining
                 the "YY_DECL" macro.  Note that if you give arguments to the
                 scanning routine using a K&R-style/non-prototyped function
                 declaration, you must terminate the definition with a semi-
                 colon (;).

     _Y_Y__I_N_P_U_T    The nature of how the scanner gets its input can be con-
                 trolled by redefining the YY_INPUT macro.  YY_INPUT's calling
                 sequence is "YY_INPUT(buf,result,max_size)".  Its action is
                 to place up to _m_a_x __s_i_z_e characters in the character array
                 _b_u_f and return in the integer variable _r_e_s_u_l_t either the num-
                 ber of characters read or the constant YY_NULL (0 on Unix
                 systems) to indicate EOF.  The default YY_INPUT reads from
                 the global file-pointer "yyin".  A sample redefinition of
                 YY_INPUT (in the definitions section of the input file):

                       %{
                       #undef YY_INPUT
                       #define YY_INPUT(buf,result,max_size) \
                           result = ((buf[0] = getchar()) == EOF) ? YY_NULL : 1;
                       %}

     _Y_Y__I_N_P_U_T    When the scanner receives an end-of-file indication from
                 YY_INPUT, it then checks the yyyywwrraapp() function.  If yyyywwrraapp()
                 returns false (zero), then it is assumed that the function
                 has gone ahead and set up _y_y_i_n to point to another input
                 file, and scanning continues.  If it returns true (non-zero),
                 then the scanner terminates, returning 0 to its caller.

     _y_y_w_r_a_p      The default yyyywwrraapp() always returns 1.  Presently, to rede-
                 fine it you must first "#undef yywrap", as it is currently
                 implemented as a macro.  It is likely that yyyywwrraapp() will soon
                 be defined to be a function rather than a macro.

     _Y_Y__U_S_E_R__A_C_T_I_O_N
                 can be redefined to provide an action which is always execut-
                 ed prior to the matched rule's action.

     _Y_Y__U_S_E_R__I_N_I_T
                 The macro _Y_Y __U_S_E_R__I_N_I_T may be redefined to provide an action
                 which is always executed before the first scan.

     _Y_Y__B_R_E_A_K    In the generated scanner, the actions are all gathered in one
                 large switch statement and separated using _Y_Y __B_R_E_A_K, which
                 may be redefined.  By default, it is simply a "break", to
                 separate each rule's action from the following rule's.

FFIILLEESS
     lex.skel       skeleton scanner.
     lex.yy.c       generated scanner (called _l_e_x_y_y._c on some systems).
     lex.backtrack  backtracking information for --bb
     flag           (called _l_e_x._b_c_k on some systems).

SSEEEE AALLSSOO
     lex(1),  yacc(1),  sed(1),  awk(1).

     _l_e_x_d_o_c.

     M. E. Lesk, and E. Schmidt, _L_E_X - _L_e_x_i_c_a_l _A_n_a_l_y_z_e_r _G_e_n_e_r_a_t_o_r.

DDIIAAGGNNOOSSTTIICCSS



     reject_used_but_not_detected undefined
                 or

     yymore_used_but_not_detected undefined
                 These errors can occur at compile time.  They indicate that
                 the scanner uses RREEJJEECCTT or yyyymmoorree() but that lleexx failed to
                 notice the fact, meaning that lleexx scanned the first two sec-
                 tions looking for occurrences of these actions and failed to
                 find any, but somehow you snuck some in  via a #include file,
                 for example .  Make an explicit reference to the action in
                 your lleexx input file.  Note that previously lleexx supported a
                 %used/%unused mechanism for dealing with this problem; this
                 feature is still supported but now deprecated, and will go
                 away soon unless the author hears from people who can argue
                 compellingly that they need it.

     lex scanner jammed
                 a scanner compiled with --ss has encountered an input string
                 which wasn't matched by any of its rules.

     lex input buffer overflowed
                 a scanner rule matched a string long enough to overflow the
                 scanner's internal input buffer  16K bytes - controlled by
                 _Y_Y__B_U_F__M_A_X in _l_e_x._s_k_e_l.

     scanner requires -8 flag
                 Your scanner specification includes recognizing 8-bit charac-
                 ters and you did not specify the -8 flag  and your site has
                 not installed lex with -8 as the default .

     too many %t classes!
                 You managed to put every single character into its own %t
                 class.  LLeexx requires that at least one of the classes share
                 characters.

HHIISSTTOORRYY
     A lleexx appeared in Version 6 AT&T UNIX.  The version this man page de-
     scribes is derived from code contributed by Vern Paxson.

AAUUTTHHOORR
     Vern Paxson, with the help of many ideas and much inspiration from Van
     Jacobson.  Original version by Jef Poskanzer.

     See _L_e_x_d_o_c for additional credits and the address to send comments to.

BBUUGGSS
     Some trailing context patterns cannot be properly matched and generate
     warning messages ("Dangerous trailing context").  These are patterns
     where the ending of the first part of the rule matches the beginning of
     the second part, such as "zx*/xy*", where the 'x*' matches the 'x' at the
     beginning of the trailing context.  (Note that the POSIX draft states
     that the text matched by such patterns is undefined.)

     For some trailing context rules, parts which are actually fixed-length
     are not recognized as such, leading to the abovementioned performance
     loss.  In particular, parts using '|' or {n} (such as "foo{3}") are al-
     ways considered variable-length.

     Combining trailing context with the special '|' action can result in
     _f_i_x_e_d trailing context being turned into the more expensive _v_a_r_i_a_b_l_e
     trailing context.  This happens in the following example:

           %%
           abc  |
           xyz/def

     Use of uunnppuutt() invalidates yytext and yyleng.

     Use of uunnppuutt() to push back more text than was matched can result in the
     pushed-back text matching a beginning-of-line ('^') rule even though it
     didn't come at the beginning of the line (though this is rare!).

     Pattern-matching of NUL's is substantially slower than matching other
     characters.

     LLeexx does not generate correct #line directives for code internal to the
     scanner; thus, bugs in _l_e_x._s_k_e_l yield bogus line numbers.

     Due to both buffering of input and read-ahead, you cannot intermix calls
     to <_s_t_d_i_o._h> routines, such as, for example, ggeettcchhaarr(), with lleexx rules
     and expect it to work.  Call iinnppuutt() instead.

     The total table entries listed by the --vv flag excludes the number of
     table entries needed to determine what rule has been matched.  The number
     of entries is equal to the number of DFA states if the scanner does not
     use RREEJJEECCTT, and somewhat greater than the number of states if it does.

     RREEJJEECCTT cannot be used with the --ff or --FF options.

     Some of the macros, such as yyyywwrraapp(), may in the future become functions
     which live in the --llffll library.  This will doubtless break a lot of code,
     but may be required for POSIX-compliance.

     The lleexx internal algorithms need documentation.

BSD Experimental                 July 24, 1991                               9




































