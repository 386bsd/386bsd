MKSTR(1)                    386BSD Reference Manual                   MKSTR(1)

NNAAMMEE
     mmkkssttrr - create an error message file by massaging C source

SSYYNNOOPPSSIISS
     mmkkssttrr [--] _m_e_s_s_a_g_e_f_i_l_e _p_r_e_f_i_x _f_i_l_e ...

DDEESSCCRRIIPPTTIIOONN
     MMkkssttrr creates files containing error messages extracted from C source,
     and restructures the same C source, to utilize the created error message
     file.  The intent of mmkkssttrr was to reduce the size of large programs and
     reduce swapping (see _B_U_G_S section below).

     MMkkssttrr processes each of the specified _f_i_l_e_s, placing a restructured ver-
     sion of the input in a file whose name consists of the specified _p_r_e_f_i_x
     and the original name.  A typical usage of mmkkssttrr is

           mkstr pistrings xx *.c

     This command causes all the error messages from the C source files in the
     current directory to be placed in the file _p_i_s_t_r_i_n_g_s and restructured
     copies of the sources to be placed in files whose names are prefixed with
     _x_x.

     Options:

     --       Error messages are placed at the end of the specified message
             file for recompiling part of a large mmkkssttrr ed program.

     mmkkssttrr finds error messages in the source by searching for the string
     `error("' in the input stream.  Each time it occurs, the C string start-
     ing at the `"' is stored in the message file followed by a null character
     and a new-line character; The new source is restructured with lseek(2)
     pointers into the error message file for retrieval.

           char efilname = "/usr/lib/pi_strings";
           int efil = -1;

           error(a1, a2, a3, a4)
           {
                   char buf[256];

                   if (efil < 0) {
                           efil = open(efilname, 0);
                           if (efil < 0) {
           oops:
                                   perror(efilname);
                                   exit 1 ;
                           }
                   }
                   if (lseek(efil, (long) a1, 0)  read(efil, buf, 256) <= 0)
                           goto oops;
                   printf(buf, a2, a3, a4);
           }

SSEEEE AALLSSOO
     lseek(2),  xstr(1)

HHIISSTTOORRYY
     MMkkssttrr appeared in 3.0BSD.

BBUUGGSS
     mmkkssttrr was intended for the limited architecture of the PDP 11 family.
     Very few programs actually use it. The pascal interpreter, pi(1) and the
     editor, ex(1) are two programs that are built this way.  It is not an ef-
     ficient method, the error messages should be stored in the program text.

BSD Experimental                  May 9, 1991                                3































































