PRINTF(1)                   386BSD Reference Manual                  PRINTF(1)

NNAAMMEE
     pprriinnttff - formatted output

SSYYNNOOPPSSIISS
     pprriinnttff ffoorrmmaatt [arguments ...]

DDEESSCCRRIIPPTTIIOONN
     PPrriinnttff formats and prints its arguments, after the first, under control
     of the _f_o_r_m_a_t. The _f_o_r_m_a_t is a character string which contains three
     types of objects: plain characters, which are simply copied to standard
     output, character escape sequences which are converted and copied to the
     standard output, and format specifications, each of which causes printing
     of the next successive _a_r_g_u_m_e_n_t.

     The _a_r_g_u_m_e_n_t_s after the first are treated as strings if the corresponding
     format is either cc or ss; otherwise it is evaluated as a C constant, with
     the following extensions:

           oo   A leading plus or minus sign is allowed.
           oo   If the leading character is a single or double quote, or not a
               digit, plus, or minus sign, the value is the ASCII code of the
               next character.

     The format string is reused as often as necessary to satisfy the
     _a_r_g_u_m_e_n_t_s. Any extra format specifications are evaluated with zero or the
     null string.

     Character escape sequences are in backslash notation as defined in the
     draft proposed ANSI C Standard X3J11. The characters and their meanings
     are as follows:

           \\aa      Write a <bell> character.

           \\bb      Write a <backspace> character.

           \\ff      Write a <form-feed> character.

           \\nn      Write a <new-line> character.

           \\rr      Write a <carriage return> character.

           \\tt      Write a <tab> character.

           \\vv      Write a <vertical tab> character.

           \\''      Write a <single quote> character.

           \\\\      Write a backslash character.

           \\_n_u_m    Write an 8-bit character whose ASCII value is the 1-, 2-,
                   or 3-digit octal number _n_u_m.

     Each format specification is introduced by the percent character (``%'').
     The remainder of the format specification includes, in the following
     order:

     Zero or more of the following flags:

             ##       A `#' character specifying that the value should be
                     printed in an ``alternate form''.  For cc, dd, and ss, for-
                     mats, this option has no effect.  For the oo formats the
                     precision of the number is increased to force the first
                     character of the output string to a zero.  For the xx (XX)
                     format, a non-zero result has the string 0x (0X) prepend-
                     ed to it.  For ee, EE, ff, gg, and GG, formats, the result
                     will always contain a decimal point, even if no digits
                     follow the point (normally, a decimal point only appears
                     in the results of those formats if a digit follows the
                     decimal point).  For gg and GG formats, trailing zeros are
                     not removed from the result as they would otherwise be;

             --       A minus sign `-' which specifies _l_e_f_t _a_d_j_u_s_t_m_e_n_t of the
                     output in the indicated field;

             ++       A `+' character specifying that there should always be a
                     sign placed before the number when using signed formats.

             ` '     A space specifying that a blank should be left before a
                     positive number for a signed format.  A `+' overrides a
                     space if both are used;

             00       A zero `0' character indicating that zero-padding should
                     be used rather than blank-padding.  A `-' overrides a `0'
                     if both are used;

     Field Width:
             An optional digit string specifying a _f_i_e_l_d _w_i_d_t_h; if the output
             string has fewer characters than the field width it will be
             blank-padded on the left (or right, if the left-adjustment indi-
             cator has been given) to make up the field width (note that a
             leading zero is a flag, but an embedded zero is part of a field
             width);

     Precision:
             An optional period, `..', followed by an optional digit string
             giving a _p_r_e_c_i_s_i_o_n which specifies the number of digits to appear
             after the decimal point, for ee and ff formats, or the maximum num-
             ber of characters to be printed from a string; if the digit
             string is missing, the precision is treated as zero;

     Format:
             A character which indicates the type of format to use (one of
             ddiioouuxxXXffwwEEggGGccss).

     A field width or precision may be `**' instead of a digit string.  In this
     case an _a_r_g_u_m_e_n_t supplies the field width or precision.

     The format characters and their meanings are:

     ddiioouuXXxx      The _a_r_g_u_m_e_n_t is printed as a signed decimal (d or i), un-
                 signed decimal, unsigned octal, or unsigned hexadecimal (X or
                 x), respectively.

     ff           The _a_r_g_u_m_e_n_t is printed in the style `[-]ddd.ddd' where the
                 number of d's after the decimal point is equal to the preci-
                 sion specification for the argument.  If the precision is
                 missing, 6 digits are given; if the precision is explicitly
                 0, no digits and no decimal point are printed.

     eeEE          The _a_r_g_u_m_e_n_t is printed in the style ee where there is one
                 digit before the decimal point and the number after is equal
                 to the precision specification for the argument; when the
                 precision is missing, 6 digits are produced.  An upper-case E
                 is used for an `E' format.

     ggGG          The _a_r_g_u_m_e_n_t is printed in style ff or in style ee (EE) whichev-
                 er gives full precision in minimum space.


     cc           The first character of _a_r_g_u_m_e_n_t is printed.

     ss           Characters from the string _a_r_g_u_m_e_n_t are printed until the end
                 is reached or until the number of characters indicated by the
                 precision specification is reached; however if the precision
                 is 0 or missing, all characters in the string are printed.

     %%           Print a `%'; no argument is used.

     In no case does a non-existent or small field width cause truncation of a
     field; padding takes place only if the specified field width exceeds the
     actual width.

RREETTUURRNN VVAALLUUEESS
     PPrriinnttff exits 0 on success, 1 on failure.

SSEEEE AALLSSOO
     printf(3)

HHIISSTTOORRYY
     The pprriinnttff command appeared in 4.3BSD-Reno. It is modeled after the stan-
     dard library function, printf(3).

BBUUGGSS
     Since the number is translated from ASCII to floating-point, and then
     back again, floating-point precision may be lost.

     ANSI hexadecimal character constants were deliberately not provided.

BSD Experimental                 July 24, 1991                               4





































