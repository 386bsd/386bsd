GPROF(1)                    386BSD Reference Manual                   GPROF(1)

NNAAMMEE
     ggpprrooff - display call graph profile data

SSYYNNOOPPSSIISS
     ggpprrooff [options] [_a._o_u_t [_g_m_o_n._o_u_t ...]]

DDEESSCCRRIIPPTTIIOONN
     GGpprrooff produces an execution profile of C, Pascal, or Fortran77 programs.
     The effect of called routines is incorporated in the profile of each
     caller.  The profile data is taken from the call graph profile file
     (_g_m_o_n._o_u_t default) which is created by programs that are compiled with
     the --ppgg option of cc(1),  pc(1),  and f77(1).  The --ppgg option also links
     in versions of the library routines that are compiled for profiling.
     GGpprrooff reads the given object file (the default is _a._o_u_t) and establishes
     the relation between it's symbol table and the call graph profile from
     _g_m_o_n._o_u_t. If more than one profile file is specified, the ggpprrooff output
     shows the sum of the profile information in the given profile files.

     GGpprrooff calculates the amount of time spent in each routine.  Next, these
     times are propagated along the edges of the call graph.  Cycles are
     discovered, and calls into a cycle are made to share the time of the
     cycle.  The first listing shows the functions sorted according to the
     time they represent including the time of their call graph descendents.
     Below each function entry is shown its (direct) call graph children, and
     how their times are propagated to this function.  A similar display above
     the function shows how this function's time and the time of its
     descendents is propagated to its (direct) call graph parents.

     Cycles are also shown, with an entry for the cycle as a whole and a
     listing of the members of the cycle and their contributions to the time
     and call counts of the cycle.

     Second, a flat profile is given, similar to that provided by prof(1).
     This listing gives the total execution times, the call counts, the time
     in milleseconds the call spent in the routine itself, and the time in
     milleseconds the call spent in the routine itself including its
     descendents.

     Finally, an index of the function names is provided.

     The following options are available:

     --aa          Suppresses the printing of statically declared functions.  If
                 this option is given, all relevant information about the
                 static function (e.g., time samples, calls to other
                 functions, calls from other functions) belongs to the
                 function loaded just before the static function in the _a._o_u_t
                 file.

     --bb          Suppresses the printing of a description of each field in the
                 profile.

     --cc          The static call graph of the program is discovered by a
                 heuristic that examines the text space of the object file.
                 Static-only parents or children are shown with call counts of
                 0.

     --ee _n_a_m_e     Suppresses the printing of the graph profile entry for
                 routine _n_a_m_e and all its descendants (unless they have other
                 ancestors that aren't suppressed).  More than one --ee option
                 may be given.  Only one _n_a_m_e may be given with each --ee


                 option.

     --EE _n_a_m_e     Suppresses the printing of the graph profile entry for
                 routine _n_a_m_e (and its descendants) as --ee, above, and also
                 excludes the time spent in _n_a_m_e (and its descendants) from
                 the total and percentage time computations.  (For example, --EE
                 _m_c_o_u_n_t --EE _m_c_l_e_a_n_u_p is the default.)

     --ff _n_a_m_e     Prints the graph profile entry of only the specified routine
                 _n_a_m_e and its descendants.  More than one --ff option may be
                 given.  Only one _n_a_m_e may be given with each --ff option.

     --FF _n_a_m_e     Prints the graph profile entry of only the routine _n_a_m_e and
                 its descendants (as --ff, above) and also uses only the times
                 of the printed routines in total time and percentage
                 computations.  More than one --FF option may be given.  Only
                 one _n_a_m_e may be given with each --FF option.  The --FF option
                 overrides the --EE option.

     --kk _f_r_o_m_n_a_m_e _t_o_n_a_m_e
                 Will delete any arcs from routine _f_r_o_m_n_a_m_e to routine _t_o_n_a_m_e.
                 This can be used to break undesired cycles.  More than one --kk
                 option may be given.  Only one pair of routine names may be
                 given with each --kk option.

     --ss          A profile file _g_m_o_n._s_u_m is produced that represents the sum
                 of the profile information in all the specified profile
                 files.  This summary profile file may be given to later
                 executions of gprof (probably also with a --ss) to accumulate
                 profile data across several runs of an _a._o_u_t file.

     --zz          Displays routines that have zero usage (as shown by call
                 counts and accumulated time).  This is useful with the --cc
                 option for discovering which routines were never called.

FFIILLEESS
     a.out     The namelist and text space.
     gmon.out  Dynamic call graph and profile.
     gmon.sum  Summarized dynamic call graph and profile.

SSEEEE AALLSSOO
     monitor(3),  profil(2),  cc(1),  prof(1)

     S. Graham, P. Kessler, and M. McKusick, "An Execution Profiler for
     Modular Programs", _S_o_f_t_w_a_r_e - _P_r_a_c_t_i_c_e _a_n_d _E_x_p_e_r_i_e_n_c_e, 13, pp. 671-685,
     1983.

     S. Graham, P. Kessler, and M. McKusick, "gprof: A Call Graph Execution
     Profiler", _P_r_o_c_e_e_d_i_n_g_s _o_f _t_h_e _S_I_G_P_L_A_N '_8_2 _S_y_m_p_o_s_i_u_m _o_n _C_o_m_p_i_l_e_r
     _C_o_n_s_t_r_u_c_t_i_o_n, _S_I_G_P_L_A_N _N_o_t_i_c_e_s, 6, 17, pp. 120-126, June 1982.

HHIISSTTOORRYY
     The ggpprrooff profiler appeared in 4.2BSD.

BBUUGGSS
     The granularity of the sampling is shown, but remains statistical at
     best.  We assume that the time for each execution of a function can be
     expressed by the total time for the function divided by the number of
     times the function is called.  Thus the time propagated along the call
     graph arcs to the function's parents is directly proportional to the
     number of times that arc is traversed.

     Parents that are not themselves profiled will have the time of their
     profiled children propagated to them, but they will appear to be
     spontaneously invoked in the call graph listing, and will not have their
     time propagated further.  Similarly, signal catchers, even though
     profiled, will appear to be spontaneous (although for more obscure
     reasons).  Any profiled children of signal catchers should have their
     times propagated properly, unless the signal catcher was invoked during
     the execution of the profiling routine, in which case all is lost.

     The profiled program must call exit(2) or return normally for the
     profiling information to be saved in the _g_m_o_n._o_u_t file.

4.2 Berkeley Distribution        July 24, 1991                               3


























































