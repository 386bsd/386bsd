CTAGS(1)                    386BSD Reference Manual                   CTAGS(1)

NNAAMMEE
     ccttaaggss - create a tags file

SSYYNNOOPPSSIISS
     ccttaaggss [--BBFFaaddttuuwwvvxx] [--ff _t_a_g_s_f_i_l_e] _n_a_m_e ...

DDEESSCCRRIIPPTTIIOONN
     CCttaaggss makes a tags file for ex(1) from the specified C, Pascal, Fortran,
     YACC, lex, and lisp sources.  A tags file gives the locations of
     specified objects in a group of files.  Each line of the tags file
     contains the object name, the file in which it is defined, and a search
     pattern for the object definition, separated by white-space.  Using the
     _t_a_g_s file, ex(1) can quickly locate these object definitions.  Depending
     on the options provided to ccttaaggss, objects will consist of subroutines,
     typedefs, defines, structs, enums and unions.

     --BB      use backward searching patterns (?...?).

     --FF      use forward searching patterns (/.../) (the default).

     --aa      append to _t_a_g_s file.

     --dd      create tags for #defines that don't take arguments; #defines that
             take arguments are tagged automatically.

     --ff      Places the tag descriptions in a file called _t_a_g_s_f_i_l_e. The
             default behaviour is to place them in a file _t_a_g_s.

     --tt      create tags for typedefs, structs, unions, and enums.

     --uu      update the specified files in the _t_a_g_s file, that is, all
             references to them are deleted, and the new values are appended
             to the file.  (Beware: this option is implemented in a way which
             is rather slow; it is usually faster to simply rebuild the _t_a_g_s
             file.)

     --vv      An index of the form expected by vgrind(1) is produced on the
             standard output.  This listing contains the object name, file
             name, and page number (assuming 64 line pages).  Since the output
             will be sorted into lexicographic order, it may be desired to run
             the output through sort(1).  Sample use:

                   ctags -v files | sort -f > index
                   vgrind -x index

     --ww      suppress warning diagnostics.

     --xx      ccttaaggss produces a list of object names, the line number and file
             name on which each is defined, as well as the text of that line
             and prints this on the standard output.  This is a simple index
             which can be printed out as an off-line readable function index.

     Files whose names end in ..cc or ..hh are assumed to be C source files and
     are searched for C style routine and macro definitions.  Files whose
     names end in ..yy are assumed to be YACC source files.  Files whose names
     end in ..ll are assumed to be lisp files if their first non-blank character
     is `;', `(', or `[', otherwise, they are treated as lex files.  Other
     files are first examined to see if they contain any Pascal or Fortran
     routine definitions, and, if not, are searched for C style definitions.

     The tag main is treated specially in C programs.  The tag formed is
     created by prepending _M to the name of the file, with the trailing ..cc and
     any leading pathname components removed.  This makes use of ccttaaggss
     practical in directories with more than one program.

     Yacc and lex files each have a special tag.  _Y_y_p_a_r_s_e is the start of the
     second section of the yacc file, and _y_y_l_e_x is the start of the second
     section of the lex file.

FFIILLEESS
     tags  default output tags file

DDIIAAGGNNOOSSTTIICCSS
     CCttaaggss exits with a value of 1 if an error occurred, where duplicate
     objects are not considered errors, 0 otherwise.

SSEEEE AALLSSOO
     ex(1),  vi(1)

BBUUGGSS
     Recognition of ffuunnccttiioonnss, ssuubbrroouuttiinneess and pprroocceedduurreess for FORTRAN and
     Pascal is done is a very simpleminded way.  No attempt is made to deal
     with block structure; if you have two Pascal procedures in different
     blocks with the same name you lose.  CCttaaggss doesn't understand about
     Pascal types.

     The method of deciding whether to look for C, Pascal or FORTRAN functions
     is a hack.

     CCttaaggss relies on the input being well formed, and any syntactical errors
     will completely confuse it.  It also finds some legal syntax confusing;
     for example, as it doesn't understand #ifdef's, (incidentally, that's a
     feature, not a bug) any code with unbalanced braces inside #ifdef's will
     cause it to become somewhat disoriented.  In a similar fashion, multiple
     line changes within a definition will cause it to enter the last line of
     the object, rather than the first, as the searching pattern.  The last
     line of multiple line typedef's will similarly be noted.

HHIISSTTOORRYY
     The ccttaaggss command appeared in 3.0BSD.

4th Berkeley Distribution       April 24, 1991                               2




























