MAKE(1)                     386BSD Reference Manual                    MAKE(1)

NNAAMMEE
     mmaakkee - maintain program dependencies

SSYYNNOOPPSSIISS
     mmaakkee [--eeiikknnqqrrssttvv] [--DD _v_a_r_i_a_b_l_e] [--dd _f_l_a_g_s] [--ff _m_a_k_e_f_i_l_e] [--II _d_i_r_e_c_t_o_r_y]
          [--jj _m_a_x__j_o_b_s] [_v_a_r_i_a_b_l_e=_v_a_l_u_e] [_t_a_r_g_e_t ...]

DDEESSCCRRIIPPTTIIOONN
     MMaakkee is a program designed to simplify the maintenance of other programs.
     Its input is a list of specifications as to the files upon which programs
     and other files depend.  If the file `_m_a_k_e_f_i_l_e' exists, it is read for
     this list of specifications.  If it does not exist, the file `_M_a_k_e_f_i_l_e'
     is read.  If the file `._d_e_p_e_n_d' exists, it is read (see mkdep(1)).

     This manual page is intended as a reference document only.  For a more
     thorough description of mmaakkee and makefiles, please refer to _M_a_k_e - _A
     _T_u_t_o_r_i_a_l.

     The options are as follows:

     --DD _v_a_r_i_a_b_l_e
             Define Ar variable to be 1, in the global context.

     --dd _f_l_a_g_s
             Turn on debugging, and specify which portions of mmaakkee are to
             print debugging information.  _F_l_a_g_s is one or more of the follow-
             ing:

             _A       Print all possible debugging information; equivalent to
                     specifying all of the debugging flags.

             _a       Print debugging information about archive searching and
                     caching.

             _c       Print debugging information about conditional evaluation.

             _d       Print debugging information about directory searching and
                     caching.

             _g_1      Print the input graph before making anything.

             _g_2      Print the input graph after making everything, or before
                     exiting on error.

             _j       Print debugging information about running multiple
                     shells.

             _m       Print debugging information about making targets, includ-
                     ing modification dates.

             _s       Print debugging information about suffix-transformation
                     rules.

             _t       Print debugging information about target list mainte-
                     nance.

             _v       Print debugging information about variable assignment.

     --ee      Specify that environmental variables override macro assignments
             within makefiles.

     --ff _m_a_k_e_f_i_l_e
             Specify a makefile to read instead of the default `_m_a_k_e_f_i_l_e' and
             `_M_a_k_e_f_i_l_e'. If _m_a_k_e_f_i_l_e is `--', standard input is read.  Multiple
             makefile's may be specified, and are read in the order specified.

     --II _d_i_r_e_c_t_o_r_y
             Specify a directory in which to search for makefiles and included
             makefiles.  The system makefile directory is automatically in-
             cluded as part of this list.

     --ii      Ignore non-zero exit of shell commands in the makefile.  Equiva-
             lent to specifying `--' before each command line in the makefile.

     --jj _m_a_x__j_o_b_s
             Specify the maximum number of jobs that mmaakkee may have running at
             any one time.

     --kk      Continue processing after errors are encountered, but only on
             those targets that do not depend on the target whose creation
             caused the error.

     --nn      Display the commands that would have been executed, but do not
             actually execute them.

     --qq      Do not execute any commands, but exit 0 if the specified targets
             are up-to-date and 1, otherwise.

     --rr      Do not use the built-in rules specified in the system makefile.

     --ss      Do not echo any commands as they are executed.  Equivalent to
             specifying `@@' before each command line in the makefile.

     --tt      Rather than re-building a target as specified in the makefile,
             create it or update its modification time to make it appear up-
             to-date.

     _v_a_r_i_a_b_l_e=_v_a_l_u_e
             Set the value of the variable _v_a_r_i_a_b_l_e to _v_a_l_u_e.

     There are six different types of lines in a makefile: file dependency
     specifications, shell commands, variable assignments, include statements,
     conditional directives, and comments.

     In general, lines may be continued from one line to the next by ending
     them with a backslash (`\'). The trailing newline character and initial
     whitespace on the following line are compressed into a single space.

FFIILLEE DDEEPPEENNDDEENNCCYY SSPPEECCIIFFIICCAATTIIOONNSS
     Dependency lines consist of one or more targets, an operator, and zero or
     more sources.  This creates a relationship where the targets ``depend''
     on the sources and are usually created from them.  The exact relationship
     between the target and the source is determined by the operator that sep-
     arates them.  The three operators are as follows:

     ::     A target is considered out-of-date if its modification time is less
           than those of any of its sources.  Sources for a target accumulate
           over dependency lines when this operator is used.  The target is
           removed if mmaakkee is interrupted.

     !!     Targets are always re-created, but not until all sources have been
           examined and re-created as necessary.  Sources for a target accumu-
           late over dependency lines when this operator is used.  The target
           is removed if mmaakkee is interrupted.

     ::::    If no sources are specified, the target is always re-created.
           Otherwise, a target is considered out-of-date if any of its sources
           has been modified more recently than the target.  Sources for a
           target do not accumulate over dependency lines when this operator
           is used.  The target will not be removed if mmaakkee is interrupted.

     Targets and sources may contain the shell wildcard values `?', `*', `[]'
     and `{}'. The values `?', `*' and `[]' may only be used as part of the
     final component of the target or source, and must be used to describe ex-
     isting files.  The value `{}' need not necessarily be used to describe
     existing files.  Expansion is in directory order, not alphabetically as
     done in the shell.

SSHHEELLLL CCOOMMMMAANNDDSS
     Each target may have associated with it a series of shell commands, nor-
     mally used to create the target.  Each of the commands in this script
     _m_u_s_t be preceded by a tab.  While any target may appear on a dependency
     line, only one of these dependencies may be followed by a creation
     script, unless the `::::' operator is used.

     If the first or first two characters of the command line are `@@' and/or
     `--', the command is treated specially.  A `@@' causes the command not to
     be echoed before it is executed.  A `--' causes any non-zero exit status
     of the command line to be ignored.

VVAARRIIAABBLLEE AASSSSIIGGNNMMEENNTTSS
     Variables in make are much like variables in the shell, and, by tradi-
     tion, consist of all upper-case letters.  The five operators that can be
     used to assign values to variables are as follows:

     ==       Assign the value to the variable.  Any previous value is overrid-
             den.

     ++==      Append the value to the current value of the variable.

     ??==      Assign the value to the variable if it is not already defined.

     ::==      Assign with expansion, i.e. expand the value before assigning it
             to the variable.  Normally, expansion is not done until the vari-
             able is referenced.

     !!==      Expand the value and pass it to the shell for execution and as-
             sign the result to the variable.  Any newlines in the result are
             replaced with spaces.

     Any white-space before the assigned _v_a_l_u_e is removed; if the value is be-
     ing appended, a single space is inserted between the previous contents of
     the variable and the appended value.

     Variables are expanded by surrounding the variable name with either curly
     braces (`{}') or parenthesis (`()') and preceding it with a dollar sign
     (`$'). If the variable name contains only a single letter, the surround-
     ing braces or parenthesis are not required.  This shorter form is not
     recommended.

     Variable substitution occurs at two distinct times, depending on where
     the variable is being used.  Variables in dependency lines are expanded
     as the line is read.  Variables in shell commands are expanded when the
     shell command is executed.

     The four different classes of variables (in order of increasing prece-
     dence) are:

     Environment variables
             Variables defined as part of mmaakkee's environment.

     Global variables
             Variables defined in the makefile or in included makefiles.

     Command line variables

             Variables defined as part of the command line.

     Local variables
             Variables that are defined specific to a certain target.  The
             seven local variables are as follows:

             ._A_L_L_S_R_C   The list of all sources for this target; also known as
                       `>'.

             ._A_R_C_H_I_V_E  The name of the archive file.

             ._I_M_P_S_R_C   The name/path of the source from which the target is to
                       be transformed (the ``implied'' source); also known as
                       `<'.

             ._M_E_M_B_E_R   The name of the archive member.

             ._O_O_D_A_T_E   The list of sources for this target that were deemed
                       out-of-date; also known as `?'.

             ._P_R_E_F_I_X   The file prefix of the file, containing only the file
                       portion, no suffix or preceding directory components;
                       also known as `*'.

             ._T_A_R_G_E_T   The name of the target; also known as `@'.

             The shorter forms `@', `?', `>' and `*' are permitted for back-
             ward compatibility with historical makefiles and are not recom-
             mended.  The six variables `@_F', `@_D', `<_F', `<_D', `*_F' and `*_D'
             are permitted for compatibility with AT&T System V UNIX makefiles
             and are not recommended.

             Four of the local variables may be used in sources on dependency
             lines because they expand to the proper value for each target on
             the line.  These variables are `._T_A_R_G_E_T', `._P_R_E_F_I_X', `._A_R_C_H_I_V_E',
             and `._M_E_M_B_E_R'.

             In addition, mmaakkee sets or knows about the following variables:

             $          A single dollar sign `$', i.e.  `$$' expands to a sin-
                        gle dollar sign.

             ._M_A_K_E      The name that mmaakkee was executed with (_a_r_g_v [0])

             ._C_U_R_D_I_R    A path to the directory where mmaakkee was executed.

             MAKEFLAGS  The environment variable `MAKEFLAGS' may contain any-
                        thing that may be specified on mmaakkee's command line.
                        Anything specified on mmaakkee's command line is appended
                        to the `MAKEFLAGS' variable which is then entered into
                        the environment for all programs which mmaakkee executes.

             Variable expansion may be modified to select or modify each word
             of the variable (where a ``word'' is white-space delimited se-
             quence of characters).  The general format of a variable expan-
             sion is as follows:

                   {variable[:modifier[:...]]}

             Each modifier begins with a colon and one of the following spe-
             cial characters.  The colon may be escaped with a backslash
             (`\').



             EE           Replaces each word in the variable with its suffix.

             HH           Replaces each word in the variable with everything
                         but the last component.

             MM_p_a_t_t_e_r_n    Select only those words that match the rest of the
                         modifier.  The standard shell wildcard characters
                         (`*', `?', and `[]') may be used.  The wildcard char-
                         acters may be escaped with a backslash (`\').

             NN_p_a_t_t_e_r_n    This is identical to `MM', but selects all words which
                         do not match the rest of the modifier.

             RR           Replaces each word in the variable with everything
                         but its suffix.

             SS/_o_l_d__p_a_t_t_e_r_n/_n_e_w__p_a_t_t_e_r_n/[gg]
                         Modify the first occurrence of _o_l_d__p_a_t_t_e_r_n in each
                         word to be replaced with _n_e_w__p_a_t_t_e_r_n. If a `g' is ap-
                         pended to the last slash of the pattern, all occur-
                         rences in each word are replaced.  If _o_l_d__p_a_t_t_e_r_n be-
                         gins with a carat (`^'), _o_l_d__p_a_t_t_e_r_n is anchored at
                         the beginning of each word.  If _o_l_d__p_a_t_t_e_r_n ends with
                         a dollar sign (`$'), it is anchored at the end of
                         each word.  Inside _n_e_w__s_t_r_i_n_g, an ampersand (`&') is
                         replaced by _o_l_d__p_a_t_t_e_r_n. Any character may be used as
                         a delimiter for the parts of the modifier string.
                         The anchoring, ampersand and delimiter characters may
                         be escaped with a backslash (`\').

                         Variable expansion occurs in the normal fashion in-
                         side both _o_l_d__s_t_r_i_n_g and _n_e_w__s_t_r_i_n_g with the single
                         exception that a backslash is used to prevent the ex-
                         pansion of a dollar sign (`$') not a preceding dollar
                         sign as is usual.

             TT           Replaces each word in the variable with its last com-
                         ponent.

             _o_l_d__s_t_r_i_n_g=_n_e_w__s_t_r_i_n_g
                         This is the AT&T System V UNIX style variable substi-
                         tution.  It must be the last modifier specified.
                         _O_l_d__s_t_r_i_n_g is anchored at the end of each word, so
                         only suffixes or entire words may be replaced.

IINNCCLLUUDDEE SSTTAATTEEMMEENNTTSS AANNDD CCOONNDDIITTIIOONNAALLSS
     Makefile inclusion and conditional structures reminiscent of the C pro-
     gramming language are provided in mmaakkee. All such structures are identi-
     fied by a line beginning with a single dot (`.') character.  Files are
     included with either `.include <file>' or `.include "file"'. Variables
     between the angle brackets or double quotes are expanded to form the file
     name.  If angle brackets are used, the included makefile is expected to
     be in the system makefile directory.  If double quotes are used, the in-
     cluding makefile's directory and any directories specified using the --II
     option are searched before the system makefile directory.

     Conditional expressions are also preceded by a single dot as the first
     chraracter of a line.  The possible conditionals are as follows:

     ..uunnddeeff _v_a_r_i_a_b_l_e
             Un-define the specified global variable.  Only global variables
             may be un-defined.

     ..iiff [!]_e_x_p_r_e_s_s_i_o_n [_o_p_e_r_a_t_o_r _e_x_p_r_e_s_s_i_o_n ...]


             Test the value of an expression.

     ..iiffddeeff [!]_v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e ...]
             Test the value of an variable.

     ..iiffnnddeeff [!]_v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e ...]
             Test the value of an variable.

     ..iiffmmaakkee [!]_t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t ...]
             Test the the target being built.

     ..iiffnnmmaakkee [!]_t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t ...]
             Test the target being built.

     ..eellssee   Reverse the sense of the last conditional.

     ..eelliiff [!]_e_x_p_r_e_s_s_i_o_n [_o_p_e_r_a_t_o_r _e_x_p_r_e_s_s_i_o_n ...]
             A combination of `..eellssee' followed by `..iiff'.

     ..eelliiffddeeff [!]_v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e ...]
             A combination of `..eellssee' followed by `..iiffddeeff'.

     ..eelliiffnnddeeff [!]_v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e ...]
             A combination of `..eellssee' followed by `..iiffnnddeeff'.

     ..eelliiffmmaakkee [!]_t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t ...]
             A combination of `..eellssee' followed by `..iiffmmaakkee'.

     ..eelliiffnnmmaakkee [!]_t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t ...]
             A combination of `..eellssee' followed by `..iiffnnmmaakkee'.

     ..eennddiiff  End the body of the conditional.

     The _o_p_e_r_a_t_o_r may be any one of the following:

     ||||     logical OR

     &&&&     Logical AND; of higher precedence than ``''.

     As in C, mmaakkee will only evaluate a conditional as far as is necessary to
     determine its value.  Parenthesis may be used to change the order of
     evaluation.  The boolean operator `!!' may be used to logically negate an
     entire conditional.  It is of higher precendence than `&&&&'.

     The value of _e_x_p_r_e_s_s_i_o_n may be any of the following:

     ddeeffiinneedd     Takes a variable name as an argument and evaluates to true if
                 the variable has been defined.

     mmaakkee        Takes a target name as an argument and evaluates to true if
                 the target was specified as part of mmaakkee's command line or
                 was declared the default target (either implicitly or explic-
                 itly, see ._M_A_I_N) before the line containing the conditional.

     eemmppttyy       Takes a variable, with possible modifiers, and evalutes to
                 true if the expansion of the variable would result in an emp-
                 ty string.

     eexxiissttss      Takes a file name as an argument and evaluates to true if the
                 file exists.  The file is searched for on the system search
                 path (see ._P_A_T_H).

     ttaarrggeett      Takes a target name as an argument and evaluates to true if
                 the target has been defined.


     _E_x_p_r_e_s_s_i_o_n may also be an arithmetic or string comparison, with the left-
     hand side being a variable expansion.  The standard C relational opera-
     tors are all supported, and the usual number/base conversion is per-
     formed.  Note, octal numbers are not supported.  If the righthand value
     of a `====' or `!!==' operator begins with a quotation mark (`"') a string
     comparison is done between the expanded variable and the text between the
     quotation marks.  If no relational operator is given, it is assumed that
     the expanded variable is being compared against 0.

     When mmaakkee is evaluating one of these conditional expression, and it en-
     counters a word it doesn't recognize, either the ``make'' or ``defined''
     expression is applied to it, depending on the form of the conditional.
     If the form is `..iiffddeeff' or `..iiffnnddeeff', the ``defined'' expression is ap-
     plied.  Similarly, if the form is `..iiffmmaakkee' or `..iiffnnmmaakkee, tthhee ````mmaakkee'''''
     expression is applied.

     If the conditional evaluates to true the parsing of the makefile contin-
     ues as before.  If it evaluates to false, the following lines are
     skipped.  In both cases this continues until a `..eellssee' or `..eennddiiff' is
     found.

CCOOMMMMEENNTTSS
     Comments begin with a hash (`#') character, anywhere but in a shell com-
     mand line, and continue to the end of the line.

SSPPEECCIIAALL SSOOUURRCCEESS
     ..IIGGNNOORREE     Ignore any errors from the commands associated with this tar-
                 get, exactly as if they all were preceded by a dash (`-').

     ..MMAAKKEE       Execute the commands associated with this target even if the
                 --nn or --tt options were specified.  Normally used to mark re-
                 cursive mmaakkee's.

     ..NNOOTTMMAAIINN    Normally mmaakkee selects the first target it encounters as the
                 default target to be built if no target was specified.  This
                 source prevents this target from being selected.

     ..OOPPTTIIOONNAALL   If a target is marked with this attribute and mmaakkee can't fig-
                 ure out how to create it, it will ignore this fact and assume
                 the file isn't needed or already exists.

     ..PPRREECCIIOOUUSS   When mmaakkee is interrupted, it removes any partially made tar-
                 gets.  This source prevents the target from being removed.

     ..SSIILLEENNTT     Do not echo any of the commands associated with this target,
                 exactly as if they all were preceded by an at sign (`@').

     ..UUSSEE        Turn the target into mmaakkee's. version of a macro.  When the
                 target is used as a source for another target, the other tar-
                 get acquires the commands, sources, and attributes (except
                 for ..UUSSEE) of the source.  If the target already has commands,
                 the ..UUSSEE target's commands are appended to them.

SSPPEECCIIAALL TTAARRGGEETTSS
     Special targets may not be included with other targets, i.e. they must be
     the only target specified.

     ..BBEEGGIINN      Any command lines attached to this target are executed before
                 anything else is done.

     ..DDEEFFAAUULLTT    This is sort of a ..UUSSEE rule for any target (that was used on-
                 ly as a source) that mmaakkee can't figure out any other way to
                 create.  Only the shell script is used.  The ..IIMMPPSSRRCC variable
                 of a target that inherits ..DDEEFFAAUULLTT's commands is set to the


                 target's own name.

     ..EENNDD        Any command lines attached to this target are executed after
                 everything else is done.

     ..IIGGNNOORREE     Mark each of the sources with the ..IIGGNNOORREE attribute.  If no
                 sources are specified, this is the equivalent of specifying
                 the --ii option.

     ..IINNTTEERRRRUUPPTT  If mmaakkee is interrupted, the commands for this target will be
                 executed.

     ..MMAAIINN       If no target is specified when mmaakkee is invoked, this target
                 will be built.

     ..MMAAKKEEFFLLAAGGSS  This target provides a way to specify flags for mmaakkee when the
                 makefile is used.  The flags are as if typed to the shell,
                 though the --ff option will have no effect.

     ..PPAATTHH       The sources are directories which are to be searched for
                 files not found in the current directory.  If no sources are
                 specified, any previously specified directories are deleted.

     ..PPRREECCIIOOUUSS   Apply the ..PPRREECCIIOOUUSS attribute to any specified sources.  If
                 no sources are specified, the ..PPRREECCIIOOUUSS attribute is applied
                 to every target in the file.

     ..SSIILLEENNTT     Apply the ..SSIILLEENNTT attribute to any specified sources.  If no
                 sources are specified, the ..SSIILLEENNTT attribute is applied to
                 every command in the file.

     ..SSUUFFFFIIXXEESS   Each source specifies a suffix to mmaakkee. If no sources are
                 specified, any previous specifies suffices are deleted.

EENNVVIIRROONNMMEENNTT
     MMaakkee utilizes the following environment variables, if they exist: MAKE,
     MAKEFLAGS and MAKEOBJDIR.

FFIILLEESS
     .depend        list of dependencies
     Makefile       list of dependencies
     makefile       list of dependencies
     sys.mk         system makefile
     /usr/share/mk  system makefile directory

SSEEEE AALLSSOO
     mkdep(1)

HHIISSTTOORRYY
     A MMaakkee command appeared in Version 7 AT&T UNIX.

BSD Experimental                 July 24, 1991                               9















