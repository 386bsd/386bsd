FS(5)                     386BSD Programmer's Manual                     FS(5)

NNAAMMEE
     ffss, iinnooddee - format of file system volume

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
     ##iinncclluuddee <<uuffss//ffss..hh>>
     ##iinncclluuddee <<uuffss//iinnooddee..hh>>

DDEESSCCRRIIPPTTIIOONN
     The files <_f_s._h> and <_i_n_o_d_e._h> declare several structures, defined vari-
     ables and macros which are used to create and manage the underlying for-
     mat of file system objects on random access devices (disks).

     The block size and number of blocks which comprise a file system are pa-
     rameters of the file system.  Sectors beginning at BBLOCK and continuing
     for BBSIZE are used for a disklabel and for some hardware primary and
     secondary bootstrapping programs.

     The actual file system begins at sector SBLOCK with the _s_u_p_e_r-_b_l_o_c_k that
     is of size SBSIZE. The following structure described the super-block and
     is from the file <_u_f_s/_f_s._h>:

     #define FS_MAGIC 0x011954
     struct fs {
             struct  fs *fs_link;    /* linked list of file systems */
             struct  fs *fs_rlink;   /*     used for incore super blocks */
             daddr_t fs_sblkno;      /* addr of super-block in filesys */
             daddr_t fs_cblkno;      /* offset of cyl-block in filesys */
             daddr_t fs_iblkno;      /* offset of inode-blocks in filesys */
             daddr_t fs_dblkno;      /* offset of first data after cg */
             long    fs_cgoffset;    /* cylinder group offset in cylinder */
             long    fs_cgmask;      /* used to calc mod fs_ntrak */
             time_t  fs_time;        /* last time written */
             long    fs_size;        /* number of blocks in fs */
             long    fs_dsize;       /* number of data blocks in fs */
             long    fs_ncg; /* number of cylinder groups */
             long    fs_bsize;       /* size of basic blocks in fs */
             long    fs_fsize;       /* size of frag blocks in fs */
             long    fs_frag;        /* number of frags in a block in fs */
     /* these are configuration parameters */
             long    fs_minfree;     /* minimum percentage of free blocks */
             long    fs_rotdelay;    /* num of ms for optimal next block */
             long    fs_rps; /* disk revolutions per second */
     /* these fields can be computed from the others */
             long    fs_bmask;       /* ``blkoff'' calc of blk offsets */
             long    fs_fmask;       /* ``fragoff'' calc of frag offsets */
             long    fs_bshift;      /* ``lblkno'' calc of logical blkno */
             long    fs_fshift;      /* ``numfrags'' calc number of frags */
     /* these are configuration parameters */
             long    fs_maxcontig;   /* max number of contiguous blks */
             long    fs_maxbpg;      /* max number of blks per cyl group */
     /* these fields can be computed from the others */
             long    fs_fragshift;   /* block to frag shift */
             long    fs_fsbtodb;     /* fsbtodb and dbtofsb shift constant */
             long    fs_sbsize;      /* actual size of super block */
             long    fs_csmask;      /* csum block offset */
             long    fs_csshift;     /* csum block number */
             long    fs_nindir;      /* value of NINDIR */
             long    fs_inopb;       /* value of INOPB */
             long    fs_nspf;        /* value of NSPF */
     /* yet another configuration parameter */
             long    fs_optim;       /* optimization preference, see below */
     /* these fields are derived from the hardware */
             long    fs_npsect;      /* # sectors/track including spares */
             long    fs_interleave;  /* hardware sector interleave */
             long    fs_trackskew;   /* sector 0 skew, per track */
             long    fs_headswitch;  /* head switch time, usec */
             long    fs_trkseek;     /* track-to-track seek, usec */
     /* sizes determined by number of cylinder groups and their sizes */
             daddr_t fs_csaddr;      /* blk addr of cyl grp summary area */
             long    fs_cssize;      /* size of cyl grp summary area */
             long    fs_cgsize;      /* cylinder group size */
     /* these fields are derived from the hardware */
             long    fs_ntrak;       /* tracks per cylinder */
             long    fs_nsect;       /* sectors per track */
             long    fs_spc;         /* sectors per cylinder */
     /* this comes from the disk driver partitioning */
             long    fs_ncyl;        /* cylinders in file system */
     /* these fields can be computed from the others */
             long    fs_cpg; /* cylinders per group */
             long    fs_ipg; /* inodes per group */
             long    fs_fpg; /* blocks per group * fs_frag */
     /* this data must be re-computed after crashes */
             struct  csum fs_cstotal;        /* cylinder summary information */
     /* these fields are cleared at mount time */
             char    fs_fmod;        /* super block modified flag */
             char    fs_clean;       /* file system is clean flag */
             char    fs_ronly;       /* mounted read-only flag */
             char    fs_flags;       /* currently unused flag */
             char    fs_fsmnt[MAXMNTLEN];    /* name mounted on */
     /* these fields retain the current block allocation info */
             long    fs_cgrotor;     /* last cg searched */
             struct  csum *fs_csp[MAXCSBUFS]; /* list of fs_cs info buffers */
             long    fs_cpc; /* cyl per cycle in postbl */
             short   fs_opostbl[16][8];      /* old rotation block list head */
             long    fs_sparecon[56];        /* reserved for future constants */
             quad    fs_qbmask;      /* ~fs_bmask - for use with quad size */
             quad    fs_qfmask;      /* ~fs_fmask - for use with quad size */
             long    fs_postblformat; /* format of positional layout tables */
             long    fs_nrpos;       /* number of rotaional positions */
             long    fs_postbloff;   /* (short) rotation block list head */
             long    fs_rotbloff;    /* (u_char) blocks for each rotation */
             long    fs_magic;       /* magic number */
             u_char  fs_space[1];    /* list of blocks for each rotation */
     /* actually longer */
     };

     Each disk drive contains some number of file systems.  A file system con-
     sists of a number of cylinder groups.  Each cylinder group has inodes and
     data.

     A file system is described by its super-block, which in turn describes
     the cylinder groups.  The super-block is critical data and is replicated
     in each cylinder group to protect against catastrophic loss.  This is
     done at file system creation time and the critical super-block data does
     not change, so the copies need not be referenced further unless disaster
     strikes.

     Addresses stored in inodes are capable of addressing fragments of
     `blocks'. File system blocks of at most size MAXBSIZE can be optionally
     broken into 2, 4, or 8 pieces, each of which is addressable; these pieces
     may be DEV_BSIZE, or some multiple of a DEV_BSIZE unit.

     Large files consist of exclusively large data blocks.  To avoid undue
     wasted disk space, the last data block of a small file is allocated as
     only as many fragments of a large block as are necessary.  The file sys-
     tem format retains only a single pointer to such a fragment, which is a
     piece of a single large block that has been divided.  The size of such a
     fragment is determinable from information in the inode, using the
     bbllkkssiizzee(_f_s, _i_p, _l_b_n) macro.

     The file system records space availability at the fragment level; to de-
     termine block availability, aligned fragments are examined.

     The root inode is the root of the file system.  Inode 0 can't be used for
     normal purposes and historically bad blocks were linked to inode 1, thus
     the root inode is 2 (inode 1 is no longer used for this purpose, however
     numerous dump tapes make this assumption, so we are stuck with it).

     The _f_s__m_i_n_f_r_e_e element gives the minimum acceptable percentage of file
     system blocks that may be free. If the freelist drops below this level
     only the super-user may continue to allocate blocks.  The _f_s__m_i_n_f_r_e_e ele-
     ment may be set to 0 if no reserve of free blocks is deemed necessary,
     however severe performance degradations will be observed if the file sys-
     tem is run at greater than 90% full; thus the default value of _f_s__m_i_n_f_r_e_e
     is 10%.

     Empirically the best trade-off between block fragmentation and overall
     disk utilization at a loading of 90% comes with a fragmentation of 8,
     thus the default fragment size is an eighth of the block size.

     The element _f_s__o_p_t_i_m specifies whether the file system should try to min-
     imize the time spent allocating blocks, or if it should attempt to mini-
     mize the space fragmentation on the disk.  If the value of fs_minfree
     (see above) is less than 10%, then the file system defaults to optimizing
     for space to avoid running out of full sized blocks.  If the value of
     minfree is greater than or equal to 10%, fragmentation is unlikely to be
     problematical, and the file system defaults to optimizing for time.

     _C_y_l_i_n_d_e_r _g_r_o_u_p _r_e_l_a_t_e_d _l_i_m_i_t_s: Each cylinder keeps track of the avail-
     ability of blocks at different rotational positions, so that sequential
     blocks can be laid out with minimum rotational latency. With the default
     of 8 distinguished rotational positions, the resolution of the summary
     information is 2ms for a typical 3600 rpm drive.

     The element _f_s__r_o_t_d_e_l_a_y gives the minimum number of milliseconds to ini-
     tiate another disk transfer on the same cylinder.  It is used in deter-
     mining the rotationally optimal layout for disk blocks within a file; the
     default value for _f_s__r_o_t_d_e_l_a_y is 2ms.

     Each file system has a statically allocated number of inodes.  An inode
     is allocated for each NBPI bytes of disk space.  The inode allocation
     strategy is extremely conservative.

     MINBSIZE is the smallest allowable block size.  With a MINBSIZE of 4096
     it is possible to create files of size 2^32 with only two levels of indi-
     rection.  MINBSIZE must be big enough to hold a cylinder group block,
     thus changes to (_s_t_r_u_c_t _c_g) must keep its size within MINBSIZE. Note that
     super-blocks are never more than size SBSIZE.

     The path name on which the file system is mounted is maintained in
     _f_s__f_s_m_n_t. MAXMNTLEN defines the amount of space allocated in the super-
     block for this name.  The limit on the amount of summary information per
     file system is defined by MAXCSBUFS. For a 4096 byte block size, it is
     currently parameterized for a maximum of two million cylinders.

     Per cylinder group information is summarized in blocks allocated from the
     first cylinder group's data blocks.  These blocks are read in from
     _f_s__c_s_a_d_d_r (size _f_s__c_s_s_i_z_e) in addition to the super-block.

     NN..BB..:: sizeof(_s_t_r_u_c_t _c_s_u_m)  must be a power of two in order for the
     ffss__ccss() macro to work.

     The _S_u_p_e_r-_b_l_o_c_k _f_o_r _a _f_i_l_e _s_y_s_t_e_m: The size of the rotational layout ta-
     bles is limited by the fact that the super-block is of size SBSIZE. The
     size of these tables is _i_n_v_e_r_s_e_l_y proportional to the block size of the
     file system. The size of the tables is increased when sector sizes are
     not powers of two, as this increases the number of cylinders included be-
     fore the rotational pattern repeats (_f_s__c_p_c). The size of the rotational
     layout tables is derived from the number of bytes remaining in (_s_t_r_u_c_t
     _f_s).

     The number of blocks of data per cylinder group is limited because cylin-
     der groups are at most one block.  The inode and free block tables must
     fit into a single block after deducting space for the cylinder group
     structure (_s_t_r_u_c_t _c_g).

     The _I_n_o_d_e: The inode is the focus of all file activity in the UNIX file
     system.  There is a unique inode allocated for each active file, each
     current directory, each mounted-on file, text file, and the root.  An in-
     ode is `named' by its device/i-number pair.  For further information, see
     the include file <_s_y_s/_i_n_o_d_e._h>.

HHIISSTTOORRYY
     A super-block structure named filsys appeared in Version 6 AT&T UNIX.
     The file system described in this manual appeared in 4.2BSD.

4.2 Berkeley Distribution       April 29, 1991                               5












































