FLOCK(2)                  386BSD Programmer's Manual                  FLOCK(2)

NNAAMMEE
     fflloocckk - apply or remove an advisory lock on an open file

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ffiillee..hh>>
     ##ddeeffiinnee   LLOOCCKK__SSHH   11    //** sshhaarreedd lloocckk **//
     ##ddeeffiinnee   LLOOCCKK__EEXX   22    //** eexxcclluussiivvee lloocckk **//
     ##ddeeffiinnee   LLOOCCKK__NNBB   44    //** ddoonn''tt bblloocckk wwhheenn lloocckkiinngg **//
     ##ddeeffiinnee   LLOOCCKK__UUNN   88    //** uunnlloocckk **//

     _i_n_t
     fflloocckk(_i_n_t _f_d, _i_n_t _o_p_e_r_a_t_i_o_n)

DDEESSCCRRIIPPTTIIOONN
     FFlloocckk() applies or removes an _a_d_v_i_s_o_r_y lock on the file associated with
     the file descriptor _f_d. A lock is applied by specifying an _o_p_e_r_a_t_i_o_n
     parameter that is the inclusive or of LOCK_SH or LOCK_EX and, possibly,
     LOCK_NB. To unlock an existing lock operation should be LOCK_UN.

     Advisory locks allow cooperating processes to perform consistent
     operations on files, but do not guarantee consistency (i.e., processes
     may still access files without using advisory locks possibly resulting in
     inconsistencies).

     The locking mechanism allows two types of locks: _s_h_a_r_e_d locks and
     _e_x_c_l_u_s_i_v_e locks.  At any time multiple shared locks may be applied to a
     file, but at no time are multiple exclusive, or both shared and
     exclusive, locks allowed simultaneously on a file.

     A shared lock may be _u_p_g_r_a_d_e_d to an exclusive lock, and vice versa,
     simply by specifying the appropriate lock type; this results in the
     previous lock being released and the new lock applied (possibly after
     other processes have gained and released the lock).

     Requesting a lock on an object that is already locked normally causes the
     caller to be blocked until the lock may be acquired.  If LOCK_NB is
     included in _o_p_e_r_a_t_i_o_n, then this will not happen; instead the call will
     fail and the error EWOULDBLOCK will be returned.

NNOOTTEESS
     Locks are on files, not file descriptors.  That is, file descriptors
     duplicated through dup(2) or fork(2) do not result in multiple instances
     of a lock, but rather multiple references to a single lock.  If a process
     holding a lock on a file forks and the child explicitly unlocks the file,
     the parent will lose its lock.

     Processes blocked awaiting a lock may be awakened by signals.

RREETTUURRNN VVAALLUUEESS
     Zero is returned if the operation was successful; on an error a -1 is
     returned and an error code is left in the global location _e_r_r_n_o.

EERRRROORRSS
     The fflloocckk() call fails if:

     [EWOULDBLOCK]  The file is locked and the LOCK_NB option was specified.

     [EBADF]        The argument _f_d is an invalid descriptor.

     [EINVAL]       The argument _f_d refers to an object other than a file.

SSEEEE AALLSSOO
     open(2),  close(2),  dup(2),  execve(2),  fork(2)

HHIISSTTOORRYY
     The fflloocckk function call appeared in 4.2BSD.

4.2 Berkeley Distribution       March 10, 1991                               2






























































