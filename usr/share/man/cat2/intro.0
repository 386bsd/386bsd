INTRO(2)                  386BSD Programmer's Manual                  INTRO(2)

NNAAMMEE
     iinnttrroo - introduction to system calls and error numbers

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//eerrrrnnoo..hh>>

DDEESSCCRRIIPPTTIIOONN
     This section provides an overview of the system calls, their error re-
     turns, and other common definitions and concepts.

DDIIAAGGNNOOSSTTIICCSS
     Nearly all of the system calls provide an error number in the external
     variable _e_r_r_n_o, which is defined as:

           extern int errno

     When a system call detects an error, it returns an integer value indicat-
     ing failure (usually -1) and sets the variable _e_r_r_n_o accordingly.  <This
     allows interpretation of the failure on receiving a -1 and to take action
     accordingly.> Successful calls never set _e_r_r_n_o; once set, it remains un-
     til another error occurs.  It should only be examined after an error.
     Note that a number of system calls overload the meanings of these error
     numbers, and that the meanings must be interpreted according to the type
     and circumstances of the call.

     The following is a complete list of the errors and their names as given
     in <_s_y_s/_e_r_r_n_o._h>.

     0 _E_r_r_o_r _0. Not used.

     1 EPERM _O_p_e_r_a_t_i_o_n _n_o_t _p_e_r_m_i_t_t_e_d . An attempt was made to perform an oper-
             ation limited to processes with appropriate privileges or to the
             owner of a file or other resources.

     2 ENOENT _N_o _s_u_c_h _f_i_l_e _o_r _d_i_r_e_c_t_o_r_y. A component of a specified pathname
             did not exist, or the pathname was an empty string.

     3 ESRCH _N_o _s_u_c_h _p_r_o_c_e_s_s. No process could be found corresponding to that
             specified by the given process ID.

     4 EINTR _I_n_t_e_r_r_u_p_t_e_d _f_u_n_c_t_i_o_n _c_a_l_l. An asynchronous signal (such as SIGINT
             or SIGQUIT) was caught by the process during the execution of an
             interruptible function. If the signal handler performs a normal
             return, the interupted function call will seem to have returned
             the error condition.

     5 EIO _I_n_p_u_t/_o_u_t_p_u_t _e_r_r_o_r. Some physical input or output error occurred.
             This error not be reported until a subsequent operation on the
             same file descriptor and may be lost (over written) by any subse-
             quent errors.

     6 ENXIO _N_o _s_u_c_h _d_e_v_i_c_e _o_r _a_d_d_r_e_s_s. Input or output on a special file re-
             ferred to a device that did not exist, or made a request beyond
             the limits of the device.  This error may also occur when, for
             example, a tape drive is not online or no disk pack is is loaded
             on a drive.

     7 E2BIG _A_r_g _l_i_s_t _t_o_o _l_o_n_g. The number of bytes used for the argument and
             environment list of the new process exceeded the current limit of
             20480 bytes (NCARGS in <_s_y_s/_p_a_r_a_m._h>).

     8 ENOEXEC _E_x_e_c _f_o_r_m_a_t _e_r_r_o_r. A request was made to execute a file that,
             although it has the appropriate permissions, was not in the for-

             mat required for an executable file.

     9 EBADF _B_a_d _f_i_l_e _d_e_s_c_r_i_p_t_o_r. A file descriptor argument was out of range,
             referred to no open file, or a read (write) request was made to a
             file that was only open for writing (reading).

     10 ECHILD _N_o _c_h_i_l_d _p_r_o_c_e_s_s_e_s. A wait or waitpid function was executed by
             a process that had no existing or unwaited-for child processes.

     11 EDEADLK _R_e_s_o_u_r_c_e _d_e_a_d_l_o_c_k _a_v_o_i_d_e_d. An attempt was made to lock a sys-
             tem resource that would have resulted in a deadlock situation.

     12 ENOMEM _C_a_n_n_n_o_t _a_l_l_o_c_a_t_e _m_e_m_o_r_y. The new process image required more
             memory than was allowed by the hardware or by system-imposed mem-
             ory management constraints.  A lack of swap space is normally
             temporary; however, a lack of core is not.  Soft limits may be
             increased to their corresponding hard limits.

     13 EACCES _P_e_r_m_i_s_s_i_o_n _d_e_n_i_e_d. An attempt was made to access a file in a
             way forbidden by its file access permissions.

     14 EFAULT _B_a_d _a_d_d_r_e_s_s. The system detected an invalid address in attempt-
             ing to use an argument of a call.

     15 ENOTBLK _N_o_t _a _b_l_o_c_k _d_e_v_i_c_e. A block device operation was attempted on
             a non-block device or file.

     16 EBUSY _R_e_s_o_u_r_c_e _b_u_s_y. An attempt to use a system resource which was in
             use at the time in a manner which would have conflicted with the
             request.

     17 EEXIST _F_i_l_e _e_x_i_s_t_s. An existing file was mentioned in an inappropriate
             context, for instance, as the new link name in a link function.

     18 EXDEV _I_m_p_r_o_p_e_r _l_i_n_k. A hard link to a file on another file system was
             attempted.

     19 ENODEV _O_p_e_r_a_t_i_o_n _n_o_t _s_u_p_p_o_r_t_e_d _b_y _d_e_v_i_c_e. An attempt was made to apply
             an inappropriate function to a device, for example, trying to
             read a write-only device such as a printer.

     20 ENOTDIR _N_o_t _a _d_i_r_e_c_t_o_r_y. A component of the specified pathname exist-
             ed, but it was not a directory, when a directory was expected.

     21 EISDIR _I_s _a _d_i_r_e_c_t_o_r_y. An attempt was made to open a directory with
             write mode specified.

     22 EINVAL _I_n_v_a_l_i_d _a_r_g_u_m_e_n_t. Some invalid argument was supplied. (For ex-
             ample, specifying an undefined signal to a signal or kill func-
             tion).

     23 ENFILE _T_o_o _m_a_n_y _o_p_e_n _f_i_l_e_s _i_n _s_y_s_t_e_m. Maximum number of file descrip-
             tors allowable on the system has been reached and a requests for
             an open cannot be satisfied until at least one has been closed.

     24 EMFILE _T_o_o _m_a_n_y _o_p_e_n _f_i_l_e_s. <As released, the limit on the number of
             open files per process is 64.> Getdtablesize(2) will obtain the
             current limit.

     25 ENOTTY _I_n_a_p_p_r_o_p_r_i_a_t_e _i_o_c_t_l _f_o_r _d_e_v_i_c_e. A control function (see
             ioctl(2))  was attempted for a file or special device for which
             the operation was inappropriate.

     26 ETXTBSY _T_e_x_t _f_i_l_e _b_u_s_y. The new process was a pure procedure (shared
             text) file which was open for writing by another process, or the
             pure procedure file was being executed an open call requested
             write access.

     27 EFBIG _F_i_l_e _t_o_o _l_a_r_g_e. The size of a file exceeded the maximum (about
             2.1E9 bytes).

     28 ENOSPC _D_e_v_i_c_e _o_u_t _o_f _s_p_a_c_e. A write to an ordinary file, the creation
             of a directory or symbolic link, or the creation of a directory
             entry failed because no more disk blocks are available on the
             file system, or the allocation of an inode for a newly created
             file failed because no more inodes are available on the file sys-
             tem.

     29 ESPIPE _I_l_l_e_g_a_l _s_e_e_k. An lseek function was issued on a socket, pipe or
             FIFO.

     30 EROFS _R_e_a_d-_o_n_l_y _f_i_l_e _s_y_s_t_e_m. An attempt was made to modify a file or
             directory was made on a file system that was read-only at the
             time.

     31 EMLINK _T_o_o _m_a_n_y _l_i_n_k_s. Maximum allowable hard links to a single file
             has been exceeded (limit of 32767 hard links per file).

     32 EPIPE _B_r_o_k_e_n _p_i_p_e. A write on a pipe, socket or FIFO for which there
             is no process to read the data.

     33 EDOM _N_u_m_e_r_i_c_a_l _a_r_g_u_m_e_n_t _o_u_t _o_f _d_o_m_a_i_n. A numerical input argument was
             outside the defined domain of the mathematical function.

     34 ERANGE _N_u_m_e_r_i_c_a_l _r_e_s_u_l_t _o_u_t _o_f _r_a_n_g_e. A numerical result of the func-
             tion was to large to fit in the available space (perhaps exceeded
             precision).

     35 EAGAIN _R_e_s_o_u_r_c_e _t_e_m_p_o_r_a_r_i_l_y _u_n_a_v_a_i_l_a_b_l_e. This is a temporary condition
             and later calls to the same routine may complete normally.

     36 EINPROGRESS _O_p_e_r_a_t_i_o_n _n_o_w _i_n _p_r_o_g_r_e_s_s. An operation that takes a long
             time to complete (such as a connect(2))  was attempted on a non-
             blocking object (see fcntl(2)).

     37 EALREADY _O_p_e_r_a_t_i_o_n _a_l_r_e_a_d_y _i_n _p_r_o_g_r_e_s_s. An operation was attempted on
             a non-blocking object that already had an operation in progress.

     38 ENOTSOCK _S_o_c_k_e_t _o_p_e_r_a_t_i_o_n _o_n _n_o_n-_s_o_c_k_e_t. Self-explanatory.

     39 EDESTADDRREQ _D_e_s_t_i_n_a_t_i_o_n _a_d_d_r_e_s_s _r_e_q_u_i_r_e_d. A required address was
             omitted from an operation on a socket.

     40 EMSGSIZE _M_e_s_s_a_g_e _t_o_o _l_o_n_g. A message sent on a socket was larger than
             the internal message buffer or some other network limit.

     41 EPROTOTYPE _P_r_o_t_o_c_o_l _w_r_o_n_g _t_y_p_e _f_o_r _s_o_c_k_e_t. A protocol was specified
             that does not support the semantics of the socket type requested.
             For example, you cannot use the ARPA Internet UDP protocol with
             type SOCK_STREAM.

     42 ENOPROTOOPT _P_r_o_t_o_c_o_l _n_o_t _a_v_a_i_l_a_b_l_e. A bad option or level was speci-
             fied in a getsockopt(2) or setsockopt(2) call.

     43 EPROTONOSUPPORT _P_r_o_t_o_c_o_l _n_o_t _s_u_p_p_o_r_t_e_d. The protocol has not been con-
             figured into the system or no implementation for it exists.

     44 ESOCKTNOSUPPORT _S_o_c_k_e_t _t_y_p_e _n_o_t _s_u_p_p_o_r_t_e_d. The support for the socket
             type has not been configured into the system or no implementation


             for it exists.

     45 EOPNOTSUPP _O_p_e_r_a_t_i_o_n _n_o_t _s_u_p_p_o_r_t_e_d. The attempted operation is not
             supported for the type of object referenced.  Usually this occurs
             when a file descriptor refers to a file or socket that cannot
             support this operation, for example, trying to _a_c_c_e_p_t a connec-
             tion on a datagram socket.

     46 EPFNOSUPPORT _P_r_o_t_o_c_o_l _f_a_m_i_l_y _n_o_t _s_u_p_p_o_r_t_e_d. The protocol family has
             not been configured into the system or no implementation for it
             exists.

     47 EAFNOSUPPORT _A_d_d_r_e_s_s _f_a_m_i_l_y _n_o_t _s_u_p_p_o_r_t_e_d _b_y _p_r_o_t_o_c_o_l _f_a_m_i_l_y. An ad-
             dress incompatible with the requested protocol was used.  For ex-
             ample, you shouldn't necessarily expect to be able to use NS ad-
             dresses with ARPA Internet protocols.

     48 EADDRINUSE _A_d_d_r_e_s_s _a_l_r_e_a_d_y _i_n _u_s_e. Only one usage of each address is
             normally permitted.

     49 EADDRNOTAVAIL _C_a_n_n_o_t _a_s_s_i_g_n _r_e_q_u_e_s_t_e_d _a_d_d_r_e_s_s. Normally results from
             an attempt to create a socket with an address not on this ma-
             chine.

     50 ENETDOWN _N_e_t_w_o_r_k _i_s _d_o_w_n. A socket operation encountered a dead net-
             work.

     51 ENETUNREACH _N_e_t_w_o_r_k _i_s _u_n_r_e_a_c_h_a_b_l_e. A socket operation was attempted
             to an unreachable network.

     52 ENETRESET _N_e_t_w_o_r_k _d_r_o_p_p_e_d _c_o_n_n_e_c_t_i_o_n _o_n _r_e_s_e_t. The host you were con-
             nected to crashed and rebooted.

     53 ECONNABORTED _S_o_f_t_w_a_r_e _c_a_u_s_e_d _c_o_n_n_e_c_t_i_o_n _a_b_o_r_t. A connection abort was
             caused internal to your host machine.

     54 ECONNRESET _C_o_n_n_e_c_t_i_o_n _r_e_s_e_t _b_y _p_e_e_r. A connection was forcibly closed
             by a peer.  This normally results from a loss of the connection
             on the remote socket due to a timeout or a reboot.

     55 ENOBUFS _N_o _b_u_f_f_e_r _s_p_a_c_e _a_v_a_i_l_a_b_l_e. An operation on a socket or pipe
             was not performed because the system lacked sufficient buffer
             space or because a queue was full.

     56 EISCONN _S_o_c_k_e_t _i_s _a_l_r_e_a_d_y _c_o_n_n_e_c_t_e_d. A connect request was made on an
             already connected socket; or, a sendto or sendmsg request on a
             connected socket specified a destination when already connected.

     57 ENOTCONN _S_o_c_k_e_t _i_s _n_o_t _c_o_n_n_e_c_t_e_d. An request to send or receive data
             was disallowed because the socket is not connected and (when
             sending on a  datagram socket) no address was supplied.

     58 ESHUTDOWN _C_a_n_n_o_t _s_e_n_d _a_f_t_e_r _s_o_c_k_e_t _s_h_u_t_d_o_w_n. A request to send data
             was disallowed because the socket had already been shut down with
             a previous shutdown(2) call.

     60 ETIMEDOUT _C_o_n_n_e_c_t_i_o_n _t_i_m_e_d _o_u_t. A connect or send request failed be-
             cause the connected party did not properly respond after a period
             of time.  (The timeout period is dependent on the communication
             protocol.)

     61 ECONNREFUSED _C_o_n_n_e_c_t_i_o_n _r_e_f_u_s_e_d. No connection could be made because
             the target machine actively refused it.  This usually results
             from trying to connect to a service that is inactive on the for-


             eign host.

     62 ELOOP _T_o_o _m_a_n_y _l_e_v_e_l_s _o_f _s_y_m_b_o_l_i_c _l_i_n_k_s. A path name lookup involved
             more than 8 symbolic links.

     63 ENAMETOOLONG _F_i_l_e _n_a_m_e _t_o_o _l_o_n_g. A component of a path name exceeded
             255 (MAXNAMELEN) characters, or an entire path name exceeded 1023
             (MAXPATHLEN-1) characters.

     64 EHOSTDOWN _H_o_s_t _i_s _d_o_w_n. A socket operation failed because the destina-
             tion host was down.

     65 EHOSTUNREACH _N_o _r_o_u_t_e _t_o _h_o_s_t. A socket operation was attempted to an
             unreachable host.

     66 ENOTEMPTY _D_i_r_e_c_t_o_r_y _n_o_t _e_m_p_t_y. A directory with entries other than `.'
             and `..' was supplied to a remove directory or rename call.

     67 EPROCLIM _T_o_o _m_a_n_y _p_r_o_c_e_s_s_e_s.

     68 EUSERS _T_o_o _m_a_n_y _u_s_e_r_s. The quota system ran out of table entries.

     69 EDQUOT _D_i_s_c _q_u_o_t_a _e_x_c_e_e_d_e_d. A write to an ordinary file, the creation
             of a directory or symbolic link, or the creation of a directory
             entry failed because the user's quota of disk blocks was exhaust-
             ed, or the allocation of an inode for a newly created file failed
             because the user's quota of inodes was exhausted.

     70 ESTALE _S_t_a_l_e _N_F_S _f_i_l_e _h_a_n_d_l_e. An attempt was made to access an open
             file (on an NFS filesystem) which is now unavailable as refer-
             enced by the file descriptor.  This may indicate the file was
             deleted on the NFS server or some other catastrophic event oc-
             cured.

     72 EBADRPC _R_P_C _s_t_r_u_c_t _i_s _b_a_d. Exchange of RPC information was unsuccess-
             ful.

     73 ERPCMISMATCH _R_P_C _v_e_r_s_i_o_n _w_r_o_n_g. The version of RPC on the remote peer
             is not compatible with the local version.

     74 EPROGUNAVAIL _R_P_C _p_r_o_g. _n_o_t _a_v_a_i_l. The requested program is not regis-
             tered on the remote host.

     75 EPROGMISMATCH _P_r_o_g_r_a_m _v_e_r_s_i_o_n _w_r_o_n_g. The requested version of the pro-
             gram is not available on the remote host (RPC).

     76 EPROCUNAVAIL _B_a_d _p_r_o_c_e_d_u_r_e _f_o_r _p_r_o_g_r_a_m. An RPC call was attempted for
             a procedure which doesn't exist in the remote program.

     77 ENOLCK _N_o _l_o_c_k_s _a_v_a_i_l_a_b_l_e. A system-imposed limit on the number of si-
             multaneous file locks was reached.

     78 ENOSYS _F_u_n_c_t_i_o_n _n_o_t _i_m_p_l_e_m_e_n_t_e_d. Attempted a system call that is not
             available on this system.

DDEEFFIINNIITTIIOONNSS
     Process ID.
             Each active process in the system is uniquely identified by a
             non-negative integer called a process ID.  The range of this ID
             is from 0 to 30000.

     Parent process ID
             A new process is created by a currently active process; (see
             fork(2)).  The parent process ID of a process is the process ID


             of its creator.

     Process Group ID
             Each active process is a member of a process group that is iden-
             tified by a non-negative integer called the process group ID.
             This is the process ID of the group leader.  This grouping per-
             mits the signaling of related processes (see killpg(2))  and the
             job control mechanisms of csh(1).

     Tty Group ID
             Each active process can be a member of a terminal group that is
             identified by a non-negative integer called the tty group ID.
             This grouping is used to arbitrate between multiple jobs contend-
             ing for the same terminal; (see csh(1) and tty(4)).

     Real User ID and Real Group ID
             Each user on the system is identified by a positive integer
             termed the real user ID.

             Each user is also a member of one or more groups.  One of these
             groups is distinguished from others and used in implementing ac-
             counting facilities.  The positive integer corresponding to this
             distinguished group is termed the real group ID.

             All processes have a real user ID and real group ID.  These are
             initialized from the equivalent attributes of the process that
             created it.

     Effective User Id, Effective Group Id, and Access Groups
             Access to system resources is governed by three values: the ef-
             fective user ID, the effective group ID, and the group access
             list.

             The effective user ID and effective group ID are initially the
             process's real user ID and real group ID respectively.  Either
             may be modified through execution of a set-user-ID or set-group-
             ID file (possibly by one its ancestors) (see execve(2)).

             The group access list is an additional set of group ID's used on-
             ly in determining resource accessibility.  Access checks are per-
             formed as described below in ``File Access Permissions''.

     Super-user
             A process is recognized as a _s_u_p_e_r-_u_s_e_r process and is granted
             special privileges if its effective user ID is 0.

     Special Processes
             The processes with a process ID's of 0, 1, and 2 are special.
             Process 0 is the scheduler.  Process 1 is the initialization pro-
             cess init,  and is the ancestor of every other process in the
             system.  It is used to control the process structure.  Process 2
             is the paging daemon.

     Descriptor
             An integer assigned by the system when a file is referenced by
             open(2) or dup(2),  or when a socket is created by pipe(2),
             socket(2) or socketpair(2),  which uniquely identifies an access
             path to that file or socket from a given process or any of its
             children.

     File Name
             Names consisting of up to 255 (MAXNAMELEN) characters may be used
             to name an ordinary file, special file, or directory.

             These characters may be selected from the set of all ASCII char-
             acter excluding 0 (NUL) and the ASCII code for `/' (slash).  (The
             parity bit, bit 7, must be 0.)

             Note that it is generally unwise to use `*', `?', `[' or `]' as
             part of file names because of the special meaning attached to
             these characters by the shell.

     Path Name
             A path name is a NUL-terminated character string starting with an
             optional slash `/', followed by zero or more directory names sep-
             arated by slashes, optionally followed by a file name.  The total
             length of a path name must be less than 1024 (MAXPATHLEN) charac-
             ters.

             If a path name begins with a slash, the path search begins at the
             _r_o_o_t directory.  Otherwise, the search begins from the current
             working directory.  A slash by itself names the root directory.
             An empty pathname refers to the current directory.

     Directory
             A directory is a special type of file that contains entries that
             are references to other files.  Directory entries are called
             links.  By convention, a directory contains at least two links,
             `.' and `..', referred to as _d_o_t and _d_o_t-_d_o_t respectively.  Dot
             refers to the directory itself and dot-dot refers to its parent
             directory.

     Root Directory and Current Working Directory
             Each process has associated with it a concept of a root directory
             and a current working directory for the purpose of resolving path
             name searches.  A process's root directory need not be the root
             directory of the root file system.

     File Access Permissions
             Every file in the file system has a set of access permissions.
             These permissions are used in determining whether a process may
             perform a requested operation on the file (such as opening a file
             for writing).  Access permissions are established at the time a
             file is created.  They may be changed at some later time through
             the chmod(2) call.

             File access is broken down according to whether a file may be:
             read, written, or executed.  Directory files use the execute per-
             mission to control if the directory may be searched.

             File access permissions are interpreted by the system as they ap-
             ply to three different classes of users: the owner of the file,
             those users in the file's group, anyone else.  Every file has an
             independent set of access permissions for each of these classes.
             When an access check is made, the system decides if permission
             should be granted by checking the access information applicable
             to the caller.

             Read, write, and execute/search permissions on a file are granted
             to a process if:

             The process's effective user ID is that of the super-user. (Note:
             even the super-user cannot execute a non-executable file.)

             The process's effective user ID matches the user ID of the owner
             of the file and the owner permissions allow the access.

             The process's effective user ID does not match the user ID of the
             owner of the file, and either the process's effective group ID
             matches the group ID of the file, or the group ID of the file is
             in the process's group access list, and the group permissions al-
             low the access.

             Neither the effective user ID nor effective group ID and group
             access list of the process match the corresponding user ID and
             group ID of the file, but the permissions for ``other users'' al-
             low access.

             Otherwise, permission is denied.

     Sockets and Address Families

             A socket is an endpoint for communication between processes.
             Each socket has queues for sending and receiving data.

             Sockets are typed according to their communications properties.
             These properties include whether messages sent and received at a
             socket require the name of the partner, whether communication is
             reliable, the format used in naming message recipients, etc.

             Each instance of the system supports some collection of socket
             types; consult socket(2) for more information about the types
             available and their properties.

             Each instance of the system supports some number of sets of com-
             munications protocols.  Each protocol set supports addresses of a
             certain format.  An Address Family is the set of addresses for a
             specific group of protocols.  Each socket has an address chosen
             from the address family in which the socket was created.

SSEEEE AALLSSOO
     intro(3), perror(3)

HHIISSTTOORRYY
     An iinnttrroo appeared in Version 6 AT&T UNIX.

4th Berkeley Distribution        July 23, 1991                               9
































