SIGVEC(2)                 386BSD Programmer's Manual                 SIGVEC(2)

NNAAMMEE
     ssiiggvveecc - software signal facilities

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssiiggnnaall..hh>>
     struct sigvec {
             void     (*sv_handler)();
             sigset_t sv_mask;
             int      sv_flags;
     };

     ssiiggvveecc(_i_n_t _s_i_g, _s_t_r_u_c_t _s_i_g_v_e_c *_v_e_c, _s_t_r_u_c_t _s_i_g_v_e_c *_o_v_e_c)

DDEESSCCRRIIPPTTIIOONN
     TThhiiss iinntteerrffaaccee iiss mmaaddee oobbssoolleettee bbyy ssiiggaaccttiioonn((22))..

     The system defines a set of signals that may be delivered to a process.
     Signal delivery resembles the occurence of a hardware interrupt: the
     signal is blocked from further occurrence, the current process context is
     saved, and a new one is built.  A process may specify a _h_a_n_d_l_e_r to which
     a signal is delivered, or specify that a signal is to be _b_l_o_c_k_e_d or
     _i_g_n_o_r_e_d. A process may also specify that a default action is to be taken
     by the system when a signal occurs.  Normally, signal handlers execute on
     the current stack of the process.  This may be changed, on a per-handler
     basis, so that signals are taken on a special _s_i_g_n_a_l _s_t_a_c_k.

     All signals have the same _p_r_i_o_r_i_t_y. Signal routines execute with the
     signal that caused their invocation _b_l_o_c_k_e_d, but other signals may yet
     occur.  A global _s_i_g_n_a_l _m_a_s_k defines the set of signals currently blocked
     from delivery to a process.  The signal mask for a process is initialized
     from that of its parent (normally 0).  It may be changed with a
     sigblock(2) or sigsetmask(2) call, or when a signal is delivered to the
     process.

     When a signal condition arises for a process, the signal is added to a
     set of signals pending for the process.  If the signal is not currently
     _b_l_o_c_k_e_d by the process then it is delivered to the process.  When a
     signal is delivered, the current state of the process is saved, a new
     signal mask is calculated (as described below), and the signal handler is
     invoked.  The call to the handler is arranged so that if the signal
     handling routine returns normally the process will resume execution in
     the context from before the signal's delivery.  If the process wishes to
     resume in a different context, then it must arrange to restore the
     previous context itself.

     When a signal is delivered to a process a new signal mask is installed
     for the duration of the process' signal handler (or until a sigblock or
     sigsetmask call is made).  This mask is formed by taking the current
     signal mask, adding the signal to be delivered, and _o_r'ing in the signal
     mask associated with the handler to be invoked.

     SSiiggvveecc() assigns a handler for a specific signal.  If _v_e_c is non-zero, it
     specifies a handler routine and mask to be used when delivering the
     specified signal.  Further, if the SV_ONSTACK bit is set in _s_v__f_l_a_g_s, the
     system will deliver the signal to the process on a _s_i_g_n_a_l _s_t_a_c_k,
     specified with sigstack(2).  If _o_v_e_c is non-zero, the previous handling
     information for the signal is returned to the user.

     The following is a list of all signals with names as in the include file
     <_s_i_g_n_a_l._h>:




     NNAAMMEE              DDeeffaauulltt AAccttiioonn                      DDeessccrriippttiioonn
     SIGHUP          terminate process       terminal line hangup
     SIGINT          terminate process       interrupt program
     SIGQUIT         create core image       quit program
     SIGILL          create core image       illegal instruction
     SIGTRAP         create core image       trace trap
     SIGABRT         create core image       abort(2) call (formerly SIGIOT)
     SIGEMT          create core image       emulate instruction executed
     SIGFPE          create core image       floating-point exception
     SIGKILL         terminate process       kill program
     SIGBUS          create core image       bus error
     SIGSEGV         create core image       segmentation violation
     SIGSYS          create core image       system call given invalid
                                             argument
     SIGPIPE         terminate process       write on a pipe with no reader
     SIGALRM         terminate process       real-time timer expired
     SIGTERM         terminate process       software termination signal
     SIGURG          discard signal          urgent condition present on
                                             socket
     SIGSTOP         stop process            stop (cannot be caught or
                                             ignored)
     SIGTSTP         stop process            stop signal generated from
                                             keyboard
     SIGCONT         discard signal          continue after stop
     SIGCHLD         discard signal          child status has changed
     SIGTTIN         stop process            background read attempted from
                                             control terminal
     SIGTTOU         stop process            background write attempted to
                                             control terminal
     SIGIO           discard signal          I/O is possible on a descriptor
                                             (see fcntl(2))
     SIGXCPU         terminate process       cpu time limit exceeded (see
                                             setrlimit(2))
     SIGXFSZ         terminate process       file size limit exceeded (see
                                             setrlimit(2))
     SIGVTALRM       terminate process       virtual time alarm (see
                                             setitimer(2))
     SIGPROF         terminate process       profiling timer alarm (see
                                             setitimer(2))
     SIGWINCH        discard signal          Window size change
     SIGINFO         discard signal          status request from keyboard
     SIGUSR1         terminate process       User defined signal 1
     SIGUSR2         terminate process       User defined signal 2

     Once a signal handler is installed, it remains installed until another
     ssiiggvveecc() call is made, or an execve(2) is performed.  A signal-specific
     default action may be reset by setting _s_v__h_a_n_d_l_e_r to SIG_DFL. The
     defaults are process termination, possibly with core dump; no action;
     stopping the process; or continuing the process.  See the above signal
     list for each signal's default action.  If _s_v__h_a_n_d_l_e_r is SIG_IGN current
     and pending instances of the signal are ignored and discarded.

     If a signal is caught during the system calls listed below, the call is
     normally restarted.  The call can be forced to terminate prematurely with
     an EINTR error return by setting the SV_INTERRUPT bit in _s_v__f_l_a_g_s. The
     affected system calls include read(2),  write(2),  sendto(2),
     recvfrom(2),  sendmsg(2) and recvmsg(2) on a communications channel or a
     slow device (such as a terminal, but not a regular file) and during a
     wait(2) or ioctl(2).  However, calls that have already committed are not
     restarted, but instead return a partial success (for example, a short
     read count).

     After a fork(2) or vfork(2) all signals, the signal mask, the signal
     stack, and the restart/interrupt flags are inherited by the child.


     Execve(2) reinstates the default action for all signals which were caught
     and resets all signals to be caught on the user stack.  Ignored signals
     remain ignored; the signal mask remains the same; signals that interrupt
     system calls continue to do so.

NNOOTTEESS
     The mask specified in _v_e_c is not allowed to block SIGKILL or SIGSTOP.
     This is done silently by the system.

     The SV_INTERRUPT flag is not available in 4.2BSD, hence it should not be
     used if backward compatibility is needed.

RREETTUURRNN VVAALLUUEESS
     A 0 value indicated that the call succeeded.  A -1 return value indicates
     an error occurred and _e_r_r_n_o is set to indicated the reason.

EERRRROORRSS
     SSiiggvveecc() will fail and no new signal handler will be installed if one of
     the following occurs:

     [EFAULT]  Either _v_e_c or _o_v_e_c points to memory that is not a valid part of
               the process address space.

     [EINVAL]  _S_i_g is not a valid signal number.

     [EINVAL]  An attempt is made to ignore or supply a handler for SIGKILL or
               SIGSTOP.

SSEEEE AALLSSOO
     sigaction(2),  kill(1),  ptrace(2),  kill(2),  sigprocmask(2),
     sigsuspend(2),  sigblock(2),  sigsetmask(2),  sigpause(2),  sigstack(2),
     sigvec(2),  sigsetops(3),  setjmp(3),  siginterrupt(3),  tty(4)

EEXXAAMMPPLLEE
     On the VAX-11 The handler routine can be declared:

           void handler(sig, code, scp)
           int sig, code;
           struct sigcontext *scp;

     Here _s_i_g is the signal number, into which the hardware faults and traps
     are mapped as defined below.  _C_o_d_e is a parameter that is either a
     constant as given below or, for compatibility mode faults, the code
     provided by the hardware (Compatibility mode faults are distinguished
     from the other SIGILL traps by having PSL_CM set in the psl).  _S_c_p is a
     pointer to the _s_i_g_c_o_n_t_e_x_t structure (defined in <_s_i_g_n_a_l._h>), used to
     restore the context from before the signal.

BBUUGGSS
     This manual page is still confusing.

4th Berkeley Distribution       April 29, 1991                               3














