GETRUSAGE(2)              386BSD Programmer's Manual              GETRUSAGE(2)

NNAAMMEE
     ggeettrruussaaggee - get information about resource utilization

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ttiimmee..hh>>
     ##iinncclluuddee <<ssyyss//rreessoouurrccee..hh>>
     ##ddeeffiinnee   RRUUSSAAGGEE__SSEELLFF     00
     ##ddeeffiinnee   RRUUSSAAGGEE__CCHHIILLDDRREENN     --11

     _i_n_t
     ggeettrruussaaggee(_i_n_t _w_h_o, _s_t_r_u_c_t _r_u_s_a_g_e *_r_u_s_a_g_e)

DDEESSCCRRIIPPTTIIOONN
     GGeettrruussaaggee() returns information describing the resources utilized by the
     current process, or all its terminated child processes.  The _w_h_o
     parameter is either RUSAGE_SELF or RUSAGE_CHILDREN. The buffer to which
     _r_u_s_a_g_e points will be filled in with the following structure:

     struct rusage {
             struct timeval ru_utime; /* user time used */
             struct timeval ru_stime; /* system time used */
             long ru_maxrss;          /* integral max resident set size */
             long ru_ixrss;           /* integral shared text memory size */
             long ru_idrss;           /* integral unshared data size */
             long ru_isrss;           /* integral unshared stack size */
             long ru_minflt;          /* page reclaims */
             long ru_majflt;          /* page faults */
             long ru_nswap;           /* swaps */
             long ru_inblock;         /* block input operations */
             long ru_oublock;         /* block output operations */
             long ru_msgsnd;          /* messages sent */
             long ru_msgrcv;          /* messages received */
             long ru_nsignals;        /* signals received */
             long ru_nvcsw;           /* voluntary context switches */
             long ru_nivcsw;          /* involuntary context switches */
     };

     The fields are interpreted as follows:

     _r_u__u_t_i_m_e     the total amount of time spent executing in user mode.

     _r_u__s_t_i_m_e     the total amount of time spent in the system executing on
                  behalf of the process(es).

     _r_u__m_a_x_r_s_s    the maximum resident set size utilized (in kilobytes).

     _r_u__i_x_r_s_s     an integral value indicating the amount of memory used by
                  the text segment that was also shared among other processes.
                  This value is expressed in units of kilobytes * ticks-of-
                  execution.

     _r_u__i_d_r_s_s     an integral value of the amount of unshared memory residing
                  in the data segment of a process (expressed in units of
                  kilobytes * ticks-of-execution).

     _r_u__i_s_r_s_s     an integral value of the amount of unshared memory residing
                  in the stack segment of a process (expressed in units of
                  kilobytes * ticks-of-execution).

     _r_u__m_i_n_f_l_t    the number of page faults serviced without any I/O activity;
                  here I/O activity is avoided by reclaiming a page frame from


                  the list of pages awaiting reallocation.

     _r_u__m_a_j_f_l_t    the number of page faults serviced that required I/O
                  activity.

     _r_u__n_s_w_a_p     the number of times a process was swapped out of main
                  memory.

     _r_u__i_n_b_l_o_c_k   the number of times the file system had to perform input.

     _r_u__o_u_b_l_o_c_k   the number of times the file system had to perform output.

     _r_u__m_s_g_s_n_d    the number of IPC messages sent.

     _r_u__m_s_g_r_c_v    the number of IPC messages received.

     _r_u__n_s_i_g_n_a_l_s  the number of signals delivered.

     _r_u__n_v_c_s_w     the number of times a context switch resulted due to a
                  process voluntarily giving up the processor before its time
                  slice was completed (usually to await availability of a
                  resource).

     _r_u__n_i_v_c_s_w    the number of times a context switch resulted due to a
                  higher priority process becoming runnable or because the
                  current process exceeded its time slice.

NNOOTTEESS
     The numbers _r_u__i_n_b_l_o_c_k and _r_u__o_u_b_l_o_c_k account only for real I/O; data
     supplied by the caching mechanism is charged only to the first process to
     read or write the data.

EERRRROORRSS
     GGeettrruussaaggee() returns -1 on error.  The possible errors are:

     [EINVAL]      The _w_h_o parameter is not a valid value.

     [EFAULT]      The address specified by the _r_u_s_a_g_e parameter is not in a
                   valid part of the process address space.

SSEEEE AALLSSOO
     gettimeofday(2),  wait(2)

BBUUGGSS
     There is no way to obtain information about a child process that has not
     yet terminated.

HHIISSTTOORRYY
     The ggeettrruussaaggee function call appeared in 4.2BSD.

4th Berkeley Distribution       March 10, 1991                               2
















