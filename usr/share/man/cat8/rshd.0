RSHD(8)                 386BSD System Manager's Manual                 RSHD(8)

NNAAMMEE
     rrsshhdd - remote shell server

SSYYNNOOPPSSIISS
     rrsshhdd [--aallnn]

DDEESSCCRRIIPPTTIIOONN
     The rrsshhdd server is the server for the rcmd(3) routine and, consequently,
     for the rsh(1) program.  The server provides remote execution facilities
     with authentication based on privileged port numbers from trusted hosts.

     The rrsshhdd server listens for service requests at the port indicated in the
     ``cmd'' service specification; see services(5).  When a service request
     is received the following protocol is initiated:

     1.   The server checks the client's source port.  If the port is not in
          the range 512-1023, the server aborts the connection.

     2.   The server reads characters from the socket up to a null (`\0')
          byte.  The resultant string is interpreted as an ASCII number, base
          10.

     3.   If the number received in step 2 is non-zero, it is interpreted as
          the port number of a secondary stream to be used for the _s_t_d_e_r_r. A
          second connection is then created to the specified port on the
          client's machine.  The source port of this second connection is also
          in the range 512-1023.

     4.   The server checks the client's source address and requests the
          corresponding host name (see gethostbyaddr(3),  hosts(5) and
          named(8)).  If the hostname cannot be determined, the dot-notation
          representation of the host address is used.  If the hostname is in
          the same domain as the server (according to the last two components
          of the domain name), or if the --aa option is given, the addresses for
          the hostname are requested, verifying that the name and address
          correspond.  If address verification fails, the connection is
          aborted with the message, ``Host address mismatch.''

     5.   A null terminated user name of at most 16 characters is retrieved on
          the initial socket.  This user name is interpreted as the user
          identity on the _c_l_i_e_n_t's machine.

     6.   A null terminated user name of at most 16 characters is retrieved on
          the initial socket.  This user name is interpreted as a user
          identity to use on the sseerrvveerr's machine.

     7.   A null terminated command to be passed to a shell is retrieved on
          the initial socket.  The length of the command is limited by the
          upper bound on the size of the system's argument list.

     8.   RRsshhdd then validates the user using ruserok(3),  which uses the file
          /_e_t_c/_h_o_s_t_s._e_q_u_i_v and the ._r_h_o_s_t_s file found in the user's home
          directory.  The --ll option prevents ruserok(3) from doing any
          validation based on the user's ``.rhosts'' file, unless the user is
          the superuser.

     9.   A null byte is returned on the initial socket and the command line
          is passed to the normal login shell of the user.  The shell inherits
          the network connections established by rrsshhdd.

          Transport-level keepalive messages are enabled unless the --nn option
          is present.  The use of keepalive messages allows sessions to be
          timed out if the client crashes or becomes unreachable.

DDIIAAGGNNOOSSTTIICCSS
     Except for the last one listed below, all diagnostic messages are
     returned on the initial socket, after which any network connections are
     closed.  An error is indicated by a leading byte with a value of 1 (0 is
     returned in step 9 above upon successful completion of all the steps
     prior to the execution of the login shell).

     LLooccuusseerr ttoooo lloonngg..
             The name of the user on the client's machine is longer than 16
             characters.

     RRuusseerr ttoooo lloonngg..
             The name of the user on the remote machine is longer than 16
             characters.

     CCoommmmaanndd ttoooo lloonngg.
             The command line passed exceeds the size of the argument list (as
             configured into the system).

     LLooggiinn iinnccoorrrreecctt..
             No password file entry for the user name existed.

     RReemmoottee ddiirreeccttoorryy..
             The chdir command to the home directory failed.

     PPeerrmmiissssiioonn ddeenniieedd..
             The authentication procedure described above failed.

     CCaann''tt mmaakkee ppiippee..
             The pipe needed for the _s_t_d_e_r_r, wasn't created.

     CCaann''tt ffoorrkk;; ttrryy aaggaaiinn..
             A fork by the server failed.

     <<sshheellllnnaammee>>:: ......
             The user's login shell could not be started.  This message is
             returned on the connection associated with the _s_t_d_e_r_r, and is not
             preceded by a flag byte.

SSEEEE AALLSSOO
     rsh(1),  rcmd(3),  ruserok(3)

BBUUGGSS
     The authentication procedure used here assumes the integrity of each
     client machine and the connecting medium.  This is insecure, but is
     useful in an ``open'' environment.

     A facility to allow all data exchanges to be encrypted should be present.

     A more extensible protocol (such as Telnet) should be used.

4.2 Berkeley Distribution       April 20, 1991                               2














