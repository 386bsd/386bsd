SYSLOG(3)                 386BSD Programmer's Manual                 SYSLOG(3)

NNAAMMEE
     ssyysslloogg, vvssyysslloogg, ooppeennlloogg, cclloosseelloogg, sseettllooggmmaasskk - control system log

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyysslloogg..hh>>
     ##iinncclluuddee <<vvaarraarrggss..hh>>

     _v_o_i_d
     ssyysslloogg(_i_n_t _p_r_i_o_r_i_t_y, _c_o_n_s_t _c_h_a_r *_m_e_s_s_a_g_e, ...)

     _v_o_i_d
     vvssyysslloogg(_i_n_t _p_r_i_o_r_i_t_y, _c_o_n_s_t _c_h_a_r *_m_e_s_s_a_g_e, _v_a__l_i_s_t _a_r_g_s)

     _v_o_i_d
     ooppeennlloogg(_c_o_n_s_t _c_h_a_r *_i_d_e_n_t, _i_n_t _l_o_g_o_p_t, _i_n_t _f_a_c_i_l_i_t_y)

     _v_o_i_d
     cclloosseelloogg(_v_o_i_d)

     _i_n_t
     sseettllooggmmaasskk(_i_n_t _m_a_s_k_p_r_i)

DDEESSCCRRIIPPTTIIOONN
     The ssyysslloogg() function writes _m_e_s_s_a_g_e to the system message logger.  The
     message is then written to the system console, log files, logged-in
     users, or forwarded to other machines as appropriate. (See syslogd(8).)

     The message is identical to a printf(3) format string, except that `%m'
     is replaced by the current error message. (As denoted by the global
     variable _e_r_r_n_o; see strerror(3).)  A trailing newline is added if none is
     present.

     The vvssyysslloogg() function is an alternate form in which the arguments have
     already been captured using the variable-length argument facilities of
     varargs(3).

     The message is tagged with _p_r_i_o_r_i_t_y. Priorities are encoded as a _f_a_c_i_l_i_t_y
     and a _l_e_v_e_l. The facility describes the part of the system generating the
     message.  The level is selected from the following _o_r_d_e_r_e_d (high to low)
     list:

     LOG_EMERG     A panic condition.  This is normally broadcast to all
                   users.

     LOG_ALERT     A condition that should be corrected immediately, such as a
                   corrupted system database.

     LOG_CRIT      Critical conditions, e.g., hard device errors.

     LOG_ERR       Errors.

     LOG_WARNING   Warning messages.

     LOG_NOTICE    Conditions that are not error conditions, but should
                   possibly be handled specially.

     LOG_INFO      Informational messages.

     LOG_DEBUG     Messages that contain information normally of use only when
                   debugging a program.

     The ooppeennlloogg() function provides for more specialized processing of the
     messages sent by ssyysslloogg() and vvssyysslloogg().  The parameter _i_d_e_n_t is a string
     that will be prepended to every message.  The _l_o_g_o_p_t argument is a bit
     field specifying logging options, which is formed by OR'ing one or more
     of the following values:

     LOG_CONS      If ssyysslloogg() cannot pass the message to syslogd it will
                   attempt to write the message to the console
                   (``/_d_e_v/_c_o_n_s_o_l_e.'')

     LOG_NDELAY    Open the connection to syslogd immediately.  Normally the
                   open is delayed until the first message is logged.  Useful
                   for programs that need to manage the order in which file
                   descriptors are allocated.

     LOG_PERROR    Write the message to standard error output as well to the
                   system log.

     LOG_PID       Log the process id with each message: useful for
                   identifying instantiations of daemons.

     The _f_a_c_i_l_i_t_y parameter encodes a default facility to be assigned to all
     messages that do not have an explicit facility encoded:

     LOG_AUTH      The authorization system: login(1),  su(1),  getty(8),
                   etc.

     LOG_AUTHPRIV  The same as LOG_AUTH, but logged to a file readable only by
                   selected individuals.

     LOG_CRON      The clock daemon.

     LOG_DAEMON    System daemons, such as ftpd(8),  routed(8),  etc., that
                   are not provided for explicitly by other facilities.

     LOG_KERN      Messages generated by the kernel.  These cannot be
                   generated by any user processes.

     LOG_LPR       The line printer spooling system: lpr(1),  lpc(8),  lpd(8),
                    etc.

     LOG_MAIL      The mail system.

     LOG_NEWS      The network news system.

     LOG_SYSLOG    Messages generated internally by syslogd(8).

     LOG_USER      Messages generated by random user processes.  This is the
                   default facility identifier if none is specified.

     LOG_UUCP      The uucp system.

     LOG_LOCAL0    Reserved for local use.  Similarly for LOG_LOCAL1 through
                   LOG_LOCAL7.

     The cclloosseelloogg() function can be used to close the log file.

     The sseettllooggmmaasskk() function sets the log priority mask to _m_a_s_k_p_r_i and
     returns the previous mask.  Calls to ssyysslloogg() with a priority not set in
     _m_a_s_k_p_r_i are rejected.  The mask for an individual priority _p_r_i is
     calculated by the macro LLOOGG__MMAASSKK(_p_r_i); the mask for all priorities up to
     and including _t_o_p_p_r_i is given by the macro LLOOGG__UUPPTTOO(_t_o_p_p_r_i);. The default
     allows all priorities to be logged.

RREETTUURRNN VVAALLUUEESS
     The routines cclloosseelloogg(), ooppeennlloogg(), ssyysslloogg() and vvssyysslloogg() return no
     value.


     The routine sseettllooggmmaasskk() always returns the previous log mask level.

EEXXAAMMPPLLEESS
           syslog(LOG_ALERT, "who: internal error 23");

           openlog("ftpd", LOG_PID, LOG_DAEMON);
           setlogmask(LOG_UPTO(LOG_ERR));
           syslog(LOG_INFO, "Connection from host %d", CallingHost);

           syslog(LOG_INFO|LOG_LOCAL2, "foobar error: %m");

SSEEEE AALLSSOO
     logger(1),  syslogd(8)

HHIISSTTOORRYY
     These functions appeared in 4.2BSD.

4.2 Berkeley Distribution       April 19, 1991                               3
















































