/* llib-lpsap2 - lint library for -lpsap2 */

/* 
 * $Header: /f/osi/psap2/RCS/llib-lpsap2,v 7.1 91/02/22 09:37:23 mrose Interim $
 *
 *
 * $Log:	llib-lpsap2,v $
 * Revision 7.1  91/02/22  09:37:23  mrose
 * Interim 6.8
 * 
 * Revision 7.0  89/11/23  22:14:13  mrose
 * Release 6.0
 * 
 */

/*
 *				  NOTICE
 *
 *    Acquisition, use, and distribution of this module and related
 *    materials are subject to the restrictions of a license agreement.
 *    Consult the Preface in the User's Manual for the full terms of
 *    this agreement.
 *
 */


/* LINTLIBRARY */

#include "psap2.h"

/*  */

/* SERVER only */

int	PExec (ss, pi, arg1, arg2, hook, setperms)
struct SSAPstart *ss;
struct PSAPindication *pi;
char   *arg1,
       *arg2;
IFP	hook,
	setperms;
{
    return PExec (ss, pi, arg1, arg2, hook, setperms);
}


/* P-CONNECT.INDICATION */

int	PInit (vecp, vec, ps, pi)
int	vecp;
char  **vec;
struct PSAPstart *ps;
struct PSAPindication *pi;
{
    return PInit (vecp, vec, ps, pi);
}


/* P-CONNECT.RESPONSE */

int	PConnResponse (sd, status, responding, ctxlist, defctxresult,
	prequirements, srequirements, isn, settings, ref, data, ndata, pi)
int	sd;
struct PSAPaddr *responding;
int	status,
	prequirements,
	srequirements,
	settings,
	ndata;
long	isn;
struct PSAPctxlist *ctxlist;
int	defctxresult;
struct SSAPref *ref;
PE     *data;
struct PSAPindication *pi;
{
    return PConnResponse (sd, status, responding, ctxlist, defctxresult,
		prequirements, srequirements, isn, settings, ref,
		data, ndata, pi);
}


/* P-(ASYN-)CONNECT.REQUEST */

int	PAsynConnRequest (calling, called, ctxlist, defctxname, prequirements,
	srequirements, isn, settings, ref, data, ndata, qos, pc, pi, async)
struct PSAPaddr *calling,
		*called;
int	prequirements,
	srequirements,
	settings,
	ndata,
	async;
long	isn;
struct PSAPctxlist *ctxlist;
OID	defctxname;
struct SSAPref *ref;
PE    *data;
struct QOStype *qos;
struct PSAPconnect *pc;
struct PSAPindication *pi;
{
    return PAsynConnRequest (calling, called, ctxlist, defctxname,
		prequirements, srequirements, isn, settings, ref, data,
		ndata, qos, pc, pi, async);
}


/* P-ASYN-RETRY.REQUEST (pseudo) */

int	PAsynRetryRequest (sd, pc, pi)
int	sd;
struct PSAPconnect *pc;
struct PSAPindication *pi;
{
    return PAsynRetryRequest (sd, pc, pi);
}


/* P-ASYN-NEXT.REQUEST (pseudo) */

int	PAsynNextRequest (sd, pc, pi)
int	sd;
struct PSAPconnect *pc;
struct PSAPindication *pi;
{
    return PAsynNextRequest (sd, pc, pi);
}


/* P-[*-]DATA.REQUEST */

int	PDataRequest (sd, data, ndata, pi)
int	sd;
PE     *data;
int	ndata;
struct PSAPindication *pi;
{
    return PDataRequest (sd, data, ndata, pi);
}


int	PDataRequestAux (sd, data, ndata, pi, dtype, sfunc, stype, text, ppdu)
int	sd;
PE     *data;
int	ndata,
	ppdu;
struct PSAPindication *pi;
char   *dtype,
       *stype,
       *text;
IFP	sfunc;
{
    return PDataRequestAux (sd, data, ndata, pi, dtype, sfunc, stype, text,
			    ppdu);
}


/* P-READ.REQUEST (pseudo) */

int	PReadRequest (sd, px, secs, pi)
int	sd;
struct PSAPdata *px;
int	secs;
struct PSAPindication *pi;
{
    return PReadRequest (sd, px, secs, pi);
}


/* P-TOKEN-GIVE.REQUEST */

int	PGTokenRequest (sd, tokens, pi)
int	sd;
int	tokens;
struct PSAPindication *pi;
{
    return PGTokenRequest (sd, tokens, pi);
}


/* P-TOKEN-PLEASE.REQUEST */

int	PPTokenRequest (sd, tokens, data, ndata, pi)
int	sd;
int	tokens,
	ndata;
PE     *data;
struct PSAPindication *pi;
{
    return PPTokenRequest (sd, tokens, data, ndata, pi);
}


/* P-CONTROL-GIVE.REQUEST */

int	PGControlRequest (sd, pi)
int	sd;
struct PSAPindication *pi;
{
    return PGControlRequest (sd, pi);
}


/* P-{MAJOR-SYNC,ACTIVITY-END}.REQUEST */

int	PMajSyncRequestAux (sd, ssn, data, ndata, pi, dtype, sfunc, stype)
int	sd;
long   *ssn;
int     ndata;
PE     *data;
struct PSAPindication *pi;
char   *dtype,
       *stype;
IFP	sfunc;
{
    return PMajSyncRequestAux (sd, ssn, data, ndata, pi, dtype, sfunc, stype);
}


/* P-{MAJOR-SYNC,ACTIVITY-END}.RESPONSE */

int	PMajSyncResponseAux (sd, data, ndata, pi, dtype, sfunc, stype)
int	sd;
int	ndata;
PE     *data;
struct PSAPindication *pi;
char   *dtype,
       *stype;
IFP	sfunc;
{
    return PMajSyncResponseAux (sd, data, ndata, pi, dtype, sfunc, stype);
}


/* P-MINOR-SYNC.REQUEST */

int	PMinSyncRequest (sd, type, ssn, data, ndata, pi)
int	sd;
int	type,
	ndata;
long   *ssn;
PE     *data;
struct PSAPindication *pi;
{
    return PMinSyncRequest (sd, type, ssn, data, ndata, pi);
}


/* P-MINOR-SYNC.RESPONSE */

int	PMinSyncResponse (sd, ssn, data, ndata, pi)
int	sd;
int     ndata;
long    ssn;
PE     *data;
struct PSAPindication *pi;
{
    return PMinSyncResponse (sd, ssn, data, ndata, pi);
}


/* P-RESYNCHRONIZE.REQUEST */

int	PReSyncRequest (sd, type, ssn, settings, data, ndata, pi)
int	sd;
int	type,
	settings,
	ndata;
long	ssn;
PE     *data;
struct PSAPindication *pi;
{
    return PReSyncRequest (sd, type, ssn, settings, data, ndata, pi);
}


/* P-RESYNCHRONIZE.RESPONSE */

int	PReSyncResponse (sd, ssn, settings, data, ndata, pi)
int	sd;
int	settings,
	ndata;
long	ssn;
PE     *data;
struct PSAPindication *pi;
{
    return PReSyncResponse (sd, ssn, settings, data, ndata, pi);
}


/* P-ACTIVITY-START.REQUEST */

int	PActStartRequest (sd, id, data, ndata, pi)
int	sd;
struct SSAPactid *id;
int	ndata;
PE     *data;
struct PSAPindication *pi;
{
    return PActStartRequest (sd, id, data, ndata, pi);
}


/* P-ACTIVITY-RESUME.REQUEST */

int	PActResumeRequest (sd, id, oid, ssn, ref, data, ndata, pi)
int	sd;
struct SSAPactid *id,
		 *oid;
long	ssn;
int	ndata;
struct SSAPref *ref;
PE     *data;
struct PSAPindication *pi;
{
    return PActResumeRequest (sd, id, oid, ssn, ref, data, ndata, pi);
}


/* P-ACTIVITY-{INTERRUPT,DISCARD}.REQUEST */

int	PActIntrRequestAux (sd, reason, pi, sfunc, stype)
int	sd;
int	reason;
struct PSAPindication *pi;
IFP	sfunc;
char   *stype;
{
    return PActIntrRequestAux (sd, reason, pi, sfunc, stype);
}


/* P-ACTIVITY-{INTERRUPT,DISCARD}.RESPONSE */

int	PActIntrResponseAux (sd, pi, sfunc, stype)
int	sd;
struct PSAPindication *pi;
IFP	sfunc;
char   *stype;
{
    return PActIntrResponseAux (sd, pi, sfunc, stype);
}


/* P-U-ABORT.REQUEST */

int	PUAbortRequest (sd, data, ndata, pi)
int	sd;
PE     *data;
int	ndata;
struct PSAPindication *pi;
{
    return PUAbortRequest (sd, data, ndata, pi);
}


/* P-U-EXCEPTION-REPORT.REQUEST */

int	PUReportRequest (sd, reason, data, ndata, pi)
int	sd;
int	reason,
	ndata;
PE     *data;
struct PSAPindication *pi;
{
    return PUReportRequest (sd, reason, data, ndata, pi);
}


/* P-RELEASE.REQUEST */

int	PRelRequest (sd, data, ndata, secs, pr, pi)
int	sd;
PE     *data;
int	ndata;
int	secs;
struct PSAPrelease *pr;
struct PSAPindication *pi;
{
    return PRelRequest (sd, data, ndata, secs, pr, pi);
}


/* P-RELEASE-Retry.REQUEST (pseudo) */

int	PRelRetryRequest (sd, secs, pr, pi)
int	sd;
int	secs;
struct PSAPrelease *pr;
struct PSAPindication *pi;
{
    return PRelRetryRequest (sd, secs, pr, pi);
}


/* P-RELEASE.RESPONSE */

int	PRelResponse (sd, status, data, ndata, pi)
int	sd;
int	status;
PE     *data;
int	ndata;
struct PSAPindication *pi;
{
    return PRelResponse (sd, status, data, ndata, pi);
}


/* define vectors for INDICATION events */

int	PSetIndications (sd, data, tokens, sync, activity, report, finish,
		abort, pi)
int	sd;
IFP	data,
	tokens,
	sync,
	activity,
	report,
	finish,
	abort;
struct PSAPindication *pi;
{
    return PSetIndications (sd, data, tokens, sync, activity, report, finish,
		abort, pi);
}


/* map presentation descriptors for select() */

int	PSelectMask (sd, mask, nfds, pi)
int	sd;
fd_set *mask;
int    *nfds;
struct PSAPindication *pi;
{
    return PSelectMask (sd, mask, nfds, pi);
}


/* return PSAP error code in string form */

char    *PErrString (c)
int	c;
{
    return PErrString (c);
}
