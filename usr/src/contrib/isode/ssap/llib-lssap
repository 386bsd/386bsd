/* llib-lssap - lint library for -lssap */

/* 
 * $Header: /f/osi/ssap/RCS/llib-lssap,v 7.2 91/02/22 09:45:37 mrose Interim $
 *
 *
 * $Log:	llib-lssap,v $
 * Revision 7.2  91/02/22  09:45:37  mrose
 * Interim 6.8
 * 
 * Revision 7.1  91/01/10  04:11:27  mrose
 * foo
 * 
 * Revision 7.0  89/11/23  22:25:18  mrose
 * Release 6.0
 * 
 */

/*
 *				  NOTICE
 *
 *    Acquisition, use, and distribution of this module and related
 *    materials are subject to the restrictions of a license agreement.
 *    Consult the Preface in the User's Manual for the full terms of
 *    this agreement.
 *
 */


/* LINTLIBRARY */

#include "ssap.h"

/*  */

/* SERVER only */

int	SExec (ts, si, hook, setperms)
struct TSAPstart *ts;
struct SSAPindication *si;
IFP	hook,
	setperms;
{
    return SExec (ts, si, hook, setperms);
}


/* S-CONNECT.INDICATION */

int	SInit (vecp, vec, ss, si)
int	vecp;
char  **vec;
struct SSAPstart *ss;
struct SSAPindication *si;
{
    return SInit (vecp, vec, ss, si);
}


/* S-CONNECT.RESPONSE */

int	SConnResponse (sd, ref, responding, result, requirements, settings,
	isn, data, cc, si)
int	sd;
struct SSAPref *ref;
struct SSAPaddr *responding;
int	result,
	requirements,
	settings,
	cc;
long	isn;
char   *data;
struct SSAPindication *si;
{
    return SConnResponse (sd, ref, responding, result, requirements, settings,
		isn, data, cc, si);
}


/* S-(ASYN-)CONNECT.REQUEST */

int	SAsynConnRequest (ref, calling, called, requirements, settings, isn,
	data, cc, qos, sc, si, async)
struct SSAPref *ref;
struct SSAPaddr *calling,
		*called;
int	requirements,
	settings,
	cc,
	async;
long	isn;
char   *data;
struct QOStype *qos;
struct SSAPconnect *sc;
struct SSAPindication *si;
{
    return SAsynConnRequest (ref, calling, called, requirements, settings, isn,
		data, cc, qos, sc, si, async);
}


/* S-ASYN-RETRY.REQUEST (pseudo) */

int	SAsynRetryRequest (sd, sc, si)
int	sd;
struct SSAPconnect *sc;
struct SSAPindication *si;
{
    return SAsynRetryRequest (sd, sc, si);
}


/* S-ASYN-NEXT.REQUEST (pseudo) */

int	SAsynNextRequest (sd, sc, si)
int	sd;
struct SSAPconnect *sc;
struct SSAPindication *si;
{
    return SAsynNextRequest (sd, sc, si);
}


/* S-DATA.REQUEST */

int	SDataRequest (sd, data, cc, si)
int	sd;
char   *data;
int	cc;
struct SSAPindication  *si;
{
    return SDataRequest (sd, data, cc, si);
}


/* S-SEND.REQUEST (segmented) */

int	SSendRequest (sd, data, cc, begin, end, si)
int	sd;
char   *data;
int	cc,
	begin,
	end;
struct SSAPindication  *si;
{
    return SSendRequest (sd, data, cc, begin, end, si);
}


/* S-WRITE.REQUEST (pseudo, write user data vectors) */

int	SWriteRequest (sd, typed, uv, si)
int	sd;
int	typed;
struct udvec *uv;
struct SSAPindication *si;
{
    return SWriteRequest (sd, typed, uv, si);
}


/* S-EXPEDITED-DATA.REQUEST */

int	SExpdRequest (sd, data, cc, si)
int	sd;
char   *data;
int	cc;
struct SSAPindication  *si;
{
    return SExpdRequest (sd, data, cc, si);
}


/* S-TYPED-DATA.REQUEST */

int	STypedRequest (sd, data, cc, si)
int	sd;
char   *data;
int	cc;
struct SSAPindication *si;
{
    return STypedRequest (sd, data, cc, si);
}


/* S-CAPABILITY-DATA.REQUEST */

int	SCapdRequest (sd, data, cc, si)
int	sd;
char   *data;
int	cc;
struct SSAPindication *si;
{
    return SCapdRequest (sd, data, cc, si);
}


/* S-CAPABILITY-DATA.RESPONSE */

int	SCapdResponse (sd, data, cc, si)
int	sd;
char   *data;
int	cc;
struct SSAPindication *si;
{
    return SCapdResponse (sd, data, cc, si);
}


/* S-READ.REQUEST (pseudo; synchronous read) */

int	SReadRequest (sd, sx, secs, si)
int	sd;
struct SSAPdata *sx;
int	secs;
struct SSAPindication  *si;
{
    return SReadRequest (sd, sx, secs, si);
}


/* S-TOKEN-GIVE.REQUEST */

int	SGTokenRequest (sd, tokens, si)
int	sd;
int	tokens;
struct SSAPindication  *si;
{
    return SGTokenRequest (sd, tokens, si);
}


/* S-TOKEN-PLEASE.REQUEST */

int	SPTokenRequest (sd, tokens, data, cc, si)
int	sd;
int	tokens,
	cc;
char   *data;
struct SSAPindication  *si;
{
    return SPTokenRequest (sd, tokens, data, cc, si);
}


/* S-CONTROL-GIVE.REQUEST */

int	SGControlRequest (sd, si)
int	sd;
struct SSAPindication *si;
{
    return SGControlRequest (sd, si);
}


/* S-MAJOR-SYNC.REQUEST */

int	SMajSyncRequest (sd, ssn, data, cc, si)
int	sd;
long   *ssn;
char   *data;
int	cc;
struct SSAPindication *si;
{
    return SMajSyncRequest (sd, ssn, data, cc, si);
}


/* S-MAJOR-SYNC.RESPONSE */

int	SMajSyncResponse (sd, data, cc, si)
int	sd;
char   *data;
int	cc;
struct SSAPindication *si;
{
    return SMajSyncResponse (sd, data, cc, si);
}


/* S-MINOR-SYNC.REQUEST */

int	SMinSyncRequest (sd, type, ssn, data, cc, si)
int	sd;
int	type;
long   *ssn;
char   *data;
int	cc;
struct SSAPindication *si;
{
    return SMinSyncRequest (sd, type, ssn, data, cc, si);
}


/* S-MINOR-SYNC.RESPONSE */

int	SMinSyncResponse (sd, ssn, data, cc, si)
int	sd;
long	ssn;
char   *data;
int	cc;
struct SSAPindication *si;
{
    return SMinSyncResponse (sd, ssn, data, cc, si);
}


/* S-RESYNCHRONIZE.REQUEST */

int	SReSyncRequest (sd, type, ssn, settings, data, cc, si)
int	sd;
int	type,
	settings;
long	ssn;
char   *data;
int	cc;
struct SSAPindication *si;
{
    return SReSyncRequest (sd, type, ssn, settings, data, cc, si);
}


/* S-RESYNCHRONIZE.RESPONSE */

int	SReSyncResponse (sd, ssn, settings, data, cc, si)
int	sd;
int     settings;
long	ssn;
char   *data;
int	cc;
struct SSAPindication *si;
{
    return SReSyncResponse (sd, ssn, settings, data, cc, si);
}


/* S-ACTIVITY-START.REQUEST */

int	SActStartRequest (sd, id, data, cc, si)
int	sd;
struct SSAPactid *id;
char   *data;
int	cc;
struct SSAPindication *si;
{
    return SActStartRequest (sd, id, data, cc, si);
}

/* S-ACTIVITY-RESUME.REQUEST */

int	SActResumeRequest (sd, id, oid, ssn, ref, data, cc, si)
int	sd;
struct SSAPactid *id,
		 *oid;
long	ssn;
struct SSAPref *ref;
char   *data;
int	cc;
struct SSAPindication *si;
{
    return SActResumeRequest (sd, id, oid, ssn, ref, data, cc, si);
}

/* S-ACTIVITY-INTERRUPT.REQUEST */

int	SActIntrRequest (sd, reason, si)
int	sd;
int	reason;
struct SSAPindication *si;
{
    return SActIntrRequest (sd, reason, si);
}

/* S-ACTIVITY-INTERRUPT.RESPONSE */

int	SActIntrResponse (sd, si)
int	sd;
struct SSAPindication *si;
{
    return SActIntrResponse (sd, si);
}

/* S-ACTIVITY-DISCARD.REQUEST */

int	SActDiscRequest (sd, reason, si)
int	sd;
int	reason;
struct SSAPindication *si;
{
    return SActDiscRequest (sd, reason, si);
}

/* S-ACTIVITY-DISCARD.RESPONSE */

int	SActDiscResponse (sd, si)
int	sd;
struct SSAPindication *si;
{
    return SActDiscResponse (sd, si);
}

/* S-ACTIVITY-END.REQUEST */

int	SActEndRequest (sd, ssn, data, cc, si)
int	sd;
long   *ssn;
char   *data;
int	cc;
struct SSAPindication *si;
{
    return SActEndRequest (sd, ssn, data, cc, si);
}

/* S-ACTIVITY-END.RESPONSE */

int	SActEndResponse (sd, data, cc, si)
int	sd;
char   *data;
int	cc;
struct SSAPindication *si;
{
    return SActEndResponse (sd, data, cc, si);
}

/* S-U-ABORT.REQUEST */

int	SUAbortRequest (sd, data, cc, si)
int	sd;
char   *data;
int	cc;
struct SSAPindication  *si;
{
    return SUAbortRequest (sd, data, cc, si);
}


/* S-U-EXCEPTION-REPORT.REQUEST */

int	SUReportRequest (sd, reason, data, cc, si)
int	sd;
int	reason;
char   *data;
int	cc;
struct SSAPindication *si;
{
    return SUReportRequest (sd, reason, data, cc, si);
}

/* S-RELEASE.REQUEST */

int	SRelRequest (sd, data, cc, secs, sr, si)
int	sd;
char   *data;
int	cc;
int	secs;
struct SSAPrelease *sr;
struct SSAPindication  *si;
{
    return SRelRequest (sd, data, cc, secs, sr, si);
}


/* S-RELEASE-RETRY.REQUEST (pseudo) */

int	SRelRetryRequest (sd, secs, sr, si)
int	sd;
int	secs;
struct SSAPrelease *sr;
struct SSAPindication *si;
{
    return SRelRetryRequest (sd, secs, sr, si);
}


/* S-RELEASE.RESPONSE */

int	SRelResponse (sd, result, data, cc, si)
int	sd;
int	result,
	cc;
char   *data;
struct SSAPindication  *si;
{
    return SRelResponse (sd, result, data, cc, si);
}


/* define vectors for INDICATION events */

int	SSetIndications (sd, data, tokens, sync, activity, report, finish,
	abort, si)
int	sd;
IFP	data,
	tokens,
	sync,
	activity,
	report,
	finish,
	abort;
struct SSAPindication *si;
{
    return SSetIndications (sd, data, tokens, sync, activity, report, finish,
		abort, si);
}


/* map session descriptors for select() */

int 	SSelectMask (sd, mask, nfds, si)
int	sd;
fd_set *mask;
int    *nfds;
struct SSAPindication *si;
{
    return SSelectMask (sd, mask, nfds, si);
}


/* return SSAP error code in string form */

char    *SErrString (c)
int	c;
{
    return SErrString (c);
}
