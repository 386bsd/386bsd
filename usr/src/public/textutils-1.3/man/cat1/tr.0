


TR(1L)                                                     TR(1L)


NNAAMMEE
       tr - translate or delete characters

SSYYNNOOPPSSIISS
       ttrr   [-cst]  [--complement]  [--squeeze-repeats]  [--trun-
       cate-set1] string1 string2
       ttrr {-s,--squeeze-repeats} [-c] [--complement] string1
       ttrr {-d,--delete} [-c] string1
       ttrr {-d,--delete}  {-s,--squeeze-repeats}  [-c]  [--comple-
       ment] string1 string2

DDEESSCCRRIIPPTTIIOONN
       This  manual  page  documents  the  GNU version of ttrr..  ttrr
       copies the standard input to the standard output, perform-
       ing one of the following operations:

              o  translate, and optionally squeeze repeated char-
              acters in the result
              o squeeze repeated characters
              o delete characters
              o delete characters, then squeeze repeated  charac-
              ters from the result.

       The  _s_t_r_i_n_g_1  and  (if  given)  _s_t_r_i_n_g_2  arguments  define
       ordered sets of characters, referred to below as set1  and
       set2.   These sets are the characters of the input that ttrr
       operates on.  The --_c_o_m_p_l_e_m_e_n_t (-_c) option  replaces  set1
       with its complement (all of the characters that are not in
       set1).

   SSPPEECCIIFFYYIINNGG SSEETTSS OOFF CCHHAARRAACCTTEERRSS
       The format of the _s_t_r_i_n_g_1 and _s_t_r_i_n_g_2 arguments  resembles
       the  format  of regular expressions; however, they are not
       regular expressions, only lists of characters.  Most char-
       acters  simply  represent themselves in these strings, but
       the strings can contain the shorthands listed  below,  for
       convenience.   Some of them can be used only in _s_t_r_i_n_g_1 or
       _s_t_r_i_n_g_2, as noted below.

       Backslash excapes.  A backslash followed  by  a  character
       not listed below causes an error message.

       \a     Control-G.

       \b     Control-H.

       \f     Control-L.

       \n     Control-J.

       \r     Control-M.

       \t     Control-I.




                                                                1





TR(1L)                                                     TR(1L)


       \v     Control-K.

       \ooo   The character with the value given by _o_o_o, which is
              1 to 3 octal digits.

       \\     A backslash.

       Ranges.  The notation `_m-_n' expands to all of the  charac-
       ters  from _m through _n, in ascending order.  _m should col-
       late before _n; if it doesn't, an  error  results.   As  an
       example,  `0-9'  is  the same as `0123456789'.  Ranges can
       optionally be enclosed in square brackets,  which  has  no
       effect  but is supported for compatibility with historical
       System V versions of ttrr.

       Repeated characters.   The  notation  `[_c*_n]'  in  _s_t_r_i_n_g_2
       expands  to _n copies of character _c.  Thus, `[y*6]' is the
       same as `yyyyyy'.  The notation `[_c*]' in _s_t_r_i_n_g_2  expands
       to  as many copies of _c as are needed to make set2 as long
       as set1.  If _n begins with  a  0,  it  is  interpreted  in
       octal, otherwise in decimal.

       Character  classes.  The notation `[:_c_l_a_s_s-_n_a_m_e:]' expands
       to all of the characters in the (predefined)  class  named
       _c_l_a_s_s-_n_a_m_e.  The characters expand in no particular order,
       except for the `upper' and `lower' classes,  which  expand
       in   ascending   order.    When   the  --_d_e_l_e_t_e  (-_d)  and
       --_s_q_u_e_e_z_e-_r_e_p_e_a_t_s (-_s) options are both given, any charac-
       ter  class  can  be  used in _s_t_r_i_n_g_2.  Otherwise, only the
       character classes `lower'  and  `upper'  are  accepted  in
       _s_t_r_i_n_g_2,  and  then  only  if  the corresponding character
       class (`upper' and `lower', respectively) is specified  in
       the  same relative position in _s_t_r_i_n_g_1.  Doing this speci-
       fies case conversion.  The class names are given below; an
       error results when an invalid class name is given.

       alnum  Letters and digits.

       alpha  Letters.

       blank  Horizontal whitespace.

       cntrl  Control characters.

       digit  Digits.

       graph  Printable characters, not including space.

       lower  Lowercase letters.

       print  Printable characters, including space.

       punct  Punctuation characters.




                                                                2





TR(1L)                                                     TR(1L)


       space  Horizontal or vertical whitespace.

       upper  Uppercase letters.

       xdigit Hexadecimal digits.

       Equivalence classes.  The syntax `[=_c=]' expands to all of
       the characters that are equivalent to _c, in no  particular
       order.    Equivalence   classes  are  a  recent  invention
       intended to  support  non-English  alphabets.   But  there
       seems  to  be  no standard way to define them or determine
       their contents.  Therefore, they are not fully implemented
       in  GNU  ttrr;  each  character's equivalence class consists
       only of that character, which makes this  a  useless  con-
       struction currently.

   TTRRAANNSSLLAATTIINNGG
       ttrr  performs translation when _s_t_r_i_n_g_1 and _s_t_r_i_n_g_2 are both
       given and the --delete  (-_d)  option  is  not  given.   ttrr
       translates  each character of its input that is in set1 to
       the corresponding character in set2.   Characters  not  in
       set1  are  passed  through  unchanged.   When  a character
       appears more than once in set1 and the corresponding char-
       acters in set2 are not all the same, only the final one is
       used.  For example, these two commands are equivalent:
              tr aaa xyz
              tr a z

       A common use of ttrr is to convert lowercase  characters  to
       uppercase.  This can be done in many ways.  Here are three
       of them:
              tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
              tr a-z A-Z
              tr '[:lower:]' '[:upper:]'

       When ttrr is performing translation, set1  and  set2  should
       normally  have  the  same length.  If set1 is shorter than
       set2, the extra characters at the end of set2 are ignored.

       On  the  other  hand,  making set1 longer than set2 is not
       portable; POSIX.2 says that the result is  undefined.   In
       this situation, the BSD ttrr pads set2 to the length of set1
       by repeating the last character of set2 as many  times  as
       necessary.   The  System V ttrr truncates set1 to the length
       of set2.

       By default, GNU ttrr handles this case like the BSD ttrr does.
       When the --truncate-set1 (-_t) option is given, GNU ttrr han-
       dles this case like the System V ttrr instead.  This  option
       is ignored for operations other than translation.

       Acting  like the System V ttrr in this case breaks the rela-
       tively common BSD idiom:
              tr -cs A-Za-z0-9 '\012'



                                                                3





TR(1L)                                                     TR(1L)


       because it converts only zero bytes (the first element  in
       the   complement   of   set1),   rather   than   all  non-
       alphanumerics, to newlines.

   SSQQUUEEEEZZIINNGG RREEPPEEAATTSS AANNDD DDEELLEETTIINNGG
       When given just the --delete (-_d) option, ttrr  removes  any
       input characters that are in set1.

       When  given  just  the  --squeeze-repeats  (-_s) option, ttrr
       replaces each input sequence of a repeated character  that
       is in set1 with a single occurrence of that character.

       When  given  both  the  --delete and the --squeeze-repeats
       options, ttrr first performs any deletions using set1,  then
       squeezes repeats from any remaining characters using set2.

       The --squeeze-repeats option may also be used when  trans-
       lating,  in  which case ttrr first peforms translation, then
       squeezes repeats from any remaining characters using set2.

       Here  are some examples to illustrate various combinations
       of options:

       Remove all zero bytes:
              tr -d '\000'

       Put all words on lines by themselves.  This  converts  all
       non-alphanumeric  characters  to  newlines,  then squeezes
       each string of repeated newlines into a single newline:
              tr -cs '[a-zA-Z0-9]' '[\n*]'

       Convert each sequence of repeated  newlines  to  a  single
       newline:
              tr -s '\n'

   WWAARRNNIINNGG MMEESSSSAAGGEESS
       Setting the environment variable POSIXLY_CORRECT turns off
       several warning and error messages, for strict  compliance
       with  POSIX.2.  The messages normally occur in the follow-
       ing circumstances:

       1.    When   the   --_d_e_l_e_t_e   option    is    given    but
       --_s_q_u_e_e_z_e-_r_e_p_e_a_t_s  is not, and _s_t_r_i_n_g_2 is given, GNU ttrr by
       default prints a usage message and exits, because  _s_t_r_i_n_g_2
       would  not  be  used.   The  POSIX specification says that
       _s_t_r_i_n_g_2 must be ignored in this case.   Silently  ignoring
       arguments is a bad idea.

       2.  When an ambiguous octal escape is given.  For example,
       \400 is actually \40 followed by the digit 0, because  the
       value 400 octal does not fit into a single byte.

       Note that GNU ttrr does not provide complete BSD or System V
       compatibility.  For example, there is no option to disable



                                                                4





TR(1L)                                                     TR(1L)


       interpretation  of  the POSIX constructs [:alpha:], [=c=],
       and [c*10].  Also, GNU ttrr does not delete zero bytes auto-
       matically, unlike traditional UNIX versions, which provide
       no way to preserve zero bytes.

       The long-named options can be introduced with `+' as  well
       as  `--', for compatibility with previous releases.  Even-
       tually support for `+' will  be  removed,  because  it  is
       incompatible with the POSIX.2 standard.
















































                                                                5


