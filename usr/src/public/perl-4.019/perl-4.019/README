
			Perl Kit, Version 4.0

		Copyright (c) 1989,1990,1991, Larry Wall
			  All rights reserved.

    This program is free software; you can redistribute it and/or modify
    it under the terms of either:
    
	a) the GNU General Public License as published by the Free
	Software Foundation; either version 1, or (at your option) any
	later version, or

	b) the "Artistic License" which comes with this Kit.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See either
    the GNU General Public License or the Artistic License for more details.

    You should have received a copy of the Artistic License with this
    Kit, in the file named "Artistic".  If not, I'll be glad to provide one.

    You should also have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

    For those of you that choose to use the GNU General Public License,
    my interpretation of the GNU General Public License is that no Perl
    script falls under the terms of the GPL unless you explicitly put
    said script under the terms of the GPL yourself.  Furthermore, any
    object code linked with uperl.o does not automatically fall under the
    terms of the GPL, provided such object code only adds definitions
    of subroutines and variables, and does not otherwise impair the
    resulting interpreter from executing any standard Perl script.  I
    consider linking in C subroutines in this manner to be the moral
    equivalent of defining subroutines in the Perl language itself.  You
    may sell such an object file as proprietary provided that you provide
    or offer to provide the Perl source, as specified by the GNU General
    Public License.  (This is merely an alternate way of specifying input
    to the program.)  You may also sell a binary produced by the dumping of
    a running Perl script that belongs to you, provided that you provide or
    offer to provide the Perl source as specified by the GPL.  (The
    fact that a Perl interpreter and your code are in the same binary file
    is, in this case, a form of mere aggregation.)  This is my interpretation
    of the GPL.  If you still have concerns or difficulties understanding
    my intent, feel free to contact me.  Of course, the Artistic License
    spells all this out for your protection, so you may prefer to use that.

--------------------------------------------------------------------------

Perl is a language that combines some of the features of C, sed, awk and shell.
See the manual page for more hype.  There's also a Nutshell Handbook published
by O'Reilly & Assoc.  Their U.S. number is 1-800-338-6887 (dev-nuts) and
their international number is 1-707-829-0515.  E-mail to nuts@ora.com.

Perl will probably not run on machines with a small address space.

Please read all the directions below before you proceed any further, and
then follow them carefully.

After you have unpacked your kit, you should have all the files listed
in MANIFEST.

Installation

1)  Run Configure.  This will figure out various things about your system.
    Some things Configure will figure out for itself, other things it will
    ask you about.  It will then proceed to make config.h, config.sh, and
    Makefile.  If you're a hotshot, run Configure -d to take all the
    defaults and then edit config.sh to patch up any flaws.

    You might possibly have to trim # comments from the front of Configure
    if your sh doesn't handle them, but all other # comments will be taken
    care of.

    (If you don't have sh, you'll have to copy the sample file config.H to
    config.h and edit the config.h to reflect your system's peculiarities.)

2)  Glance through config.h to make sure system dependencies are correct.
    Most of them should have been taken care of by running the Configure script.

    If you have any additional changes to make to the C definitions, they
    can be done in cflags.SH.  For instance, to turn off the optimizer
    on eval.c, find the line in the switch structure for eval.c and
    put the command $optimize='-g' before the ;;.  You will probably
    want to change the entry for teval.c too.  To change the C flags
    for all the files, edit config.sh and change either $ccflags or $optimize.

3)  make depend

    This will look for all the includes and modify Makefile accordingly.
    Configure will offer to do this for you.

4)  make

    This will attempt to make perl in the current directory.

    If you can't compile successfully, try adding a -DCRIPPLED_CC flag.
    (Just because you get no errors doesn't mean it compiled right!)
    This simplifies some complicated expressions for compilers that
    get indigestion easily.  If that has no effect, try turning off
    optimization.  If you have missing routines, you probably need to
    add some library or other, or you need to undefine some feature that
    Configure thought was there but is defective or incomplete.

    Some compilers will not compile or optimize the larger files without
    some extra switches to use larger jump offsets or allocate larger
    internal tables.  You can customize the switches for each file in
    cflags.SH.  It's okay to insert rules for specific files into
    Makefile.SH, since a default rule only takes effect in the
    absence of a specific rule.

    Most of the following hints are now done automatically by Configure.

    The 3b2 needs to turn off -O.
    Compilers with limited switch tables may have to define -DSMALLSWITCHES
    Domain/OS 10.3 (at least) native C 6.7 may need -opt 2 for eval.c
    AIX/RT may need a -a switch and -DCRIPPLED_CC.
    AIX RS/6000 needs to use system malloc and avoid -O on eval.c and toke.c.
    AIX RS/6000 needs -D_NO_PROTO.
    SUNOS 4.0.[12] needs -DFPUTS_BOTCH.
    SUNOS 3.[45] should use the system malloc.
    SGI machines may need -Ddouble="long float" and -O1.
    Vax-based systems may need to hand assemble teval.s with a -J switch.
    Ultrix on MIPS machines may need -DLANGUAGE_C.
    Ultrix 4.0 on MIPS machines may need -Olimit 2900 or so.
    Ultrix 3.[01] on MIPS needs to undefine WAITPID--the system call is busted.
    MIPS machines need /bin before /bsd43/bin in PATH.
    MIPS machines may need to undef d_volatile.
    MIPS machines may need to turn off -O on cmd.c, perl.c and tperl.c.
    Some MIPS machines may need to undefine CASTNEGFLOAT.
    Xenix 386 needs -Sm11000 for yacc, and may need -UM_I86.
    SCO Xenix may need -m25000 for yacc.  See also README.xenix.
    Genix needs to use libc rather than libc_s, or #undef VARARGS.
    NCR Tower 32 (OS 2.01.01) may need -W2,-Sl,2000 and #undef MKDIR.
    A/UX may appears to work with -O -B/usr/lib/big/ optimizer flags.
    A/UX needs -lposix to find rewinddir.
    A/UX may need -ZP -DPOSIX, and -g if big cc is used.
    FPS machines may need -J and -DBADSWITCH.
    UTS may need one or more of -DCRIPPLED_CC, -K or -g, and undef LSTAT.
    dynix may need to undefine CASTNEGFLOAT (d_castneg='undef' in config.sh).
    Dnix (not dynix) may need to remove -O.
    IRIX 3.3 may need to undefine VFORK.
    HP/UX may need to pull cerror.o and syscall.o out of libc.a and link
	them in explicitly.
    If you get syntax errors on '(', try -DCRIPPLED_CC or -DBADSWITCH or both.
    Machines with half-implemented dbm routines will need to #undef ODBM & NDBM.
    If you have GDBM available and want it instead of NDBM, say -DHAS_GDBM.
    C's that don't try to restore registers on longjmp() may need -DJMPCLOBBER.
	(Try this if you get random glitches.)
    If you get duplicates upon linking for malloc et al, say -DHIDEMYMALLOC.
    Turn on support for 64-bit integers (long longs) with -DQUAD.

5)  make test

    This will run the regression tests on the perl you just made.
    If it doesn't say "All tests successful" then something went wrong.
    See the README in the t subdirectory.  Note that you can't run it
    in background if this disables opening of /dev/tty.  If "make test"
    bombs out, just cd to the t directory and run TEST by hand to see if
    it makes any difference.  If individual tests bomb, you can run
    them by hand, e.g., ./perl op/groups.t

6)  make install

    This will put perl into a public directory (such as /usr/local/bin).
    It will also try to put the man pages in a reasonable place.  It will not
    nroff the man page, however.  You may need to be root to do this.  If
    you are not root, you must own the directories in question and you should
    ignore any messages about chown not working.

7)  Read the manual entry before running perl.

8)  IMPORTANT!  Help save the world!  Communicate any problems and suggested
    patches to me, lwall@netlabs.com (Larry Wall), so we can
    keep the world in sync.  If you have a problem, there's someone else
    out there who either has had or will have the same problem.

    If possible, send in patches such that the patch program will apply them.
    Context diffs are the best, then normal diffs.  Don't send ed scripts--
    I've probably changed my copy since the version you have.  It's also
    helpful if you send the output of "uname -a".

    Watch for perl patches in comp.lang.perl.  Patches will generally be
    in a form usable by the patch program.  If you are just now bringing up
    perl and aren't sure how many patches there are, write to me and I'll
    send any you don't have.  Your current patch level is shown in patchlevel.h.


Just a personal note:  I want you to know that I create nice things like this
because it pleases the Author of my story.  If this bothers you, then your
notion of Authorship needs some revision.  But you can use perl anyway. :-)

							The author.
