// This may look like C code, but it is really -*- C++ -*-
/* 
Copyright (C) 1988 Free Software Foundation
    written by Doug Lea (dl@rocky.oswego.edu)
    based on code by Marc Shapiro (shapiro@sor.inria.fr)

This file is part of GNU CC.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY.  No author or distributor
accepts responsibility to anyone for the consequences of using it
or for whether it serves any particular purpose or works at all,
unless he says so in writing.  Refer to the GNU CC General Public
License for full details.

Everyone is granted permission to copy, modify and redistribute
GNU CC, but only under the conditions described in the
GNU CC General Public License.   A copy of this license is
supposed to have been given to you along with GNU CC so you
can know your rights and responsibilities.  It should be in a
file named COPYING.  Among other things, the copyright notice
and this notice must be preserved on all copies.  
*/

#ifndef _<T>FPlex_h
#ifdef __GNUG__
#pragma once
#pragma interface
#endif
#define _<T>FPlex_h 1

#include "<T>.Plex.h"

class <T>FPlex : public <T>Plex
{
public:
                   <T>FPlex();                 // set low = 0;
                                               // fence = 0;
                                               // csize = default

                   <T>FPlex(int maxsize);      // low = 0; 
                                               // fence = 0;
                                               // csize = maxsize

                   <T>FPlex(int lo,            // low = lo; 
                            int maxsize);      // fence=lo
                                               // csize = maxsize

                   <T>FPlex(int lo,            // low = lo
                            int hi,            // fence = hi+1
                            const <T&> initval,// fill with initval,
                            int maxsize = 0);  // csize = maxsize
                                               // or fence - lo if 0

                   <T>FPlex(const <T>FPlex&);   // X(X&)

                   ~<T>FPlex();

  void             operator= (const <T>FPlex&);

// virtuals

  <T>&             high_element ();
  <T>&             low_element ();

  const <T>&       high_element () const;
  const <T>&       low_element () const;

  Pix              first() const;
  Pix              last() const;
  void             prev(Pix& ptr) const;
  void             next(Pix& ptr) const;
  int              owns(Pix p) const;
  <T>&             operator () (Pix p);
  const <T>&       operator () (Pix p) const;

  int              low() const; 
  int              high() const;
  int              valid(int idx) const;
  void             prev(int& idx) const;
  void             next(int& x) const;
  <T>&             operator [] (int index);
  const <T>&       operator [] (int index) const;
    
  int              Pix_to_index(Pix p) const;
  Pix              index_to_Pix(int idx) const;    

  int              can_add_high() const;
  int              can_add_low() const;
  int              full() const;

  int              add_high(const <T&> elem);
  int              del_high ();
  int              add_low (const <T&> elem);
  int              del_low ();

  void             fill(const <T&> x);
  void             fill(const <T&> x, int from, int to);
  void             clear();
  void             reverse();
  void             append(const <T>FPlex& a); 
  void             prepend(const <T>FPlex& a);
    
  int              OK () const; 
};

#if defined(__OPTIMIZE__) || defined(USE_LIBGXX_INLINES)

inline  int <T>FPlex::valid (int idx) const
{
  return idx >= lo && idx < fnc;
}

inline int <T>FPlex::low() const
{
  return lo;
}

inline int <T>FPlex::high() const
{
  return fnc - 1;
}

inline Pix  <T>FPlex::first() const
{
  return (Pix)(hd-><T>IChunk::first_pointer());
}

inline void  <T>FPlex::prev(Pix&  p) const
{
  p = Pix(hd-><T>IChunk::pred((<T>*) p));
}

inline void  <T>FPlex::next(Pix&  p) const
{
  p =  Pix(hd-><T>IChunk::succ((<T>*) p));
}

inline Pix <T>FPlex::last() const
{
  return Pix(hd-><T>IChunk::last_pointer());
}

inline  int <T>FPlex::full () const
{
  return fnc - lo == csize;
}

inline void <T>FPlex::prev(int& idx) const
{
  --idx;
}

inline void <T>FPlex::next(int& idx) const
{
  ++idx;
}

inline <T>& <T>FPlex:: operator [] (int idx)
{
  if (idx < lo || idx >= fnc) index_error();
  return *(hd->pointer_to(idx));
}

inline <T>& <T>FPlex:: operator () (Pix p)
{
  return *((<T>*)p);
}

inline  <T>& <T>FPlex::low_element ()
{
  if (empty()) index_error();
  return *(hd->pointer_to(lo));
}

inline  <T>& <T>FPlex::high_element ()
{
  if (empty()) index_error();
  return *(hd->pointer_to(fnc - 1));
}

inline const <T>& <T>FPlex:: operator [] (int idx) const
{
  if (idx < lo || idx >= fnc) index_error();
  return *(hd->pointer_to(idx));
}

inline const <T>& <T>FPlex:: operator () (Pix p) const
{
  return *((const <T>*)p);
}

inline const <T>& <T>FPlex::low_element () const
{
  if (empty()) index_error();
  return *(hd->pointer_to(lo));
}

inline const  <T>& <T>FPlex::high_element () const
{
  if (empty()) index_error();
  return *(hd->pointer_to(fnc - 1));
}

inline int <T>FPlex::can_add_high() const
{
  return hd->can_grow_high();
}

inline int <T>FPlex::can_add_low() const
{
  return hd->can_grow_low();
}

inline int <T>FPlex::add_high(const <T&> elem)
{
  if (!can_add_high()) full_error();
  *((hd-><T>IChunk::grow_high())) = elem;
  return fnc++;
}

inline  int <T>FPlex::del_high ()
{
  if (empty()) empty_error();
  hd-><T>IChunk::shrink_high();
  return --fnc - 1;
}

inline  int <T>FPlex::add_low (const <T&> elem)
{
  if (!can_add_low()) full_error();
  *((hd-><T>IChunk::grow_low())) = elem;
  return --lo;
}

inline  int <T>FPlex::del_low ()
{
  if (empty()) empty_error();
  hd-><T>IChunk::shrink_low();
  return ++lo;
}

inline  int <T>FPlex::owns (Pix p) const
{
  return hd->actual_pointer((<T>*)p);
}

inline  int <T>FPlex::Pix_to_index(Pix p) const
{
  if (!hd->actual_pointer((const <T>*)p)) index_error();
  return hd->index_of((const <T>*)p);
}

inline  Pix <T>FPlex::index_to_Pix(int idx) const
{
  if (idx < lo || idx >= fnc) index_error();
  return Pix(hd->pointer_to(idx));
}

inline <T>FPlex::~<T>FPlex() {}

#endif
#endif
