// This may look like C code, but it is really -*- C++ -*-
/* 
Copyright (C) 1988 Free Software Foundation
    written by Doug Lea (dl@rocky.oswego.edu)

This file is part of GNU CC.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY.  No author or distributor
accepts responsibility to anyone for the consequences of using it
or for whether it serves any particular purpose or works at all,
unless he says so in writing.  Refer to the GNU CC General Public
License for full details.

Everyone is granted permission to copy, modify and redistribute
GNU CC, but only under the conditions described in the
GNU CC General Public License.   A copy of this license is
supposed to have been given to you along with GNU CC so you
can know your rights and responsibilities.  It should be in a
file named COPYING.  Among other things, the copyright notice
and this notice must be preserved on all copies.  
*/


#ifndef _<T>Vec_h
#ifdef __GNUG__
#pragma once
#pragma interface
#endif
#define _<T>Vec_h 1

#ifndef _<T>_typedefs
#define _<T>_typedefs 1
typedef void (*<T>Procedure)(<T&>);
typedef <T>  (*<T>Mapper)(<T&>);
typedef <T>  (*<T>Combiner)(<T&>, <T&>);
typedef int  (*<T>Predicate)(<T&>);
typedef int  (*<T>Comparator)(<T&>, <T&>);
#endif


class <T>Vec 
{
protected:      
  int                   len;
  <T>                   *s;                  

                        <T>Vec(int l, <T>* d);
public:
                        <T>Vec ();
                        <T>Vec (int l);
                        <T>Vec (int l, <T&> fill_value);
                        <T>Vec (<T>Vec&);
                        ~<T>Vec ();

  <T>Vec &              operator = (<T>Vec & a);
  <T>Vec                at(int from = 0, int n = -1);

  int                   capacity();
  void                  resize(int newlen);                        

  <T>&                  operator [] (int n);
  <T>&                  elem(int n);

  friend <T>Vec         concat(<T>Vec & a, <T>Vec & b);
  friend <T>Vec         map(<T>Mapper f, <T>Vec & a);
  friend <T>Vec         merge(<T>Vec & a, <T>Vec & b, <T>Comparator f);
  friend <T>Vec         combine(<T>Combiner f, <T>Vec & a, <T>Vec & b);
  friend <T>Vec         reverse(<T>Vec & a);

  void                  reverse();
  void                  sort(<T>Comparator f);
  void                  fill(<T&> val, int from = 0, int n = -1);

  void                  apply(<T>Procedure f);
  <T>                   reduce(<T>Combiner f, <T&> base);
  int                   index(<T&> targ);

  friend int            operator == (<T>Vec& a, <T>Vec& b);
  friend int            operator != (<T>Vec& a, <T>Vec& b);

  void                  error(const char* msg);
  void                  range_error();
};

extern void default_<T>Vec_error_handler(const char*);
extern one_arg_error_handler_t <T>Vec_error_handler;

extern one_arg_error_handler_t 
        set_<T>Vec_error_handler(one_arg_error_handler_t f);


#if defined(__OPTIMIZE__) || defined(USE_LIBGXX_INLINES)

inline <T>Vec::<T>Vec()
{
  len = 0; s = 0;
}

inline <T>Vec::<T>Vec(int l)
{
  s = new <T> [len = l];
}


inline <T>Vec::<T>Vec(int l, <T>* d) :len(l), s(d) {}


inline <T>Vec::~<T>Vec()
{
  delete[len] s;
}


inline <T>& <T>Vec::operator [] (int n)
{
  if ((unsigned)n >= len)
    range_error();
  return s[n];
}

inline <T>& <T>Vec::elem(int n)
{
  return s[n];
}


inline int <T>Vec::capacity()
{
  return len;
}



inline int operator != (<T>Vec& a, <T>Vec& b)
{
  return !(a == b);
}


#endif
#endif
