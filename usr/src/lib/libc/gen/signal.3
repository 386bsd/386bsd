.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)signal.3	6.7 (Berkeley) 7/31/91
.\"
.Dd July 31, 1991
.Dt SIGNAL 3
.Os BSD 4
.Sh NAME
.Nm signal
.Nd simplified software signal facilities
.Sh SYNOPSIS
.Fd #include <signal.h>
.Ft void
.Fn *signal sig func Ns Pq
.Ft void
.\" can not do this with .Fn yet
.br
\*(lp\|\*(fN*func\*(rp\*(lp\|\*(rp\fR
.Sh DESCRIPTION
This
.Fn signal
facility
is a simplified interface to the more general
.Xr sigaction 2
facility.
.Pp
Signals allow the manipulation of a process from outside its
domain as well as allowing the process to manipulate itself or
copies of itself (children). There are two general types of signals:
those that cause termination of a process and those that do not.
Signals which cause termination of a program might result from
an irrecoverable error or might be the result of a user at a terminal
typing the `interrupt' character.
Signals are used when a process is stopped because it wishes to access
its control terminal while in the background (see
.Xr tty 4 ) .
Signals are optionally generated
when a process resumes after being stopped,
when the status of child processes changes,
or when input is ready at the control terminal.
Most signals result in the termination of the process receiving them
if no action
is taken; some signals instead cause the process receiving them
to be stopped, or are simply discarded if the process has not
requested otherwise.
Except for the
.Dv SIGKILL
and
.Dv SIGSTOP
signals, the
.Fn signal
function allows for a signal to be caught, to be ignored, or to generate
an interupt.
These signals are defined in the file
.Aq Pa signal.h :
.Bl -column SIGVTALARMXX "create core imagexxx"
.It Sy "  Name  " "	  Default Action  " "	              Description"
.It Dv SIGHUP No "	terminate process" "	terminal line hangup"
.It Dv SIGINT No "	terminate process" "	interrupt program"
.It Dv SIGQUIT No "	create core image" "	quit program"
.It Dv SIGILL No "	create core image" "	illegal instruction"
.It Dv SIGTRAP No "	create core image" "	trace trap"
.It Dv SIGABRT No "	create core image" Xr 	abort 2
call (formerly
.Dv SIGIOT )
.It Dv SIGEMT No "	create core image" "	emulate instruction executed"
.It Dv SIGFPE No "	create core image" "	floating-point exception"
.It Dv SIGKILL No "	terminate process" "	kill program"
.It Dv SIGBUS No "	create core image" "	bus error"
.It Dv SIGSEGV No "	create core image" "	segmentation violation"
.It Dv SIGSYS No "	create core image" "	system call given invalid argument"
.It Dv SIGPIPE No "	terminate process" "	write on a pipe with no reader"
.It Dv SIGALRM No "	terminate process" "	real-time timer expired"
.It Dv SIGTERM No "	terminate process" "	software termination signal"
.It Dv SIGURG No "	discard signal" "	urgent condition present on socket"
.It Dv SIGSTOP No "	stop process" "	stop (cannot be caught or ignored)"
.It Dv SIGTSTP No "	stop process" "	stop signal generated from keyboard"
.It Dv SIGCONT No "	discard signal" "	continue after stop"
.It Dv SIGCHLD No "	discard signal" "	child status has changed"
.It Dv SIGTTIN No "	stop process" "	background read attempted from control terminal"
.It Dv SIGTTOU No "	stop process" "	background write attempted to control terminal"
.It Dv SIGIO No "	discard signal" Tn "	I/O"
is possible on a descriptor (see
.Xr fcntl 2 )
.It Dv SIGXCPU No "	terminate process" "	cpu time limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGXFSZ No "	terminate process" "	file size limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGVTALRM No "	terminate process" "	virtual time alarm (see"
.Xr setitimer 2 )
.It Dv SIGPROF No "	terminate process" "	profiling timer alarm (see"
.Xr setitimer 2 )
.It Dv SIGWINCH No "	discard signal" "	Window size change"
.It Dv SIGINFO No "	discard signal" "	status request from keyboard"
.It Dv SIGUSR1 No "	terminate process" "	User defined signal 1"
.It Dv SIGUSR2 No "	terminate process" "	User defined signal 2"
.El
.Pp
The
.Fa func
procedure allows a user to choose the action upon receipt of a signal.
To set the default action of the signal to occur as listed above,
.Fa func
should be
.Dv SIG_DFL .
A
.Dv SIG_DFL
resets the default action.
To ignore the signal
.Fa func
should be
.Dv SIG_IGN .
This will cause subsequent instances of the signal to be ignored
and pending instances to be discarded. If
.Dv SIG_IGN
is not used,
further occurrences of the signal are
automatically blocked and
.Fa func
is called.
.Pp
The handled signal is unblocked with the
function returns and
the process continues from where it left off when the signal occured.
.Bf -symbolic
Unlike previous signal facilities, the handler
func() remains installed after a signal has been delivered.
.Ef
.Pp
For some system calls, if a signal is caught while the call is
executing and the call is permaturely terminated,
the call is automatically restarted.
(The handler is installed using the
.Dv SA_RESTART
flag with
.Xr sigaction 2 . )
The affected system calls include
.Xr read 2 ,
.Xr write 2 ,
.Xr sendto 2 ,
.Xr recvfrom 2 ,
.Xr sendmsg 2
and
.Xr recvmsg 2
on a communications channel or a low speed device
and during a
.Xr ioctl 2
or
.Xr wait 2 .
However, calls that have already committed are not restarted,
but instead return a partial success (for example, a short read count).
.Pp
When a process which has installed signal handlers forks,
the child process inherits the signals.
All caught signals may be reset to their default action by a call
to the
.Xr execve 2
function;
ignored signals remain ignored.
.Sh RETURN VALUES
The previous action is returned on a successful call.
Otherwise, \-1 is returned and  the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
.Xr Signal
will fail and no action will take place if one of the
following occur:
.Bl -tag -width [EINVAL]
.It Bq Er EINVAL
.Em Sig
is not a valid signal number.
.It Bq Er EINVAL
An attempt is made to ignore or supply a handler for
.Dv SIGKILL
or
.Ev SIGSTOP .
.Sh SEE ALSO
.Xr kill 1 ,
.Xr ptrace 2 ,
.Xr kill 2 ,
.Xr sigaction 2 ,
.Xr sigprocmask 2 ,
.Xr sigsuspend 2 ,
.Xr sigstack 2 ,
.Xr setjmp 3 ,
.Xr tty 4
.Sh HISTORY
This
.Nm signal
facility appeared in 
.Bx 4.0 .
