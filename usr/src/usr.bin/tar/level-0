#!/bin/sh
#
# Run this script as root on the machine that has the tape drive, to make a
# full (level-0) dump.
#
# If you give `now' as an argument, the dump is done immediately.
# Otherwise, it waits until 1am, or until the hour given as argument.
# Specify the hour as a number from 0 to 23.
#
# You must edit the file `backup-specs' to set the parameters for your site.

# Useful for backup-specs, in case things have to be done slightly
# differently for different dump levels. 
DUMP_LEVEL=0

# Insure `mail' is in PATH. 
PATH="/usr/ucb:${PATH}"
export PATH

# This is not the most reliable test in the world.  The following might be
# more predictable:
#
# whoami="`whoami`"
# euid="`sed -ne '/^'\"${whoami}\"':/{s/^[^:]*:[^:]*://;s/:.*//p;q;}' /etc/passwd`"
# if [ "${euid}" != 0 ]; then ...
#
if [ ! -w / ]; then
   echo "The backup must be run as root or else some files will fail to be dumped."
   exit 1
fi

# Get the values of BACKUP_DIRS, BACKUP_FILES, and other variables.
. ./backup-specs

# Maybe sleep until around specified or default hour.
if [ "${1}" != "now" ]; then
   if [ "${1}x" != "x" ]; then
      spec="${1}"
   else
      spec="${BACKUP_HOUR}"
   fi

   pausetime="`date | awk '
     {
      hr = substr($4, 1, 2);
      mn = substr($4, 4, 2);
      if((hr + 0) < (spec + 0))
         print 3600 * (spec - hr) - 60 * mn;
      else
         print 3600 * (spec + (24 - hr)) - 60 * mn; 
     }' spec=\"${spec}\"`"

   clear
   echo "${SLEEP_MESSAGE}"
   sleep "${pausetime}"
fi

# start doing things

# Put startdate in the subject line of mailed report, since if it happens
# to run longer than 24 hours (as may be the case if someone forgets to put
# in the next volume of the tape in adequate time), the backup date won't
# appear too misleading. 
startdate="`date`"

here="`pwd`"

# Logfile name should be in the form  ``log-1993-03-18-level-0''
# i.e. year-month-date.  This format is useful for sorting by name, since
# logfiles are intentionally kept online for future reference.
LOGFILE="log-`date | sed -ne '
   s/[^ ]*  *\([^ ]*\)  *\([^ ]*\).* \([^ ]*\)$/\3-\1-\2/
   /-[0-9]$/s/\([0-9]\)$/0\1/
   /Jan/{s/Jan/01/p;q;}
   /Feb/{s/Feb/02/p;q;}
   /Mar/{s/Mar/03/p;q;}
   /Apr/{s/Apr/04/p;q;}
   /May/{s/May/05/p;q;}
   /Jun/{s/Jun/06/p;q;}
   /Jul/{s/Jul/07/p;q;}
   /Aug/{s/Aug/08/p;q;}
   /Sep/{s/Sep/09/p;q;}
   /Oct/{s/Oct/10/p;q;}
   /Nov/{s/Nov/11/p;q;}
   /Dec/{s/Dec/12/p;q;}'`-level-${DUMP_LEVEL}"

localhost="`hostname | sed -e 's/\..*//'`"

TAR_PART1="${TAR} -c --multi-volume --one-file-system --block-size=${BLOCKING} --sparse --volno-file=${VOLNO_FILE}"

# Only use --info-script if DUMP_REMIND_SCRIPT was defined in backup-specs
if [ "x${DUMP_REMIND_SCRIPT}" != "x" ]; then
   TAR_PART1="${TAR_PART1} --info-script='${DUMP_REMIND_SCRIPT}'"
fi

# Make sure the log file did not already exist.  Create it.

if [ -f "${LOGFILE}" ] ; then
   echo "Log file ${LOGFILE} already exists." 1>&2
   exit 1
else
   touch "${LOGFILE}"
fi

# Most everything below here is run in a subshell for which all output is
# piped through `tee' to the logfile.  Doing this, instead of having
# multiple pipelines all over the place, is cleaner and allows access to
# the exit value from various commands more easily. 
(
 # Caveat: Some version of `mt' require `-t', not `-f'. 
 mt -f "${TAPE_FILE}" rewind
 rm -f "${VOLNO_FILE}"

 set - ${BACKUP_DIRS}
 while [ $# -ne 0 ] ; do
    date="`date`"
    remotehost="`echo \"${1}\" | sed -e 's/:.*$//'`"
    fs="`echo \"${1}\" | sed -e 's/^.*://'`"
    fsname="`echo \"${1}\" | sed -e 's/\//:/g'`"

    # This filename must be absolute; it is opened on the machine that runs tar.
    TAR_PART2="--listed=/etc/tar-backup/temp.level-0"
    TAR_PART3="--label='Full backup of ${fs} on ${remotehost} at ${date}' -C ${fs} ."

    echo "Backing up ${1} at ${date}"

    # Actually back things up.

    if [ "z${localhost}" != "z${remotehost}" ] ; then
       rsh "${remotehost}" mkdir /etc/tar-backup > /dev/null 2>&1
       rsh "${remotehost}" rm -f /etc/tar-backup/temp.level-0
       rsh "${remotehost}" ${TAR_PART1} -f "${localhost}:${TAPE_FILE}" ${TAR_PART2} ${TAR_PART3}
    else
       mkdir /etc/tar-backup > /dev/null 2>&1
       rm -f /etc/tar-backup/temp.level-0
       # Using `sh -c exec' causes nested quoting and shell substitution
       # to be handled here in the same way rsh handles it.
       sh -c "exec ${TAR_PART1} -f \"${TAPE_FILE}\" ${TAR_PART2} ${TAR_PART3}"
    fi

    # `rsh' doesn't exit with the exit status of the remote command.  What
    # stupid lossage.  TODO: think of a reliable workaround. 
    if [ $? -ne 0 ] ; then
       echo "Backup of ${1} failed." 1>&2
       # I'm assuming that the tar will have written an empty
       # file to the tape, otherwise I should do a cat here.
    else
       if [ "z${localhost}" != "z${remotehost}" ] ; then
         rsh "${remotehost}" mv -f /etc/tar-backup/temp.level-0 "/etc/tar-backup/${fsname}.level-0"
       else
         mv -f /etc/tar-backup/temp.level-0 "/etc/tar-backup/${fsname}.level-0"
       fi
    fi
    ${TAPE_STATUS}
    sleep 60
    shift
 done

 # Dump any individual files requested.

 if [ "x${BACKUP_FILES}" != "x" ] ; then
    date="`date`"

    TAR_PART2="--listed=/etc/tar-backup/temp.level-0"
    TAR_PART3="--label='Full backup of miscellaneous files at ${date}'"

    mkdir /etc/tar-backup > /dev/null 2>&1
    rm -f /etc/tar-backup/temp.level-0

    echo "Backing up miscellaneous files at ${date}"

    # Using `sh -c exec' causes nested quoting and shell substitution
    # to be handled here in the same way rsh handles it.
    sh -c "exec ${TAR_PART1} -f \"${TAPE_FILE}\" ${TAR_PART2} ${TAR_PART3} ${BACKUP_FILES}"

    # `rsh' doesn't exit with the exit status of the remote command.  What
    # lossage.  TODO: think of a reliable workaround. 
    if [ $? -ne 0 ] ; then
      echo "Backup of miscellaneous files failed."
      # I'm assuming that the tar will have written an empty
      # file to the tape, otherwise I should do a cat here.
    else
      mv -f /etc/tar-backup/temp.level-0 /etc/tar-backup/misc.level-0
    fi
    ${TAPE_STATUS}
 else
    echo "No miscellaneous files specified"
 fi

 # Caveat: some versions of `mt' use `-t' instead of `-f'.
 mt -f "${TAPE_FILE}" rewind
 mt -f "${TAPE_FILE}" offl

) 2>&1 | tee -a "${LOGFILE}"

echo "Sending the dump log to ${ADMINISTRATOR}"
mail -s "Results of backup started ${startdate}" ${ADMINISTRATOR} < "${LOGFILE}"

# eof
