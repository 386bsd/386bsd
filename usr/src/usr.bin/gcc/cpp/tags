CHECK_DEPTH	cpp.c	/^#define CHECK_DEPTH(code) \\$/
HASHSTEP	cpp.c	/^#define HASHSTEP(old, c) ((old << 2) + c)$/
MAKE_POS	cpp.c	/^#define MAKE_POS(v) (v & ~0x80000000) \/* make num/
Mcexp	cexp.y	/^main ()$/
Mcpp	cpp.c	/^main (argc, argv)$/
SKIP_ALL_WHITE_SPACE	cpp.c	/^#define SKIP_ALL_WHITE_SPACE(p) do { while (is_spa/
SKIP_WHITE_SPACE	cpp.c	/^#define SKIP_WHITE_SPACE(p) do { while (is_hor_spa/
S_ISREG	cpp.c	/^#define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)$/
_obstack_allocated_p	../cc1/obstack.c	/^_obstack_allocated_p (h, obj)$/
_obstack_begin	../cc1/obstack.c	/^_obstack_begin (h, size, alignment, chunkfun, free/
_obstack_free	../cc1/obstack.c	/^_obstack_free (h, obj)$/
_obstack_newchunk	../cc1/obstack.c	/^_obstack_newchunk (h, length)$/
bcmp	cpp.c	/^bcmp (b1, b2, length)	\/* This could be a macro! */
bcopy	cpp.c	/^bcopy (b1, b2, length)$/
bzero	cpp.c	/^bzero (b, length)$/
check_expand	cpp.c	/^#define check_expand(OBUF, NEEDED)  \\$/
collect_expansion	cpp.c	/^collect_expansion (buf, end, nargs, arglist)$/
comp_def_part	cpp.c	/^comp_def_part (first, beg1, len1, beg2, len2, last/
compare_defs	cpp.c	/^compare_defs (d1, d2)$/
conditional_skip	cpp.c	/^conditional_skip (ip, skip, type)$/
delete_macro	cpp.c	/^delete_macro (hp)$/
deps_output	cpp.c	/^deps_output (string, size)$/
discard_comments	cpp.c	/^discard_comments (start, length, newlines)$/
do_define	cpp.c	/^do_define (buf, limit, op, keyword)$/
do_elif	cpp.c	/^do_elif (buf, limit, op, keyword)$/
do_else	cpp.c	/^do_else (buf, limit, op, keyword)$/
do_endif	cpp.c	/^do_endif (buf, limit, op, keyword)$/
do_error	cpp.c	/^do_error (buf, limit, op, keyword)$/
do_if	cpp.c	/^do_if (buf, limit, op, keyword)$/
do_include	cpp.c	/^do_include (buf, limit, op, keyword)$/
do_line	cpp.c	/^do_line (buf, limit, op, keyword)$/
do_once	cpp.c	/^do_once ()$/
do_pragma	cpp.c	/^do_pragma (buf, limit)$/
do_sccs	cpp.c	/^do_sccs ()$/
do_undef	cpp.c	/^do_undef (buf, limit, op, keyword)$/
do_xifdef	cpp.c	/^do_xifdef (buf, limit, op, keyword)$/
dump_all_macros	cpp.c	/^dump_all_macros ()$/
dump_arg_n	cpp.c	/^dump_arg_n (defn, argnum)$/
dump_defn_1	cpp.c	/^dump_defn_1 (base, start, length)$/
error	cpp.c	/^error (msg, arg1, arg2, arg3)$/
error_from_errno	cpp.c	/^error_from_errno (name)$/
error_with_line	cpp.c	/^error_with_line (line, msg, arg1, arg2, arg3)$/
eval_if_expression	cpp.c	/^eval_if_expression (buf, length)$/
exp	cexp.y	/^exp	:	'-' exp    %prec UNARY$/
exp1	cexp.y	/^exp1	:	exp$/
expand_to_temp_buffer	cpp.c	/^expand_to_temp_buffer (buf, limit, output_marks)$/
fancy_abort	cpp.c	/^fancy_abort ()$/
fatal	cpp.c	/^fatal (str, arg)$/
file_size_and_mode	cpp.c	/^file_size_and_mode (fd, mode_pointer, size_pointer/
finclude	cpp.c	/^finclude (f, fname, op)$/
grow_outbuf	cpp.c	/^grow_outbuf (obuf, needed)$/
hack_vms_include_specification	cpp.c	/^hack_vms_include_specification (fname)$/
handle_directive	cpp.c	/^handle_directive (ip, op)$/
hashf	cpp.c	/^hashf (name, len, hashsize)$/
initialize_builtins	cpp.c	/^initialize_builtins ()$/
initialize_char_syntax	cpp.c	/^initialize_char_syntax ()$/
initialize_random_junk	cexp.y	/^initialize_random_junk ()$/
install	cpp.c	/^install (name, len, type, value, hash)$/
line_for_error	cpp.c	/^line_for_error (line)$/
lookup	cpp.c	/^lookup (name, len, hash)$/
macarg	cpp.c	/^macarg (argptr)$/
macarg1	cpp.c	/^macarg1 (start, limit, depthptr, newlines, comment/
macroexpand	cpp.c	/^macroexpand (hp, op)$/
make_definition	cpp.c	/^make_definition (str)$/
make_undef	cpp.c	/^make_undef (str)$/
max	cpp.c	/^#define max(a,b) ((a) > (b) ? (a) : (b))$/
memory_full	cpp.c	/^memory_full ()$/
name_newline_fix	cpp.c	/^name_newline_fix (bp)$/
newline_fix	cpp.c	/^newline_fix (bp)$/
output_line_command	cpp.c	/^output_line_command (ip, op, conditional, file_cha/
parse_c_expression	cexp.y	/^parse_c_expression (string)$/
parse_escape	cexp.y	/^parse_escape (string_ptr)$/
parse_number	cexp.y	/^parse_number (olen)$/
perror_with_name	cpp.c	/^perror_with_name (name)$/
pfatal_with_name	cpp.c	/^pfatal_with_name (name)$/
pipe_closed	cpp.c	/^pipe_closed ()$/
read	cpp.c	/^#define read(fd,buf,size)	VAX11_C_read(fd,buf,size/
rescan	cpp.c	/^rescan (op, output_marks)$/
savestring	cpp.c	/^savestring (input)$/
skip_if_group	cpp.c	/^skip_if_group (ip, any)$/
skip_quoted_string	cpp.c	/^skip_quoted_string (bp, limit, start_line, count_n/
skip_to_end_of_comment	cpp.c	/^skip_to_end_of_comment (ip, line_counter)$/
special_symbol	cpp.c	/^special_symbol (hp, op)$/
start	cexp.y	/^start   :	exp1$/
trigraph_pcp	cpp.c	/^trigraph_pcp (buf)$/
validate_else	cpp.c	/^validate_else (p)$/
warning	cpp.c	/^warning (msg, arg1, arg2, arg3)$/
write	cpp.c	/^#define write(fd,buf,size)	VAX11_C_write(fd,buf,si/
xcalloc	cpp.c	/^xcalloc (number, size)$/
xmalloc	cpp.c	/^xmalloc (size)$/
xrealloc	cpp.c	/^xrealloc (old, size)$/
yyerror	cexp.y	/^yyerror (s)$/
yylex	cexp.y	/^yylex ()$/
yyparse	cexp.y	/^%%$/
