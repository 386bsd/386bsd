.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xW Athena X Widgets \- C Language X Toolkit Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft 1
.\".ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de FD
.LP
.KS
.TA .5i 3i
.ta .5i 3i
.nf
..
.de FN
.fi
.KE
.LP
..
.de IN		\" send an index entry to the stderr
..
.de C{
.KS
.nf
.D
.\"
.\"	choose appropriate monospace font
.\"	the imagen conditional, 480,
.\"	may be changed to L if LB is too
.\"	heavy for your eyes...
.\"
.ie "\\*(.T"480" .ft L
.el .ie "\\*(.T"300" .ft L
.el .ie "\\*(.T"202" .ft PO
.el .ie "\\*(.T"aps" .ft CW
.el .ft R
.ps \\n(PS
.ie \\n(VS>40 .vs \\n(VSu
.el .vs \\n(VSp
..
.de C}
.DE
.R
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de NT
.ne 7
.ds NO Note
.if \\n(.$>$1 .if !'\\$2'C' .ds NO \\$2
.if \\n(.$ .if !'\\$1'C' .ds NO \\$1
.ie n .sp
.el .sp 10p
.TB
.ce
\\*(NO
.ie n .sp
.el .sp 5p
.if '\\$1'C' .ce 99
.if '\\$2'C' .ce 99
.in +5n
.ll -5n
.R
..
.		\" Note End -- doug kraft 3/85
.de NE
.ce 0
.in -5n
.ll +5n
.ie n .sp
.el .sp 10p
..
.ny0
.TH XSetInputFocus 3X11 "Release 5" "X Version 11" "XLIB FUNCTIONS"
.SH NAME
XSetInputFocus, XGetInputFocus \- control input focus
.SH SYNTAX
.\" $Header: XSetInFocus.f,v 1.1 88/02/26 10:03:18 mento Exp $
XSetInputFocus\^(\^\fIdisplay\fP, \fIfocus\fP\^, \fIrevert_to\fP\^, \fItime\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      Window \fIfocus\fP\^;
.br
      int \fIrevert_to\fP\^; 
.br
      Time \fItime\fP\^; 
.LP
.\" $Header: XGetInFocus.f,v 1.1 88/02/26 10:00:48 mento Exp $
XGetInputFocus\^(\^\fIdisplay\fP, \fIfocus_return\fP\^, \fIrevert_to_return\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      Window *\fIfocus_return\fP\^;
.br
      int *\fIrevert_to_return\fP\^;
.SH ARGUMENTS
.\" $Header: display.a,v 1.1 88/02/26 10:26:29 mento Exp $
.IP \fIdisplay\fP 1i
Specifies the connection to the X server.
.IP \fIfocus\fP 1i
Specifies the window,
.ZN PointerRoot ,
or
.ZN None .
.\" $Header: focus.a,v 1.2 88/05/14 08:56:12 mento Exp $
.IP \fIfocus_return\fP 1i
Returns the focus window,
.ZN PointerRoot ,
or 
.ZN None .
.\" $Header: revertto.a,v 1.4 88/08/19 20:33:14 mento Exp $
.IP \fIrevert_to\fP 1i
Specifies where the input focus reverts to if the window becomes not
viewable.
You can pass 
.ZN RevertToParent , 
.ZN RevertToPointerRoot , 
or 
.ZN RevertToNone .
.\" $Header: reverttoret.a,v 1.3 88/05/14 08:57:31 mento Exp $
.IP \fIrevert_to_return\fP 1i
Returns the current focus state
.Pn ( RevertToParent , 
.ZN RevertToPointerRoot , 
or 
.ZN RevertToNone ).
.IP \fItime\fP 1i
Specifies the time.
You can pass either a timestamp or
.ZN CurrentTime .
.SH DESCRIPTION
.\" $Header: XSetInFocus.d,v 1.2 88/06/11 07:53:17 mento Exp $
The
.ZN XSetInputFocus
function changes the input focus and the last-focus-change time.
It has no effect if the specified time is earlier than the current
last-focus-change time or is later than the current X server time.
Otherwise, the last-focus-change time is set to the specified time
.Pn ( CurrentTime 
is replaced by the current X server time).
.ZN XSetInputFocus
causes the X server to generate
.ZN FocusIn 
and 
.ZN FocusOut 
events.
.LP
Depending on the focus argument,
the following occurs: 
.IP \(bu 5
If focus is
.ZN None ,
all keyboard events are discarded until a new focus window is set,
and the revert_to argument is ignored.
.IP \(bu 5
If focus is a window, 
it becomes the keyboard's focus window.
If a generated keyboard event would normally be reported to this window
or one of its inferiors, the event is reported as usual. 
Otherwise, the event is reported relative to the focus window.
.IP \(bu 5
If focus is
.ZN PointerRoot ,
the focus window is dynamically taken to be the root window of whatever screen 
the pointer is on at each keyboard event.  
In this case, the revert_to argument is ignored.
.LP
The specified focus window must be viewable at the time 
.ZN XSetInputFocus
is called,
or a
.ZN BadMatch
error results.
If the focus window later becomes not viewable, 
the X server
evaluates the revert_to argument to determine the new focus window as follows: 
.IP \(bu 5
If revert_to is
.ZN RevertToParent ,
the focus reverts to the parent (or the closest viewable ancestor), 
and the new revert_to value is taken to be
.ZN RevertToNone .  
.IP \(bu 5
If revert_to is
.ZN RevertToPointerRoot 
or 
.ZN RevertToNone ,
the focus reverts to
.ZN PointerRoot
or
.ZN None ,
respectively.
When the focus reverts,
the X server generates
.ZN FocusIn
and
.ZN FocusOut
events, but the last-focus-change time is not affected.
.LP
.ZN XSetInputFocus
can generate
.ZN BadMatch ,
.ZN BadValue ,
and
.ZN BadWindow 
errors.
.LP
.\" $Header: XGetInFocus.d,v 1.2 88/05/14 08:58:23 mento Exp $
The
.ZN XGetInputFocus
function returns the focus window and the current focus state.
.SH DIAGNOSTICS
.\" $Header: badvalue.e,v 1.1 87/09/04 08:23:19 mento Exp $
.TP 1i
.ZN BadValue
Some numeric value falls outside the range of values accepted by the request.
Unless a specific range is specified for an argument, the full range defined
by the argument's type is accepted.  Any argument defined as a set of
alternatives can generate this error.
.\" $Header: badwindow.e,v 1.1 87/09/04 08:23:20 mento Exp $
.TP 1i
.ZN BadWindow
A value for a Window argument does not name a defined Window.
.SH "SEE ALSO"
XWarpPointer(3X11)
.br
\fI\*(xL\fP
