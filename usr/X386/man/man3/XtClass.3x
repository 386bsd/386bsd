.ds tk X Toolkit
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xI Intrinsics
.ds xW X Toolkit Athena Widgets \- C Language Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.ds Rn 3
.ds Vn 2.2
.hw XtMake-Geometry-Request XtQuery-Geometry wid-get
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft 1
.ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de FD
.LP
.KS
.TA .5i 3i
.ta .5i 3i
.nf
..
.de FN
.fi
.KE
.LP
..
.de IN		\" send an index entry to the stderr
..
.de C{
.KS
.nf
.D
.\"
.\"	choose appropriate monospace font
.\"	the imagen conditional, 480,
.\"	may be changed to L if LB is too
.\"	heavy for your eyes...
.\"
.ie "\\*(.T"480" .ft L
.el .ie "\\*(.T"300" .ft L
.el .ie "\\*(.T"202" .ft PO
.el .ie "\\*(.T"aps" .ft CW
.el .ft R
.ps \\n(PS
.ie \\n(VS>40 .vs \\n(VSu
.el .vs \\n(VSp
..
.de C}
.DE
.R
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de NT
.ne 7
.ds NO Note
.if \\n(.$>$1 .if !'\\$2'C' .ds NO \\$2
.if \\n(.$ .if !'\\$1'C' .ds NO \\$1
.ie n .sp
.el .sp 10p
.TB
.ce
\\*(NO
.ie n .sp
.el .sp 5p
.if '\\$1'C' .ce 99
.if '\\$2'C' .ce 99
.in +5n
.ll -5n
.R
..
.		\" Note End -- doug kraft 3/85
.de NE
.ce 0
.in -5n
.ll +5n
.ie n .sp
.el .sp 10p
..
.ny0
.TH XtClass 3Xt "Release 3" "X Version 11" "XT FUNCTIONS"
.SH NAME
XtClass, XtSuperClass, XtIsSubclass, XtCheckSubclass, XtIsComposite, XtIsManaged \- obtain and verify a widget's class
.SH SYNTAX
WidgetClass XtClass(\fIw\fP)
.br
      Widget \fIw\fP;
.LP
WidgetClass XtSuperclass(\fIw\fP)
.br
      Widget \fIw\fP;
.LP
Boolean XtIsSubclass(\fIw\fP, \fIwidget_class\fP)
.br
      Widget \fIw\fP;
.br
      WidgetClass \fIwidget_class\fP;
.LP
void XtCheckSubclass(\fIw\fP, \fIwidget_class\fP, \fImessage\fP)
.br
      Widget \fIw\fP;
.br
      WidgetClass \fIwidget_class\fP;
.br
      String \fImessage\fP;
.LP
Boolean XtIsComposite(\fIw\fP)
.br
      Widget \fIw\fP;
.LP
Boolean XtIsManaged(\fIw\fP)
.br
       Widget \fIw\fP\^;
.SH ARGUMENTS
.IP \fIw\fP 1i
Specifies the widget.
.IP \fIwidget_class\fP 1i
Specifies the widget class\*(Wc.
.ds Me used
.IP \fImessage\fP 1i
Specifies the message that is to be \*(Me.
.SH DESCRIPTION
The
.ZN XtClass
function returns a pointer to the widget's class structure.
.LP
The
.ZN XtSuperclass
function returns a pointer to the widget's superclass class structure.
.LP
The
.ZN XtIsSubclass
function returns 
.ZN True 
if the class of the specified widget is equal to
or is a subclass of the specified widget class.
The specified widget can be any number of subclasses down the chain
and need not be an immediate subclass of the specified widget class.
Composite widgets that need to restrict the class of the items they
contain can use
.ZN XtIsSubclass
to find out if a widget belongs to the desired class of objects.
.LP
The
.ZN XtCheckSubclass
macro determines if the class of the specified widget is equal to
or is a subclass of the specified widget class.
The widget can be any number of subclasses down the chain
and need not be an immediate subclass of the specified widget class.
If the specified widget is not a subclass,
.ZN XtCheckSubclass
constructs an error message from the supplied message,
the widget's actual class, and the expected class and calls
.ZN XtErrorMsg .
.ZN XtCheckSubclass
should be used at the entry point of exported routines to ensure 
that the client has passed in a valid widget class for the exported operation.
.LP
.ZN XtCheckSubclass
is only executed when the widget has been compiled with the compiler symbol
DEBUG defined; otherwise, it is defined as the empty string 
and generates no code.
.LP
The
.ZN XtIsComposite
function is a convenience function that is equivalent to
.ZN XtIsSubclass 
with
.ZN compositeWidgetClass 
specified.
.LP
The
.ZN XtIsManaged
macro (for widget programmers) or function (for application programmers)
returns
.ZN True
if the specified child widget is managed or
.ZN False
if it is not.
.SH "SEE ALSO"
XtAppErrorMsg(3Xt),
XtDisplay(3Xt)
.br
\fI\*(xT\fP
.br
\fI\*(xL\fP
