.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xW Athena X Widgets \- C Language X Toolkit Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft 1
.\".ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de FD
.LP
.KS
.TA .5i 3i
.ta .5i 3i
.nf
..
.de FN
.fi
.KE
.LP
..
.de IN		\" send an index entry to the stderr
..
.de C{
.KS
.nf
.D
.\"
.\"	choose appropriate monospace font
.\"	the imagen conditional, 480,
.\"	may be changed to L if LB is too
.\"	heavy for your eyes...
.\"
.ie "\\*(.T"480" .ft L
.el .ie "\\*(.T"300" .ft L
.el .ie "\\*(.T"202" .ft PO
.el .ie "\\*(.T"aps" .ft CW
.el .ft R
.ps \\n(PS
.ie \\n(VS>40 .vs \\n(VSu
.el .vs \\n(VSp
..
.de C}
.DE
.R
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de NT
.ne 7
.ds NO Note
.if \\n(.$>$1 .if !'\\$2'C' .ds NO \\$2
.if \\n(.$ .if !'\\$1'C' .ds NO \\$1
.ie n .sp
.el .sp 10p
.TB
.ce
\\*(NO
.ie n .sp
.el .sp 5p
.if '\\$1'C' .ce 99
.if '\\$2'C' .ce 99
.in +5n
.ll -5n
.R
..
.		\" Note End -- doug kraft 3/85
.de NE
.ce 0
.in -5n
.ll +5n
.ie n .sp
.el .sp 10p
..
.ny0
.TH XDrawLine 3X11 "Release 5" "X Version 11" "XLIB FUNCTIONS"
.SH NAME
XDrawLine, XDrawLines, XDrawSegments, XSegment \- draw lines, polygons, and line structure
.SH SYNTAX
.\" $Header: XLine.f,v 1.1 88/02/26 09:58:43 mento Exp $
XDrawLine\^(\^\fIdisplay\fP, \fId\fP\^, \fIgc\fP\^, \fIx1\fP\^, \fIy1\fP\^, \fIx2\fP\^, \fIy2\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      Drawable \fId\fP\^;
.br
      GC \fIgc\fP\^;
.br
      int \fIx1\fP\^, \fIy1\fP\^, \fIx2\fP\^, \fIy2\fP\^;
.LP
.\" $Header: XLines.f,v 1.1 88/02/26 10:01:21 mento Exp $
XDrawLines\^(\^\fIdisplay\fP, \fId\fP\^, \fIgc\fP\^, \fIpoints\fP\^, \fInpoints\fP\^, \fImode\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      Drawable \fId\fP\^;
.br
      GC \fIgc\fP\^;
.br
      XPoint *\fIpoints\fP\^;
.br
      int \fInpoints\fP\^;
.br
      int \fImode\fP\^; 
.LP
.\" $Header: XSegments.f,v 1.1 88/02/26 10:02:52 mento Exp $
XDrawSegments\^(\^\fIdisplay\fP, \fId\fP\^, \fIgc\fP\^, \fIsegments\fP\^, \fInsegments\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      Drawable \fId\fP\^;
.br
      GC \fIgc\fP\^;
.br
      XSegment *\fIsegments\fP\^;
.br
      int \fInsegments\fP\^;
.SH ARGUMENTS
.\" $Header: d.a,v 1.1 88/02/26 10:04:25 mento Exp $
.IP \fId\fP 1i
Specifies the drawable. 
.\" $Header: display.a,v 1.1 88/02/26 10:26:29 mento Exp $
.IP \fIdisplay\fP 1i
Specifies the connection to the X server.
.\" $Header: gc.a,v 1.2 88/05/09 11:20:34 mento Exp $
.IP \fIgc\fP 1i
Specifies the GC.
.\" $Header: mode.a,v 1.4 88/05/18 07:53:37 mento Exp $
.IP \fImode\fP 1i
Specifies the coordinate mode. 
You can pass
.ZN CoordModeOrigin
or
.ZN CoordModePrevious .
.\" $Header: npoints.a,v 1.1 88/02/26 10:29:46 mento Exp $
.IP \fInpoints\fP 1i
Specifies the number of points in the array.
.\" $Header: nsegments.a,v 1.1 88/02/26 10:29:48 mento Exp $
.IP \fInsegments\fP 1i
Specifies the number of segments in the array.
.\" $Header: points.a,v 1.1 88/02/26 10:30:33 mento Exp $
.IP \fIpoints\fP 1i
Specifies an array of points.
.\" $Header: segments.a,v 1.1 88/02/26 10:31:10 mento Exp $
.IP \fIsegments\fP 1i
Specifies an array of segments.
.\" $Header: x1y1x2y2.a,v 1.3 88/05/13 08:17:23 mento Exp $
.IP \fIx1\fP 1i
.br
.ns
.IP \fIy1\fP 1i
.br
.ns
.IP \fIx2\fP 1i
.br
.ns
.IP \fIy2\fP 1i
Specify the points (x1, y1) and (x2, y2) to be connected.
.SH DESCRIPTION
The
.ZN XDrawLine
function uses the components of the specified GC to
draw a line between the specified set of points (x1, y1) and (x2, y2).
It does not perform joining at coincident endpoints.
For any given line, 
.ZN XDrawLine 
does not draw a pixel more than once.
If lines intersect, the intersecting pixels are drawn multiple times.  
.LP
The
.ZN XDrawLines
function uses the components of the specified GC to draw 
npoints\-1 lines between each pair of points (point[i], point[i+1]) 
in the array of
.ZN XPoint
structures.
It draws the lines in the order listed in the array.
The lines join correctly at all intermediate points, and if the first and last
points coincide, the first and last lines also join correctly.
For any given line, 
.ZN XDrawLines
does not draw a pixel more than once.
If thin (zero line-width) lines intersect, 
the intersecting pixels are drawn multiple times.
If wide lines intersect, the intersecting pixels are drawn only once, as though
the entire 
.ZN PolyLine 
protocol request were a single, filled shape.
.ZN CoordModeOrigin
treats all coordinates as relative to the origin,
and
.ZN CoordModePrevious
treats all coordinates after the first as relative to the previous point.
.LP
The
.ZN XDrawSegments 
function draws multiple, unconnected lines. 
For each segment, 
.ZN XDrawSegments 
draws a
line between (x1, y1) and (x2, y2).
It draws the lines in the order listed in the array of
.ZN XSegment
structures and does not perform joining at coincident endpoints.
For any given line, 
.ZN XDrawSegments
does not draw a pixel more than once.  
If lines intersect, the intersecting pixels are drawn multiple times.  
.LP
All three functions use these GC components:
function, plane-mask, line-width,
line-style, cap-style, fill-style, subwindow-mode,
clip-x-origin, clip-y-origin, and clip-mask.
The
.ZN XDrawLines
function also uses the join-style GC component.
All three functions also use these GC mode-dependent components:
foreground, background, tile, stipple, tile-stipple-x-origin, 
tile-stipple-y-origin, dash-offset, and dash-list.
.LP
.ZN XDrawLine ,
.ZN XDrawLines ,
and
.ZN XDrawSegments
can generate
.ZN BadDrawable ,
.ZN BadGC ,
and
.ZN BadMatch 
errors.
.ZN XDrawLines
can also generate a
.ZN BadValue 
error.
.SH STRUCTURES
The
.ZN XSegment
structure contains:
.LP
.Ds 0
.TA .5i
.ta .5i
typedef struct {
	short x1, y1, x2, y2;
} XSegment;
.De
.LP
All x and y members are signed integers.
The width and height members are 16-bit unsigned integers.
You should be careful not to generate coordinates and sizes
out of the 16-bit ranges, because the protocol only has 16-bit fields
for these values.
.SH DIAGNOSTICS
.\" $Header: baddrawable.e,v 1.1 87/09/04 08:22:59 mento Exp $
.TP 1i
.ZN BadDrawable
A value for a Drawable argument does not name a defined Window or Pixmap.
.\" $Header: badgc.e,v 1.1 87/09/04 08:23:02 mento Locked $
.TP 1i
.ZN BadGC
A value for a GContext argument does not name a defined GContext.
.\" $Header: badmatch1.e,v 1.3 87/09/09 18:18:54 mento Exp $
.TP 1i
.ZN BadMatch
An
.ZN InputOnly
window is used as a Drawable.
.\" $Header: badmatch2.e,v 1.3 87/09/11 11:53:42 mento Exp $
.TP 1i
.ZN BadMatch
Some argument or pair of arguments has the correct type and range but fails
to match in some other way required by the request.
.\" $Header: badvalue.e,v 1.1 87/09/04 08:23:19 mento Exp $
.TP 1i
.ZN BadValue
Some numeric value falls outside the range of values accepted by the request.
Unless a specific range is specified for an argument, the full range defined
by the argument's type is accepted.  Any argument defined as a set of
alternatives can generate this error.
.SH "SEE ALSO"
XDrawArc(3X11),
XDrawPoint(3X11),
XDrawRectangle(3X11)
.br
\fI\*(xL\fP
