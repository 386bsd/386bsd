'\" t
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xW Athena X Widgets \- C Language X Toolkit Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft 1
.\".ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de FD
.LP
.KS
.TA .5i 3i
.ta .5i 3i
.nf
..
.de FN
.fi
.KE
.LP
..
.de IN		\" send an index entry to the stderr
..
.de C{
.KS
.nf
.D
.\"
.\"	choose appropriate monospace font
.\"	the imagen conditional, 480,
.\"	may be changed to L if LB is too
.\"	heavy for your eyes...
.\"
.ie "\\*(.T"480" .ft L
.el .ie "\\*(.T"300" .ft L
.el .ie "\\*(.T"202" .ft PO
.el .ie "\\*(.T"aps" .ft CW
.el .ft R
.ps \\n(PS
.ie \\n(VS>40 .vs \\n(VSu
.el .vs \\n(VSp
..
.de C}
.DE
.R
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de NT
.ne 7
.ds NO Note
.if \\n(.$>$1 .if !'\\$2'C' .ds NO \\$2
.if \\n(.$ .if !'\\$1'C' .ds NO \\$1
.ie n .sp
.el .sp 10p
.TB
.ce
\\*(NO
.ie n .sp
.el .sp 5p
.if '\\$1'C' .ce 99
.if '\\$2'C' .ce 99
.in +5n
.ll -5n
.R
..
.		\" Note End -- doug kraft 3/85
.de NE
.ce 0
.in -5n
.ll +5n
.ie n .sp
.el .sp 10p
..
.ny0
'\" t
.TH XAllocSizeHints 3X11 "Release 5" "X Version 11" "XLIB FUNCTIONS"
.SH NAME
XAllocSizeHints, XSetWMNormalHints, XGetWMNormalHints, XSetWMSizeHints, XGetWMSizeHints, XSizeHints \- allocate size hints structure and set or read a window's WM_NORMAL_HINTS property
.SH SYNTAX
XSizeHints *XAllocSizeHints\^(\|)
.LP
void XSetWMNormalHints\^(\^\fIdisplay\fP, \fIw\fP, \fIhints\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      Window \fIw\fP\^;
.br
      XSizeHints *\fIhints\fP\^;
.LP
Status XGetWMNormalHints\^(\^\fIdisplay\fP, \fIw\fP, \fIhints_return\fP, \
\fIsupplied_return\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      Window \fIw\fP\^;
.br
      XSizeHints *\fIhints_return\fP\^;
.br
      long *\fIsupplied_return\fP\^;
.LP
void XSetWMSizeHints\^(\^\fIdisplay\fP, \fIw\fP, \fIhints\fP, \fIproperty\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      Window \fIw\fP\^;
.br
      XSizeHints *\fIhints\fP\^;
.br
      Atom \fIproperty\fP\^;
.LP
Status XGetWMSizeHints\^(\^\fIdisplay\fP, \fIw\fP, \fIhints_return\fP, \
\fIsupplied_return\fP, \fIproperty\fP\^)
.br
      Display *\fIdisplay\fP\^;
.br
      Window \fIw\fP\^;
.br
      XSizeHints *\fIhints_return\fP\^;
.br
      long *\fIsupplied_return\fP\^;
.br
      Atom \fIproperty\fP\^;
.SH ARGUMENTS
.\" $Header: display.a,v 1.1 88/02/26 10:26:29 mento Exp $
.IP \fIdisplay\fP 1i
Specifies the connection to the X server.
.IP \fIhints\fP 1i
Specifies the size hints for the window in its normal state.
.IP \fIhints\fP 1i
Specifies the
.ZN XSizeHints
structure to be used.
.IP \fIhints_return\fP 1i
Returns the size hints for the window in its normal state.
.\" $Header: property.a,v 1.2 88/04/05 15:19:43 mento Exp $
.IP \fIproperty\fP 1i
Specifies the property name.
.IP \fIsupplied_return\fP 1i
Returns the hints that were supplied by the user.
.\" $Header: w.a,v 1.2 88/05/07 11:35:31 mento Exp $
.IP \fIw\fP 1i
Specifies the window.
.SH DESCRIPTION
The
.ZN XAllocSizeHints
function allocates and returns a pointer to a
.ZN XSizeHints
structure.
Note that all fields in the
.ZN XSizeHints
structure are initially set to zero.
If insufficient memory is available, 
.ZN XAllocSizeHints
returns NULL.
To free the memory allocated to this structure,
use
.ZN XFree .
.LP
The 
.ZN XSetWMNormalHints 
function replaces the size hints for the WM_NORMAL_HINTS property 
on the specified window.
If the property does not already exist,
.ZN XSetWMNormalHints
sets the size hints for the WM_NORMAL_HINTS property on the specified window.
The property is stored with a type of WM_SIZE_HINTS and a format of 32.
.LP
.ZN XSetWMNormalHints
can generate
.ZN BadAlloc
and
.ZN BadWindow
errors.
.LP
The 
.ZN XGetWMNormalHints 
function returns the size hints stored in the WM_NORMAL_HINTS property 
on the specified window.
If the property is of type WM_SIZE_HINTS, is of format 32,
and is long enough to contain either an old (pre-ICCCM) 
or new size hints structure, 
.ZN XGetWMNormalHints
sets the various fields of the 
.ZN XSizeHints
structure, sets the supplied_return argument to the list of fields 
that were supplied by the user (whether or not they contained defined values),
and returns a nonzero status.
Otherwise, it returns a zero status.
.LP
If 
.ZN XGetWMNormalHints
returns successfully and a pre-ICCCM size hints property is read, 
the supplied_return argument will contain the following bits:
.LP
.Ds
(USPosition|USSize|PPosition|PSize|PMinSize|
 PMaxSize|PResizeInc|PAspect)
.De
.LP
If the property is large enough to contain the base size 
and window gravity fields as well, 
the supplied_return argument will also contain the following bits:
.LP
.Ds
PBaseSize|PWinGravity
.De
.LP
.ZN XGetWMNormalHints
can generate a
PN BadWindow
error.
.LP
The 
.ZN XSetWMSizeHints 
function replaces the size hints for the specified property 
on the named window.
If the specified property does not already exist,
.ZN XSetWMSizeHints
sets the size hints for the specified property
on the named window.
The property is stored with a type of WM_SIZE_HINTS and a format of 32.
To set a window's normal size hints, 
you can use the 
.ZN XSetWMNormalHints
function.
.LP
.ZN XSetWMSizeHints
can generate
.ZN BadAlloc ,
.ZN BadAtom ,
and
.ZN BadWindow
errors.
.LP
The 
.ZN XGetWMSizeHints
function returns the size hints stored in the specified property 
on the named window.
If the property is of type WM_SIZE_HINTS, is of format 32, 
and is long enough to contain either an old (pre-ICCCM) 
or new size hints structure, 
.ZN XGetWMSizeHints
sets the various fields of the 
.ZN XSizeHints
structure, sets the supplied_return argument to the
list of fields that were supplied by the user 
(whether or not they contained defined values), 
and returns a nonzero status.
Otherwise, it returns a zero status.
To get a window's normal size hints, 
you can use the 
.ZN XGetWMNormalHints 
function.
.LP
If 
.ZN XGetWMSizeHints
returns successfully and a pre-ICCCM size hints property is read, 
the supplied_return argument will contain the following bits:
.LP
.Ds
(USPosition|USSize|PPosition|PSize|PMinSize|
 PMaxSize|PResizeInc|PAspect)
.De
.LP
If the property is large enough to contain the base size 
and window gravity fields as well, 
the supplied_return argument will also contain the following bits:
.LP
.Ds
PBaseSize|PWinGravity
.De
.LP
.ZN XGetWMSizeHints
can generate
.ZN BadAtom
and
.ZN BadWindow
errors.
.SH PROPERTIES
.TP 1i
\s-1WM_NORMAL_HINTS\s+1
Size hints for a window in its normal state.
The C type of this property is
.ZN XSizeHints .
.SH STRUCTURES
The
.ZN XSizeHints
structure contains:
.LP
/* Size hints mask bits */
.TS
lw(.7i) lw(1.1i) lw(.9i) lw(3.1i).
T{
#define
T}	T{
.ZN USPosition
T}	T{
(1L << 0)
T}	T{
/* user specified x, y */
T}
T{
#define
T}	T{
.ZN USSize
T}	T{
(1L << 1)
T}	T{
/* user specified width, height */
T}
T{
#define
T}	T{
.ZN PPosition
T}	T{
(1L << 2)
T}	T{
/* program specified position */
T}
T{
#define
T}	T{
.ZN PSize
T}	T{
(1L << 3)
T}	T{
/* program specified size */
T}
T{
#define
T}	T{
.ZN PMinSize
T}	T{
(1L << 4)
T}	T{
/* program specified minimum size */
T}
T{
#define
T}	T{
.ZN PMaxSize
T}	T{
(1L << 5)
T}	T{
/* program specified maximum size */
T}
T{
#define
T}	T{
.ZN PResizeInc
T}	T{
(1L << 6)
T}	T{
/* program specified resize increments */
T}
T{
#define
T}	T{
.ZN PAspect
T}	T{
(1L << 7)
T}	T{
/* program specified min and max aspect ratios */
T}
T{
#define
T}	T{
.ZN PBaseSize
T}	T{
(1L << 8)
T}
T{
#define
T}	T{
.ZN PWinGravity
T}	T{
(1L << 9)
T}
T{
#define
T}	T{
.ZN PAllHints
T}	T{
(PPosition|PSize|PMinSize|
.br
PMaxSize|PResizeInc|PAspect)
T}	T{
T}
.TE
.IN "XSizeHints" "" "@DEF@"
.Ds 0
.TA .5i 2.5i
.ta .5i 2.5i
/* Values */

typedef struct {
	long flags;	/* marks which fields in this structure are defined */
	int x, y;	/* Obsolete */
	int width, height;	/* Obsolete */
	int min_width, min_height;
	int max_width, max_height;
	int width_inc, height_inc;
	struct {
	       int x;	/* numerator */
	       int y;	/* denominator */
	} min_aspect, max_aspect;
	int base_width, base_height;
	int win_gravity;
} XSizeHints;
.De
.LP
The x, y, width, and height members are now obsolete
and are left solely for compatibility reasons.
The min_width and min_height members specify the
minimum window size that still allows the application to be useful.
The max_width and max_height members specify the maximum window size.
The width_inc and height_inc members define an arithmetic progression of
sizes (minimum to maximum) into which the window prefers to be resized.
The min_aspect and max_aspect members are expressed
as ratios of x and y, 
and they allow an application to specify the range of aspect
ratios it prefers.
The base_width and base_height members define the desired size of the window.
The window manager will interpret the position of the window 
and its border width to position the point of the outer rectangle 
of the overall window specified by the win_gravity member.
The outer rectangle of the window includes any borders or decorations
supplied by the window manager.
In other words,
if the window manager decides to place the window where the client asked,
the position on the parent window's border named by the win_gravity 
will be placed where the client window would have been placed 
in the absence of a window manager.
.LP
Note that use of the
.ZN PAllHints
macro is highly discouraged.
.SH DIAGNOSTICS
.\" $Header: badalloc.e,v 1.3 87/09/11 11:17:14 mento Exp $
.TP 1i
.ZN BadAlloc
The server failed to allocate the requested resource or server memory.
.\" $Header: badatom.e,v 1.1 87/09/04 08:22:55 mento Exp $
.TP 1i
.ZN BadAtom
A value for an Atom argument does not name a defined Atom.
.\" $Header: badwindow.e,v 1.1 87/09/04 08:23:20 mento Exp $
.TP 1i
.ZN BadWindow
A value for a Window argument does not name a defined Window.
.SH "SEE ALSO"
XAllocClassHint(3X11),
XAllocIconSize(3X11),
XAllocWMHints(3X11),
XFree(3X11),
XSetCommand(3X11),
XSetTransientForHint(3X11),
XSetTextProperty(3X11),
XSetWMClientMachine(3X11),
XSetWMColormapWindows(3X11),
XSetWMIconName(3X11),
XSetWMName(3X11),
XSetWMProperties(3X11),
XSetWMProtocols(3X11),
XStringListToTextProperty(3X11)
.br
\fI\*(xL\fP
