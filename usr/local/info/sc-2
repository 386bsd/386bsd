This is Info file ../info/sc, produced by Makeinfo-1.55 from the input
file sc.texi.

   This document describes the Supercite Version 3.1 package for citing
and attributing the replies for various GNU Emacs mail and news reading
subsystems.

   Copyright (C) 1993 Barry A. Warsaw

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.


File: sc,  Node: Attribution Preferences,  Next: Anonymous Attributions,  Prev: Selecting an Attribution,  Up: Selecting an Attribution

Attribution Preferences
=======================

   When you cite an original message, you can tell Supercite which part
of the author's name you would prefer it to use as the attribution.  The
variable `sc-preferred-attribution-list' controls this; it contains
keys which are matched against the attribution alist in the given order.
The first value of a key that produces a non-`nil', non-empty string
match is used as the attribution string, and if no keys match, a
secondary mechanism is used to generate the attribution.  *Note
Anonymous Attributions::.

   The following preferences are always available in the attribution
alist (barring error):

`"emailname"'
     the author's email terminus.

`"initials"'
     the author's initials.

`"firstname"'
     the author's first name.

`"lastname"'
     the author's last name.

`"middlename-1"'
     the author's first middle name.

`"sc-lastchoice"'
     the last attribution string you have selected. This is useful when
     you recite paragraphs in the reply.

`"sc-consult"'
     consults the customizable list `sc-attrib-selection-list' which can
     be used to select special attributions based on the value of any
     info key.  See below for details.

`"x-attribution"'
     the original author's suggestion for attribution string choice.
     See below for details.

   Middle name indexes can be any positive integer greater than zero,
though it is unlikely that many authors will have more than one middle
name, if that many.

   At this point, let me digress into a discussion of etiquette.  It is
my belief that while the style of the citations is a reflection of the
personal tastes of the replier (i.e., you), the attribution selection is
ultimately the personal choice of the original author.  In a sense it is
his or her "net nickname", and therefore the author should have some
say in the selection of attribution string.  Imagine how you would feel
if someone gave you a nickname that you didn't like?

   For this reason, Supercite recognizes a special mail header,
`X-Attribution:', which if present, tells Supercite the attribution
string preferred by the original author.  It is the value of this header
that is associated with the `"x-attribution"' key in the attribution
alist.  Currently, you can override the preference of this key by
changing `sc-preferred-attribution-list', but that isn't polite, and in
the future Supercite may hard-code this.  For now, it is suggested that
if you change the order of the keys in this list, that
`"x-attribution"' always be first, or possible second behind only
`"sc-lastchoice"'.  This latter is the default.

   The value `"sc-consult"' in `sc-preferred-attribution-list' has a
special meaning during attribution selection.  When Supercite
encounters this preference, it begins processing a customizable list of
attributions, contained in the variable `sc-attrib-selection-list'.
Each element in this list contains lists of the following form:

     (INFOKEY ((REGEXP . ATTRIBUTION)
              (REGEXP . ATTRIBUTION)
              (...)))

where INFOKEY is a key for `sc-mail-field' and REGEXP is a regular
expression to match against the INFOKEY's value. If REGEXP matches the
INFOKEY's value, the ATTRIBUTION is used as the attribution string.
Actually, ATTRIBUTION can be a string or a list; if it is a list, it is
`eval'uated and the return value (which must be a string), is used as
the attribution.

   This can be very useful for when you are replying to net
acquaintances who do not use the `X-Attribution:' mail header.  You may
know what nickname they would prefer to use, and you can set up this
list to match against a specific mail field, e.g., `From:', allowing you
to cite your friend's message with the appropriate attribution.


File: sc,  Node: Anonymous Attributions,  Next: Author Names,  Prev: Attribution Preferences,  Up: Selecting an Attribution

Anonymous Attributions
======================

   When the author's name cannot be found in the `From:' mail header, a
fallback author name and attribution string must be supplied.  The
fallback author name is contained in the variable
`sc-default-author-name' and the fallback attribution string is
contained in the variable `sc-default-attribution'.  Default values for
these variables are `"Anonymous"' and `"Anon"', respectively. Note that
in most circumstances, getting the default author name or attribution
is a sign that something is set up incorrectly.

   Also, if the preferred attribution, which you specified in your
`sc-preferred-attribution-alist' variable cannot be found, a secondary
method can be employed to find a valid attribution string. The variable
`sc-use-only-preference-p' controls what happens in this case.  If the
variable's value is non-`nil', then `sc-default-author-name' and
`sc-default-attribution' are used, otherwise, the following steps are
taken to find a valid attribution string, and the first step to return
a non-`nil', non-empty string becomes the attribution:

  1. Use the last selected attribution, if there is one.

  2. Use the value of the `"x-attribution"' key.

  3. Use the author's first name.

  4. Use the author's last name.

  5. Use the author's initials.

  6. Find the first non-`nil', non-empty attribution string in the
     attribution alist.

  7. `sc-default-attribution' is used.

   Once the attribution string has been automatically selected, a
number of things can happen. If the variable `sc-confirm-always-p' is
non-`nil', you are queried for confirmation of the chosen attribution
string. The possible values for completion are those strings in the
attribution alist, however you are not limited to these choices.  You
can type any arbitrary string at the confirmation prompt. The string
you enter becomes the value associated with the `"sc-lastchoice"' key
in the attribution alist.

   Once an attribution string has been selected, Supercite will force
the string to lower case if the variable `sc-downcase-p' is non-`nil'.

   Two hook variables provide even greater control of the attribution
selection process.  The hook `sc-attribs-preselect-hook' is run before
any attribution is selected.  Likewise, the hook
`sc-attribs-postselect-hook' is run after the attribution is selected
(and the corresponding citation string is built), but before these
values are committed for use by Supercite.  During the post-selection
hook, the local variables `attribution' and `citation' are bound to the
appropriate strings.  By changing these variables in your hook
functions, you change the attribution and citation strings used by
Supercite.  One possible use of this would be to override any
automatically derived attribution string when it is only one character
long; e.g. you prefer to use `"initials"' but the author only has one
name.


File: sc,  Node: Author Names,  Next: Configuring the Citation Engine,  Prev: Anonymous Attributions,  Up: Selecting an Attribution

Author Names
============

   Supercite employs a number of heuristics to decipher the author's
name based on value of the `From:' mail field of the original message.
Supercite can recognize almost all of the common `From:' field formats
in use.  If you encounter a `From:' field that Supercite cannot parse,
please report this bug.  *Note The Supercite Mailing List::.

   There are a number of Supercite variables that control how author
names are extracted from the `From:' header.  Some headers may contain a
descriptive title as in:

     From: computer!speedy!doe (John Xavier-Doe -- Decent Hacker)

   Supercite knows which part of the `From:' header is email address
and which part is author name, but in this case the string `"Decent
Hacker"' is not part of the author's name.  You can tell Supercite to
ignore the title, while still recognizing hyphenated names through the
use of a regular expression in the variable `sc-titlecue-regexp'.  This
variable has the default value of `"\\\\s +-+\\\\s +"'.  Any text after
this regexp is encountered is ignored as noise.

   Some `From:' headers may contain extra titles in the name fields not
separated by a title cue, but which are nonetheless not part of the
author's name proper.  Examples include the titles "Dr.", "Mr.", "Ms.",
"Jr.", "Sr.", and "III" (e.g., Thurston Howe, the Third).  Also, some
companies prepend or append the name of the division, organization, or
project on the author's name.  All of these titles are noise which
should be ignored.  The variable `sc-name-filter-alist' is used for
this purpose. As implied by its name, this variable is an association
list, where each element is a cons cell of the form:

     (REGEXP . POSITION)

where REGEXP is a regular expression that is matched (using
`string-match') against each element of the `From:' field's author
name.  POSITION is a position indicator, starting at zero.  Thus to
strip out all titles of "Dr.", "Mr.", etc. from the name,
`sc-name-filter-alist' would have an entry such as:

     ("^\\(Mr\\|Mrs\\|Ms\\|Dr\\)[.]?$" . 0)

which only removes them if they appear as the first word in the name.
The position indicator is an integer, or one of the two special symbols
`last' or `any'.  `last' always matches against the last word in the
name field, while `any' matches against every word in the name field.


File: sc,  Node: Configuring the Citation Engine,  Next: Using Regi,  Prev: Author Names,  Up: Top

Configuring the Citation Engine
*******************************

   At the heart of Supercite is a regular expression interpreting engine
called "Regi".  Regi operates by interpreting a data structure called a
Regi-frame (or just "frame"), which is a list of Regi-entries (or just
"entry").  Each entry contains a predicate, typically a regular
expression, which is matched against a line of text in the current
buffer.  If the predicate matches true, an associated expression is
`eval'uated.  In this way, an entire region of text can be transformed
in an *awk*-like manner.  Regi is used throughout Supercite, from mail
header information extraction, to header nuking, to citing text.

* Menu:

* Using Regi::
* Frames You Can Customize::

   While the details of Regi are discussed below (*note Using Regi::.),
only those who wish to customize certain aspects of Supercite need
concern themselves with it.  It is important to understand though, that
any conceivable citation style that can be described by a regular
expression can be recognized by Supercite.  This leads to some
interesting applications.  For example, if you regularly recieve email
from a co-worker that uses an uncommon citation style (say one that
employs a `|' or `}' character at the front of the line), it is
possible for Supercite to recognize this and *coerce* the citation to
your preferred style, for consistency.  In theory, it is possible for
Supercite to recognize such things as uuencoded messages or C code and
cite or fill those differently than normal text.  None of this is
currently part of Supercite, but contributions are welcome!


File: sc,  Node: Using Regi,  Next: Frames You Can Customize,  Prev: Configuring the Citation Engine,  Up: Configuring the Citation Engine

Using Regi
==========

   Regi works by interpreting frames with the function
`regi-interpret'.  A frame is a list of arbitrary size where each
element is a entry of the following form:

     (PRED FUNC [NEGATE-P [CASE-FOLD-SEARCH]])

   Regi starts with the first entry in a frame, evaluating the PRED of
that entry against the beginning of the line that `point' is on.  If
the PRED evaluates to true (or false if the optional NEGATE-P is
non-`nil'), then the FUNC for that entry is `eval'uated.  How
processing continues is determined by the return value for FUNC, and is
described below.  If PRED was false the next entry in the frame is
checked until all entries have been matched against the current line.
If no entry matches, `point' is moved forward one line and the frame is
reset to the first entry.

   PRED can be a string, a variable, a list or one of the following
symbols: `t', `begin', `end', or `every'.  If PRED is a string, or a
variable or list that `eval'uates to a string, it is interpreted as a
regular expression.  This regexp is matched against the current line,
from the beginning, using `looking-at'.  This match folds case if the
optional CASE-FOLD-SEARCH is non-`nil'.  If PRED is not a string, or
does not `eval'uate to a string, it is interpreted as a binary value
(`nil' or non-`nil').

   The four special symbol values for PRED are recognized:

`t'
     Always produces a true outcome.

`begin'
     Always executed before the frame is interpreted. This can be used
     to initialize some global variables for example.

`end'
     Always executed after frame interpreting is completed. This can be
     used to perform any necessary post-processing.

`every'
     Executes whenever the frame is reset, usually after the entire
     frame has been matched against the current line.

   Note that NEGATE-P and CASE-FOLD-SEARCH are ignored if PRED is one
of these special symbols.  Only the first occurance of each symbol in a
frame is used; any duplicates are ignored.  Also note that for
performance reasons, the entries associated with these symbols are
removed from the frame during the main interpreting loop.

   Your FUNC can return certain values which control continued Regi
processing.  By default, if your FUNC returns `nil' (as it should be
careful to do explicitly), Regi will reset the frame to the first
entry, and advance `point' to the beginning of the next line.  If a
list is returned from your function, it can contain any combination of
the following elements:

the symbol `continue'
     This tells Regi to continue processing entries after a match,
     instead of reseting the frame and moving `point'. In this way,
     lines of text can have multiple matches, but you have to be
     careful to avoid entering infinite loops.

the symbol `abort'
     This tells Regi to terminate frame processing. However, any `end'
     entry is still processed.

the list `(frame . NEWFRAME)'
     This tells Regi to substitute NEWFRAME as the frame it is
     interpreting.  In other words, your FUNC can modify the Regi frame
     on the fly.  NEWFRAME can be a variable containing a frame, or it
     can be the frame in-lined.

the list `(step . STEP)'
     Tells Regi to move STEP number of lines forward as it continues
     processing. By default, Regi moves forward one line.  STEP can be
     zero or negative of course, but watch out for infinite loops.

   During execution of your FUNC, the following variables will be
temporarily bound to some useful information:

`curline'
     The current line in the buffer that Regi is `looking-at', as a
     string.

`curframe'
     The current frame being interpreted.

`curentry'
     The current frame entry being interpreted.


File: sc,  Node: Frames You Can Customize,  Next: Post-yank Formatting Commands,  Prev: Using Regi,  Up: Configuring the Citation Engine

Frames You Can Customize
========================

   As mentioned earlier, Supercite uses various frames to perform
certain jobs such as mail header information extraction and mail header
nuking.  However, these frames are not available for you to customize,
except through abstract interfaces such as `sc-nuke-mail-header', et al.

   However, the citation frames Supercite uses provide a lot of
customizing power and are thus available to you to change to suit your
needs.  The workhorse of citation is the frame contained in the variable
`sc-default-cite-frame'.  This frame recognizes many situations, such
as blank lines, which it interprets as paragraph separators.  It also
recognizes previously cited nested and non-nested citations in the
original message.  By default it will coerce non-nested citations into
your preferred citation style, and it will add a level of citation to
nested citations.  It will also simply cite uncited lines in your
preferred style.

   In a similar vein, there are default frames for "unciting" and
"reciting", contained in the variables `sc-default-uncite-frame' and
`sc-default-recite-frame' respectively.

   As mentioned earlier (*note Recognizing Citations::.), citations are
recognized through the values of the regular expressions
`sc-citation-root-regexp', et al.  To recognize odd styles, you could
modify these variables, or you could modify the default citing frame.
Alternatively, you could set up association lists of frames for
recognizing specific alternative forms.

   For each of the actions - citing, unciting, and reciting - an alist
is consulted to find the frame to use (`sc-cite-frame-alist',
`sc-uncite-frame-alist', and `sc-recite-frame-alist' respectively).
These frames can contain alists of the form:

     ((INFOKEY (REGEXP . FRAME) (REGEXP . FRAME) ...)
      (INFOKEY (REGEXP . FRAME) (REGEXP . FRAME) ...)
      (...))

   Where INFOKEY is a key suitable for `sc-mail-field', REGEXP is a
regular expression which is `string-match''d against the value of the
`sc-mail-field' key, and FRAME is the frame to use if a match occurred.
FRAME can be a variable containing a frame or a frame in-lined.

   When Supercite is about to cite, uncite, or recite a region, it
consults the appropriate alist and attempts to find a frame to use.  If
one is not found from the alist, then the appropriate default frame is
used.


File: sc,  Node: Post-yank Formatting Commands,  Next: Citing Commands,  Prev: Frames You Can Customize,  Up: Top

Post-yank Formatting Commands
*****************************

   Once the original message has been yanked into the reply buffer, and
`sc-cite-original' has had a chance to do its thing, a number of useful
Supercite commands will be available to you. Since there is wide
variety in the keymaps that MUAs set up in their reply buffers, it is
next to impossible for Supercite to properly sprinkle its commands into
the existing keymap.  For this reason Supercite places its commands on a
separate keymap, putting this keymap onto a prefix key in the reply
buffer. You can customize the prefix key Supercite uses by changing the
variable `sc-mode-map-prefix'.  By default, the `sc-mode-map-prefix' is
`C-c C-p'; granted, not a great choice, but unfortunately the best
general solution so far.  In the rest of this chapter, we'll assume
you've installed Supercite's keymap on the default prefix.

* Menu:

* Citing Commands::
* Insertion Commands::
* Variable Toggling Shortcuts::
* Mail Field Commands::
* Miscellaneous Commands::


File: sc,  Node: Citing Commands,  Next: Insertion Commands,  Prev: Post-yank Formatting Commands,  Up: Post-yank Formatting Commands

Commands to Manually Cite, Recite, and Uncite
=============================================

   Probably the three most common post-yank formatting operations that
you will perform will be the manual citing, reciting, and unciting of
regions of text in the reply buffer. Often you may want to recite a
paragraph to use a nickname, or manually cite a message when setting
`sc-cite-region-limit' to `nil'.  The following commands perform these
functions on the region of text between `point' and `mark'.  Each of
them sets the "undo boundary" before modifying the region so that the
command can be undone in the standard Emacs way.

   A quick note about Emacs 19.  Unlike in Emacs 18, the region
delimited by `point' and `mark' can have two states.  It can be
"active" or "inactive".  Although the FSF Emacs 19 and Lucid Emacs 19
use different terminology and functions, both employ the same
convention such that when the region is inactive, commands that modify
the region should generate an error.  The user needs to explicitly
activate the region before successfully executing the command.  All
Supercite commands conform to this convention.

   Here is the list of Supercite citing commands:

`sc-cite-region' (`C-c C-p c')
     This command cites each line in the region of text by interpreting
     the selected frame from `sc-cite-frame-alist', or the default
     citing frame `sc-default-cite-frame'.  It runs the hook
     `sc-pre-cite-hook' before interpreting the frame.  With an optional
     universal argument (`C-u'), it temporarily sets
     `sc-confirm-always-p' to `t' so you can confirm the attribution
     string for a single manual citing.  *Note Configuring the Citation
     Engine::.

`sc-uncite-region' (`C-c C-p u')
     This command removes any citation strings from the beginning of
     each cited line in the region by interpreting the selected frame
     from `sc-uncite-frame-alist', or the default unciting frame
     `sc-default-uncite-frame'.  It runs the hook `sc-pre-uncite-hook'
     before interpreting the frame.  *Note Configuring the Citation
     Engine::.

`sc-recite-region' (`C-c C-p r')
     This command recites each line the region by interpreting the
     selected frame from `sc-recite-frame-alist', or the default
     reciting frame `sc-default-recite-frame'. It runs the hook
     `sc-pre-recite-hook' before interpreting the frame.  *Note
     Configuring the Citation Engine::.

     Supercite will always ask you to confirm the attribution when
     reciting a region, regardless of the value of
     `sc-confirm-always-p'.


File: sc,  Node: Insertion Commands,  Next: Variable Toggling Shortcuts,  Prev: Citing Commands,  Up: Post-yank Formatting Commands

Insertion Commands
==================

   These two functions insert various strings into the reply buffer.

`sc-insert-reference' (`C-c C-p w')
     Inserts a reference header into the reply buffer at `point'.  With
     no arguments, the header indexed by `sc-preferred-header-style' is
     inserted. An optional numeric argument is the index into
     `sc-rewrite-header-list' indicating which reference header to
     write.

     With just the universal argument (`C-u'), electric reference mode
     is entered, regardless of the value of `sc-electric-references-p'.

`sc-insert-citation' (`C-c C-p i')
     Inserts the current citation string at the beginning of the line
     that `point' is on.  If the line is already cited, Supercite will
     issue an error and will not cite the line.


File: sc,  Node: Variable Toggling Shortcuts,  Next: Mail Field Commands,  Prev: Insertion Commands,  Up: Post-yank Formatting Commands

Variable Toggling Shortcuts
===========================

   Supercite defines a number of commands that make it easier for you to
toggle and set various Supercite variables as you are editing the reply
buffer.  For example, you may want to turn off filling or whitespace
cleanup, but only temporarily.  These toggling shortcut commands make
this easy to do.

   Like Supercite commands in general, the toggling commands are placed
on a keymap prefix within the greater Supercite keymap.  For the default
value of `sc-mode-map-prefix', this will be `C-c C-p C-t'.

   The following commands toggle the value of certain Supercite
variables which take only a binary value:

`C-c C-p C-t b'
     Toggles the variable `sc-mail-nuke-blank-lines-p'.

`C-c C-p C-t c'
     Toggles the variable `sc-confirm-always-p'.

`C-c C-p C-t d'
     Toggles the variable `sc-downcase-p'.

`C-c C-p C-t e'
     Toggles the variable `sc-electric-references-p'.

`C-c C-p C-t f'
     Toggles the variable `sc-auto-fill-region-p'.

`C-c C-p C-t o'
     Toggles the variable `sc-electric-circular-p'.

`C-c C-p C-t s'
     Toggles the variable `sc-nested-citation-p'.

`C-c C-p C-t u'
     Toggles the variable `sc-use-only-preferences-p'.

`C-c C-p C-t w'
     Toggles the variable `sc-fixup-whitespace-p'.

   The following commands let you set the value of multi-value
variables, in the same way that Emacs' `set-variable' does:

`C-c C-p C-t a'
     Sets the value of the variable `sc-preferred-attribution-list'.

`C-c C-p C-t l'
     Sets the value of the variable `sc-cite-region-limit'.

`C-c C-p C-t n'
     Sets the value of the variable `sc-mail-nuke-mail-headers'.

`C-c C-p C-t N'
     Sets the value of the variable `sc-mail-header-nuke-list'.

`C-c C-p C-t p'
     Sets the value of the variable `sc-preferred-header-style'.

   One special command is provided to toggle both
`sc-auto-fill-region-p' and `sc-fixup-whitespace-p' together.  This is
because you typically want to run Supercite with either variable as
`nil' or non-`nil'.  The command to toggle these variables together is
bound on `C-c C-p C-p'.

   Finally, the command `C-c C-p C-t h' (also `C-c C-p C-t ?') brings
up a Help message on the toggling keymap.


File: sc,  Node: Mail Field Commands,  Next: Miscellaneous Commands,  Prev: Variable Toggling Shortcuts,  Up: Post-yank Formatting Commands

Mail Field Commands
===================

   These commands allow you to view, modify, add, and delete various
bits of information from the info alist.  *Note Information Keys and
the Info Alist::.

`sc-mail-field-query' (`C-c C-p f')
     Allows you to interactively view, modify, add, and delete info
     alist key-value pairs.  With no argument, you are prompted (with
     completion) for a info key.  The value associated with that key is
     displayed in the minibuffer.  With an argument, this command will
     first ask if you want to view, modify, add, or delete an info key.
     Viewing is identical to running the command with no arguments.

     If you want to modify the value of a key, Supercite will first
     prompt you (with completion) for the key of the value you want to
     change.  It will then put you in the minibuffer with the key's
     current value so you can edit the value as you wish.  When you hit
     RET, the key's value is changed.  For those of you running Emacs
     19, minibuffer history is kept for the values.

     If you choose to delete a key-value pair, Supercite will prompt
     you (with completion) for the key to delete.

     If you choose to add a new key-value pair, Supercite firsts
     prompts you for the key to add.  Note that completion is turned on
     for this prompt, but you can type any key name here, even one that
     does not yet exist.  After entering the key, Supercite prompts you
     for the key's value.  It is not an error to enter a key that
     already exists, but the new value will override any old value.  It
     will not replace it though; if you subsequently delete the
     key-value pair, the old value will reappear.

`sc-mail-process-headers' (`C-c C-p g')
     This command lets you re-initialize Supercite's info alist from
     any set of mail headers in the region between `point' and `mark'.
     This function is especially useful for replying to digest messages
     where Supercite will initially set up its information for the
     digest originator, but you want to cite each component article
     with the real message author.  Note that unless an error during
     processing occurs, any old information is lost.


File: sc,  Node: Miscellaneous Commands,  Next: Information Keys and the Info Alist,  Prev: Mail Field Commands,  Up: Post-yank Formatting Commands

Miscellaneous Commands
======================

`sc-open-line' (`C-c C-p o')
     Similar to Emacs' standard `open-line' commands, but inserts the
     citation string in front of the new line.  As with `open-line', an
     optional numeric argument inserts that many new lines.

`sc-describe' (`C-c C-p h' and `C-c C-p ?')
     This function has been obsoleted by the TeXinfo manual you are now
     reading. It is still provided for compatibility, but it will
     eventually go away.

`sc-version' (`C-c C-p v')
     Echos the version of Supercite you are using.  With the optional
     universal argument (`C-u'), this command inserts the version
     information into the current buffer.

`sc-submit-bug-report' (`C-c C-p C-b')
     If you encounter a bug, or wish to suggest an enhancement, use this
     command to set up an outgoing mail buffer, with the proper address
     to the Supercite maintainer automatically inserted in the `To:'
     field.  This command also inserts information that the Supercite
     maintainer can use to recreate your exact setup, making it easier
     to verify your bug.


File: sc,  Node: Hints to MUA Authors,  Next: Version 3 Changes,  Prev: Electric References,  Up: Top

Hints to MUA Authors
********************

   In June of 1989, some discussion was held between the various MUA
authors, the Supercite author, and other Supercite users. These
discussions centered around the need for a standard interface between
MUAs and Supercite (or any future Supercite-like packages).  This
interface was formally proposed by Martin Neitzel on Fri, 23 Jun 89, in
a mail message to the Supercite mailing list:

     	Martin> Each news/mail-reader should provide a form of
     	Martin> mail-yank-original that
     
     	Martin> 1: inserts the original message incl. header into the
     	Martin>    reply buffer; no indentation/prefixing is done, the header
     	Martin>    tends to be a "full blown" version rather than to be
     	Martin>    stripped down.
     
     	Martin> 2: `point' is at the start of the header, `mark' at the
     	Martin>    end of the message body.
     
     	Martin> 3: (run-hooks 'mail-yank-hooks)
     
     	Martin> [Supercite] should be run as such a hook and merely
     	Martin> rewrite the message.  This way it isn't anymore
     	Martin> [Supercite]'s job to gather the original from obscure
     	Martin> sources. [...]

   This specification was adopted, but with the recent release of FSF
GNU Emacs 19, it has undergone a slight modification.  Instead of the
variable `mail-yank-hooks', the new preferred hook variable that the
MUA should provide is `mail-citation-hook'.  `mail-yank-hooks' can be
provided for backward compatibility, but `mail-citation-hook' should
always take precedence.  Richard Stallman (of the FSF) suggests that
the MUAs should `defvar' `mail-citation-hook' to `nil' and perform some
default citing when that is the case.  Take a look at Emacs 19's
`sendmail.el' file, specifically the `mail-yank-original' defun for
details.

   If you are writing a new MUA package, or maintaining an existing MUA
package, you should make it conform to this interface so that your users
will be able to link Supercite easily and seamlessly. To do this, when
setting up a reply or forward buffer, your MUA should follow these
steps:

  1. Insert the original message, including the mail headers into the
     reply buffer. At this point you should not modify the raw text in
     any way, and you should place all the original headers into the
     body of the reply.  This means that many of the mail headers will
     be duplicated, one copy above the `mail-header-separator' line and
     one copy below, however there will probably be more headers below
     this line.

  2. Set `point' to the beginning of the line containing the first mail
     header in the body of the reply. Set `mark' at the end of the
     message text.  It is very important that the region be set around
     the text Supercite is to modify and that the mail headers are
     within this region.  Supercite will not venture outside the region
     for any reason, and anything within the region is fair game, so
     don't put anything that *must* remain unchanged inside the region.
     Further note that for Emacs 19, the region need not be set
     active.  Supercite will work properly when the region is inactive,
     as should any other like-minded package.

  3. Run the hook `mail-citation-hook'. You will probably want to
     provide some kind of default citation functions in cases where the
     user does not have Supercite installed.  By default, your MUA
     should `defvar' `mail-citation-hook' to `nil', and in your yanking
     function, check its value.  If it finds `mail-citation-hook' to be
     `nil', it should perform some default citing behavior.  User who
     want to connect to Supercite then need only add `sc-cite-original'
     to this list of hooks using `add-hook'.

   If you do all this, your users will not need to overload your
routines to use Supercite, and your MUA will join the ranks of those
that conform to this interface "out of the box."


File: sc,  Node: Version 3 Changes,  Next: Thanks and History,  Prev: Hints to MUA Authors,  Up: Top

Version 3 Changes
*****************

   With version 3, Supercite has undergone an almost complete rewrite,
and has hopefully benefitted in a number of ways, including vast
improvements in the speed of performance, a big reduction in size of the
code and in the use of Emacs resources, and a much cleaner and flexible
internal architecture.  The central construct of the info alist, and its
role in Supercite has been expanded, and the other central concept, the
general package Regi, was developed to provide a theoretically unlimited
flexibility.

   But most of this work is internal and not of very great importance
to the casual user. There have been some changes at the user-visible
level, but for the most part, the Supercite configuration variables from
version 2 should still be relevant to version 3.  Below, I briefly
outline those user-visible things that have changed since version 2. For
details, look to other sections of this manual.

  1. Supercite proper now comes in a single file, `supercite.el', which
     contains everything except the unsupported noodlings, overloading
     (which should be more or less obsolete with the release of Emacs
     19), and the general lisp packages `reporter.el' and `regi.el'.
     Finally, the TeXinfo manual comes in its own file as well.  In
     particular, the file `sc.el' from the version 2 distribution is
     obsolete, as is the file `sc-elec.el'.

  2. `sc-spacify-name-chars' is gone in version 3.

  3. `sc-nickname-alist' is gone in version 3.  The
     `sc-attrib-selection-list' is a more general construct supporting
     the same basic feature.

  4. The version 2 variable `sc-preferred-attribution' has been changed
     to `sc-preferred-attribution-list', and has been expanded upon to
     allow you to specify an ordered list of preferred attributions.

  5. `sc-mail-fields-list' has been removed, and header nuking in
     general has been greatly improved, giving you wider flexibility in
     specifying which headers to keep and remove while presenting a
     simplified interface to commonly chosen defaults.

  6. Post-yank paragraph filling has been completely removed from
     Supercite, other packages just do it better than Supercite ever
     would.  Supercite will still fill newly cited paragraphs.

  7. The variable `sc-all-but-cite-p' has been replaced by
     `sc-cite-region-limit'.

  8. Keymap hacking in the reply buffer has been greatly simplified,
     with, I believe, little reduction in functionality.

  9. Hacking of the reply buffer's docstring has been completely
     eliminated.


File: sc,  Node: Thanks and History,  Next: The Supercite Mailing List,  Prev: Version 3 Changes,  Up: Top

Thanks and History
******************

   The Supercite package was derived from its predecessor Superyank 1.11
which was inspired by various bits of code and ideas from Martin Neitzel
and Ashwin Ram. They were the folks who came up with the idea of
non-nested citations and implemented some rough code to provide this
style. Superyank and Supercite version 2 evolved to the point where much
of the attribution selection mechanism was automatic, and features have
been continuously added through the comments and suggestions of the
Supercite mailing list participants.  Supercite version 3 represents a
nearly complete rewrite with many of the algorithms and coding styles
being vastly improved.  Hopefully Supercite version 3 is faster,
smaller, and much more flexible than its predecessors.

   In the version 2 manual I thanked some specific people for their
help in developing Supercite 2.  You folks know who you are and your
continued support is greatly appreciated.  I wish to thank everyone on
the Supercite mailing list, especially the brave alpha testers, who
helped considerably in testing out the concepts and implementation of
Supercite version 3.  Special thanks go out to the MUA and Emacs
authors Kyle Jones, Stephen Gildea, Richard Stallman, and Jamie
Zawinski for coming to a quick agreement on the new
`mail-citation-hook' interface, and for adding the magic lisp to their
code to support this.

   All who have helped and contributed have been greatly appreciated.


File: sc,  Node: The Supercite Mailing List,  Next: Concept Index,  Prev: Thanks and History,  Up: Top

The Supercite Mailing List
**************************

   The author runs a simple mail expanding mailing list for discussion
of issues related to Supercite. This includes enhancement requests, bug
reports, general help questions, etc.  To subscribe or unsubscribe to
the mailing list, send a request to the administrative address:

     Internet: supercite-request@anthem.nlm.nih.gov
         UUCP: uunet!anthem.nlm.nih.gov!supercite-request

   Please be sure to include the most reliable and shortest (preferably
Internet) address back to you.  To post articles to the list, send your
message to this address (you do not need to be a member to post, but be
sure to indicate this in your article or replies may not be CC'd to
you):

     Internet: supercite@anthem.nlm.nih.gov
         UUCP: uunet!anthem.nlm.nih.gov!supercite

   If you are sending bug reports, they should go to the following
address, but *please*! use the command `sc-submit-bug-report' since it
will be much easier for me to duplicate your problem if you do so.  It
will set up a mail buffer automatically with this address on the `To:'
line:

     Internet: supercite-help@anthem.nlm.nih.gov
         UUCP: uunet!anthem.nlm.nih.gov!supercite-help


File: sc,  Node: Concept Index,  Next: Command Index,  Prev: The Supercite Mailing List,  Up: Top

Concept Index
*************

* Menu:

* .emacs file:                          Overloading for Non-conforming MUAs.
* .emacs file:                          Getting Connected.
* .emacs file:                          VM with any Emacsen.
* .emacs file:                          Emacs 19 MUAs.
* .emacs file:                          Emacs 18 MUAs.
* .emacs file:                          MH-E with any Emacsen.
* add-hook substitute:                  Emacs 18 MUAs.
* attribute, attributing:               Usage Overview.
* attribution info field (sc-):         Information Keys and the Info Alist.
* attribution list:                     Selecting an Attribution.
* attribution string:                   Citation Elements.
* author info field (sc-):              Information Keys and the Info Alist.
* author names:                         Author Names.
* autoload:                             Getting Connected.
* citation:                             Citations.
* citation delimiter:                   Citation Elements.
* citation info field (sc-):            Information Keys and the Info Alist.
* citation interface specification:     Getting Connected.
* citation leader:                      Citation Elements.
* citation separator:                   Citation Elements.
* citation string:                      Citation Elements.
* cite, citing:                         Usage Overview.
* electric references:                  Electric References.
* emailname info field (sc-):           Information Keys and the Info Alist.
* entries (Regi):                       Configuring the Citation Engine.
* filladapt:                            What Supercite Does.
* filladapt:                            Filling Cited Text.
* filling paragraphs:                   Filling Cited Text.
* firstname info field (sc-):           Information Keys and the Info Alist.
* frames (Regi):                        Configuring the Citation Engine.
* from-address info field (sc-):        Information Keys and the Info Alist.
* gin-mode:                             What Supercite Does.
* gin-mode:                             Filling Cited Text.
* header rewrite functions:             Reference Headers.
* header rewrite functions, built-in:   The Built-in Header Rewrite Functions.
* Hyperbole:                            Overloading for Non-conforming MUAs.
* Info Alist:                           Information Keys and the Info Alist.
* info alist:                           What Supercite Does.
* information extracted from mail fields: Information Keys and the Info Alist.
* information keys:                     Information Keys and the Info Alist.
* initials info field (sc-):            Information Keys and the Info Alist.
* keymap prefix:                        Reply Buffer Initialization.
* lastname info field (sc-):            Information Keys and the Info Alist.
* mail-citation-hook:                   MH-E with any Emacsen.
* mailing list address:                 The Supercite Mailing List.
* mark:                                 Getting Connected.
* middlename-1 info field (sc-):        Information Keys and the Info Alist.
* modeline:                             Reply Buffer Initialization.
* modeline:                             What Supercite Does.
* MUA:                                  Introduction.
* nested citations:                     Citations.
* non-nested citations:                 Citations.
* NUA:                                  Introduction.
* nuking mail headers:                  What Supercite Does.
* overloading:                          Emacs 18 MUAs.
* overloading:                          Overloading for Non-conforming MUAs.
* point:                                Getting Connected.
* reciting:                             Frames You Can Customize.
* reference header:                     What Supercite Does.
* reference headers:                    Reference Headers.
* Regi:                                 Configuring the Citation Engine.
* regi.el file:                         Version 3 Changes.
* reply-address info field (sc-):       Information Keys and the Info Alist.
* reporter.el file:                     Version 3 Changes.
* sc-attribution info field:            Information Keys and the Info Alist.
* sc-author info field:                 Information Keys and the Info Alist.
* sc-citation info field:               Information Keys and the Info Alist.
* sc-elec.el from version 2:            Version 3 Changes.
* sc-emailname info field:              Information Keys and the Info Alist.
* sc-firstname info field:              Information Keys and the Info Alist.
* sc-from-address info field:           Information Keys and the Info Alist.
* sc-initials info field:               Information Keys and the Info Alist.
* sc-lastname info field:               Information Keys and the Info Alist.
* sc-middlename-1 info field:           Information Keys and the Info Alist.
* sc-oloads.el:                         Overloading for Non-conforming MUAs.
* sc-reply-address info field:          Information Keys and the Info Alist.
* sc-sender-address info field:         Information Keys and the Info Alist.
* sc-unsupp.el file:                    Version 3 Changes.
* sc-unsupp.el file:                    Emacs 18 MUAs.
* sc.el from version 2:                 Version 3 Changes.
* sender-address info field (sc-):      Information Keys and the Info Alist.
* sendmail.el:                          Hints to MUA Authors.
* sendmail.el file:                     Emacs 18 MUAs.
* setq as a substitute for add-hook:    Emacs 18 MUAs.
* supercite mailing list address:       The Supercite Mailing List.
* supercite.el file:                    Version 3 Changes.
* toggling variables:                   Variable Toggling Shortcuts.
* unciting:                             Frames You Can Customize.
* undo boundary:                        Reply Buffer Initialization.
* yank:                                 Usage Overview.


File: sc,  Node: Command Index,  Next: Key Index,  Prev: Concept Index,  Up: Top

Command Index
*************

   Since all supercite commands are prepended with the string "`sc-'",
each appears under its `sc-'COMMAND name and its COMMAND name.

* Menu:

* add-hook:                             Emacs 18 MUAs.
* add-hook:                             MH-E with any Emacsen.
* cite-original (sc-):                  Getting Connected.
* cite-original (sc-):                  Reply Buffer Initialization.
* cite-region (sc-):                    Citing Commands.
* defvar:                               Hints to MUA Authors.
* describe (sc-):                       Miscellaneous Commands.
* eref-abort (sc-):                     Electric References.
* eref-exit (sc-):                      Electric References.
* eref-goto (sc-):                      Electric References.
* eref-jump (sc-):                      Electric References.
* eref-next (sc-):                      Electric References.
* eref-prev (sc-):                      Electric References.
* eref-setn (sc-):                      Electric References.
* eval:                                 Using Regi.
* fill-paragraph:                       What Supercite Does.
* header-attributed-writes (sc-):       The Built-in Header Rewrite Functions.
* header-author-writes (sc-):           The Built-in Header Rewrite Functions.
* header-inarticle-writes (sc-):        The Built-in Header Rewrite Functions.
* header-on-said (sc-):                 The Built-in Header Rewrite Functions.
* header-regarding-adds (sc-):          The Built-in Header Rewrite Functions.
* header-verbose (sc-):                 The Built-in Header Rewrite Functions.
* insert-citation (sc-):                Insertion Commands.
* insert-reference (sc-):               Insertion Commands.
* looking-at:                           Using Regi.
* mail-field (sc-):                     Attribution Preferences.
* mail-field (sc-):                     Information Keys and the Info Alist.
* mail-field-query (sc-):               Mail Field Commands.
* mail-process-headers (sc-):           Mail Field Commands.
* mail-yank-original:                   Hints to MUA Authors.
* no-blank-line-or-header (sc-):        The Built-in Header Rewrite Functions.
* no-header (sc-):                      The Built-in Header Rewrite Functions.
* open-line:                            Miscellaneous Commands.
* open-line (sc-):                      Miscellaneous Commands.
* perform-overloads (sc-):              GNEWS with any Emacsen.
* recite-region (sc-):                  Citing Commands.
* regi-interpret:                       Using Regi.
* sc-cite-original:                     Reply Buffer Initialization.
* sc-cite-original:                     What Supercite Does.
* sc-cite-original:                     Getting Connected.
* sc-cite-region:                       Citing Commands.
* sc-describe:                          Miscellaneous Commands.
* sc-eref-abort:                        Electric References.
* sc-eref-exit:                         Electric References.
* sc-eref-goto:                         Electric References.
* sc-eref-jump:                         Electric References.
* sc-eref-next:                         Electric References.
* sc-eref-prev:                         Electric References.
* sc-eref-setn:                         Electric References.
* sc-header-attributed-writes:          The Built-in Header Rewrite Functions.
* sc-header-author-writes:              The Built-in Header Rewrite Functions.
* sc-header-inarticle-writes:           The Built-in Header Rewrite Functions.
* sc-header-on-said:                    The Built-in Header Rewrite Functions.
* sc-header-regarding-adds:             The Built-in Header Rewrite Functions.
* sc-header-verbose:                    The Built-in Header Rewrite Functions.
* sc-insert-citation:                   Insertion Commands.
* sc-insert-reference:                  Insertion Commands.
* sc-mail-field:                        Information Keys and the Info Alist.
* sc-mail-field:                        Attribution Preferences.
* sc-mail-field-query:                  Mail Field Commands.
* sc-mail-process-headers:              Mail Field Commands.
* sc-no-blank-line-or-header:           The Built-in Header Rewrite Functions.
* sc-no-header:                         The Built-in Header Rewrite Functions.
* sc-open-line:                         Miscellaneous Commands.
* sc-perform-overloads:                 Overloading for Non-conforming MUAs.
* sc-perform-overloads:                 GNEWS with any Emacsen.
* sc-recite-region:                     Citing Commands.
* sc-setup-filladapt:                   Filling Cited Text.
* sc-submit-bug-report:                 Miscellaneous Commands.
* sc-submit-bug-report:                 Getting Connected.
* sc-uncite-region:                     Citing Commands.
* sc-version:                           Miscellaneous Commands.
* set-variable:                         Variable Toggling Shortcuts.
* setq:                                 Emacs 18 MUAs.
* setup-filladapt (sc-):                Filling Cited Text.
* string-match:                         Frames You Can Customize.
* submit-bug-report (sc-):              Getting Connected.
* submit-bug-report (sc-):              Miscellaneous Commands.
* uncite-region (sc-):                  Citing Commands.
* version (sc-):                        Miscellaneous Commands.

