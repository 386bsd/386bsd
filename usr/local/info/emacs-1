This is Info file ../info/emacs, produced by Makeinfo-1.54 from the
input file emacs.texi.


File: emacs,  Node: Top,  Next: Distrib,  Prev: (dir),  Up: (dir)

The Emacs Editor
****************

   Emacs is the extensible, customizable, self-documenting real-time
display editor.  This Info file describes how to edit with Emacs and
some of how to customize it, but not how to extend it.  It corresponds
to GNU Emacs version 19.25.

* Menu:

* Distrib::	      How to get the latest Emacs distribution.
* Copying::	      The GNU General Public License gives you permission
			to redistribute GNU Emacs on certain terms;
			it also explains that there is no warranty.
* Intro::	      An introduction to Emacs concepts.
* Glossary::	      The glossary.
* Manifesto::	      What's GNU?  Gnu's Not Unix!
* Antinews::	      Information about Emacs version 18.

Indexes, nodes containing large menus
* Key Index::	      An item for each standard Emacs key sequence.
* Command Index::     An item for each command name.
* Variable Index::    An item for each documented variable.
* Concept Index::     An item for each concept.

Important General Concepts
* Screen::	      How to interpret what you see on the screen.
* User Input::	      Kinds of input events (characters, buttons,
                        function keys).
* Keys::	      Key sequences: what you type to request one
                        editing action.
* Commands::	      Named functions run by key sequences to do editing.
* Text Characters::   Character set for text (the contents of buffers
			and strings).
* Entering Emacs::    Starting Emacs from the shell.
* Exiting::	      Stopping or killing Emacs.
* Command Arguments:: Hairy startup options.

Fundamental Editing Commands
* Basic::	      The most basic editing commands.
* Undo::	      Undoing recently made changes in the text.
* Minibuffer::	      Entering arguments that are prompted for.
* M-x::		      Invoking commands by their names.
* Help::	      Commands for asking Emacs about its commands.

Important Text-Changing Commands
* Mark::	      The mark: how to delimit a "region" of text.
* Killing::	      Killing text.
* Yanking::	      Recovering killed text.  Moving text.
* Accumulating Text:: Other ways of copying text.
* Rectangles::	      Operating on the text inside a rectangle on the screen.
* Registers::	      Saving a text string or a location in the buffer.
* Display::	      Controlling what text is displayed.
* Search::	      Finding or replacing occurrences of a string.
* Fixit::	      Commands especially useful for fixing typos.

Larger Units of Text
* Files::	      All about handling files.
* Buffers::	      Multiple buffers; editing several files at once.
* Windows::	      Viewing two pieces of text at once.
* Frames::	      Running the same Emacs session in multiple X windows.

Advanced Features
* Major Modes::	      Text mode vs. Lisp mode vs. C mode ...
* Indentation::	      Editing the white space at the beginnings of lines.
* Text::	      Commands and modes for editing English.
* Programs::	      Commands and modes for editing programs.
* Building::	      Compiling, running and debugging programs.
* Abbrevs::	      How to define text abbreviations to reduce
			the number of characters you must type.
* Picture::	      Editing pictures made up of characters
			using the quarter-plane screen model.
* Sending Mail::      Sending mail in Emacs.
* Rmail::	      Reading mail in Emacs.
* Dired::	      You can "edit" a directory to manage files in it.
* Calendar/Diary::    The calendar and diary facilities.
* GNUS::	      How to read netnews with Emacs.
* Sorting::	      Sorting lines, paragraphs or pages within Emacs.
* Shell::	      Executing shell commands from Emacs.
* Narrowing::	      Restricting display and editing to a portion
			of the buffer.
* Hardcopy::	      Printing buffers or regions.
* Two-Column::	      Splitting apart columns to edit them
			 in side-by-side windows.
* Editing Binary Files:: Using Hexl mode to edit binary files.
* Emacs Server::      Using Emacs as an editing server for `mail', etc.
* Saving Emacs Sessions:: Saving Emacs state from one session to the next.
* Recursive Edit::    A command can allow you to do editing
			"within the command".  This is called a
			`recursive editing level'.
* Dissociated Press:: Dissociating text for fun.
* Amusements::	      Various games and hacks.
* Emulation::	      Emulating some other editors with Emacs.
* Customization::     Modifying the behavior of Emacs.

Recovery from Problems.
* Quitting::	      Quitting and aborting.
* Lossage::	      What to do if Emacs is hung or malfunctioning.
* Bugs::	      How and when to report a bug.
* Service::	      How to get help for your own Emacs needs.

Here are some other nodes which are really inferiors of the ones
already listed, mentioned here so you can get to them in one step:

 -- The Detailed Node Listing --

The Organization of the Screen

* Point::	The place in the text where editing commands operate.
* Echo Area::   Short messages appear at the bottom of the screen.
* Mode Line::	Interpreting the mode line.

Basic Editing Commands

* Inserting Text::     Inserting text by simply typing it.
* Moving Point::       How to move the cursor to the place where you want to
			 change something.
* Erasing::	       Deleting and killing text.
* Files: Basic Files.  Visiting, creating, and saving files.
* Help: Basic Help.    Asking what a character does.
* Blank Lines::	       Commands to make or delete blank lines.
* Continuation Lines:: Lines too wide for the screen.
* Position Info::      What page, line, row, or column is point on?
* Arguments::	       Numeric arguments for repeating a command.

The Minibuffer

* File: Minibuffer File.  Entering file names with the minibuffer.
* Edit: Minibuffer Edit.  How to edit in the minibuffer.
* Completion::		  An abbreviation facility for minibuffer input.
* Minibuffer History::	  Reusing recent minibuffer arguments.
* Repetition::		  Re-executing commands that used the minibuffer.

Completion

* Example: Completion Example.
* Commands: Completion Commands.
* Strict Completion::
* Options: Completion Options.

Help

* Help Summary::	Brief list of all Help commands.
* Key Help::		Asking what a key does in Emacs.
* Name Help::		Asking about a command, variable or function name.
* Apropos::		Asking what pertains to a given topic.
* Library Keywords::	Finding Lisp libraries by keywords (topics).
* Misc Help::		Other help commands.

The Mark and the Region

* Setting Mark::	Commands to set the mark.
* Transient Mark::	How to make Emacs highlight the region-
			  when there is one.
* Using Region::	Summary of ways to operate on contents of the region.
* Marking Objects::	Commands to put region around textual units.
* Mark Ring::		Previous mark positions saved so you can go back there.
* Global Mark Ring::	Previous mark positions in various buffers.

Deletion and Killing

* Deletion::		Commands for deleting small amounts of text and
			  blank areas.
* Killing by Lines::	How to kill entire lines of text at one time.
* Other Kill Commands:: Commands to kill large regions of text and
			  syntactic units such as words and sentences.

Yanking

* Kill Ring::		Where killed text is stored.  Basic yanking.
* Appending Kills::	Several kills in a row all yank together.
* Earlier Kills::	Yanking something killed some time ago.

Registers

* Position: RegPos.	      Saving positions in registers.
* Text: RegText.	      Saving text in registers.
* Rectangle: RegRect.	      Saving rectangles in registers.
* Configurations: RegConfig.  Saving window configurations in registers.
* Files: RegFiles.	      File names in registers.
* Bookmarks::                 Bookmarks are like registers, but persistent.

Controlling the Display

* Scrolling::		   Moving text up and down in a window.
* Horizontal Scrolling::   Moving text left and right in a window.
* Selective Display::	   Hiding lines with lots of indentation.
* Optional Display::	   Optional display features.
* European Display::	   Displaying (and inputing) European characters.
* Display Vars::	   Information on variables for customizing display.

Searching and Replacement

* Incremental Search::	   Search happens as you type the string.
* Nonincremental Search::  Specify entire string and then search.
* Word Search::		   Search for sequence of words.
* Regexp Search::	   Search for match for a regexp.
* Regexps::		   Syntax of regular expressions.
* Search Case::		   To ignore case while searching, or not.
* Replace::		   Search, and replace some or all matches.
* Other Repeating Search:: Operating on all matches for some regexp.

Replacement Commands

* Unconditional Replace::  Replacing all matches for a string.
* Regexp Replace::	   Replacing all matches for a regexp.
* Replacement and Case::   How replacements preserve case of letters.
* Query Replace::	   How to use querying.

Commands for Fixing Typos

* Kill Errors:: Commands to kill a batch of recently entered text.
* Transpose::	Exchanging two characters, words, lines, lists...
* Fixing Case:: Correcting case of last word entered.
* Spelling::	Apply spelling checker to a word, or a whole file.

File Handling

* File Names::	     How to type and edit file name arguments.
* Visiting::	     Visiting a file prepares Emacs to edit the file.
* Saving::	     Saving makes your changes permanent.
* Reverting::	     Reverting cancels all the changes not saved.
* Auto Save::	     Auto Save periodically protects against loss of data.
* File Aliases::     Handling multiple names for one file.
* Version Control::  Version control systems (RCS and SCCS).
* ListDir::	     Listing the contents of a file directory.
* Comparing Files::  Finding where two files differ.
* Misc File Ops::    Other things you can do on files.

Saving Files

* Backup::	  How Emacs saves the old version of your file.
* Interlocking::  How Emacs protects against simultaneous editing
		    of one file by two users.

Backup Files

* Names: Backup Names.		How backup files are named;
				  choosing single or numbered backup files.
* Deletion: Backup Deletion.	Emacs deletes excess numbered backups.
* Copying: Backup Copying.	Backups can be made by copying or renaming.

Auto-Saving: Protection Against Disasters

* Files: Auto Save Files.	The file where auto-saved changes are
				  actually made until you save the file.
* Control: Auto Save Control.	Controlling when and how often to auto-save.
* Recover::			Recovering text from auto-save files.

Version Control

* Concepts of VC::		Basic version control information;
				  checking files in and out.
* Editing with VC::		Commands for editing a file maintained
				  with version control.
* Variables for Check-in/out::	Variables that affect the commands used
				  to check files in or out.
* Log Entries::			Logging your changes.
* Change Logs and VC::		Generating a change log file from log
				  entries.
* Old Versions::		Examining and comparing old versions.
* VC Status::			Commands to view the VC status of files and
				  look at log entries.
* Renaming and VC::		A command to rename both the source and
				  master file correctly.
* Snapshots::			How to make and use snapshots, a set of
				  file versions that can be treated as a unit.
* Version Headers::		Inserting version control headers into
				  working files.

Snapshots

* Making Snapshots::		The snapshot facilities.
* Snapshot Caveats::		Things to be careful of when using snapshots.

Using Multiple Buffers

* Select Buffer::      Creating a new buffer or reselecting an old one.
* List Buffers::       Getting a list of buffers that exist.
* Misc Buffer::	       Renaming; changing read-onliness; copying text.
* Kill Buffer::	       Killing buffers you no longer need.
* Several Buffers::    How to go through the list of all buffers
			 and operate variously on several of them.

Multiple Windows

* Basic Window::       Introduction to Emacs windows.
* Split Window::       New windows are made by splitting existing windows.
* Other Window::       Moving to another window or doing something to it.
* Pop Up Window::      Finding a file or buffer in another window.
* Change Window::      Deleting windows and changing their sizes.

Frames and X Windows

* Mouse Commands::     Moving, cutting, and pasting, with the mouse.
* Secondary Selection::Cutting without altering point and mark.
* Selecting Mouse::    Using the mouse to select an item from a list.
* Mode Line Mouse::    Mouse clicks on the mode line.
* Creating Frames::    Creating additional Emacs frames with various contents.
* Special Buffer Frames::  You can make certain buffers have their own frames.
* Frame Parameters::   Changing the colors and other modes of frames.
* Scroll Bars::	       How to enable and disable scroll bars; how to use them.
* Menu Bars::	       Enabling and disabling the menu bar.
* Faces::	       How to change the display style using faces.
* Modifying Faces::    How to change what a particular face looks like.
* Misc X::	       Iconifying and deleting frames.	Region highlighting.

Major Modes

* Choosing Modes::     How major modes are specified or chosen.

Indentation

* Indentation Commands::  Various commands and techniques for indentation.
* Tab Stops::		  You can set arbitrary "tab stops" and then
			    indent to the next tab stop when you want to.
* Just Spaces::		  You can request indentation using just spaces.

Commands for Human Languages

* Words::	  Moving over and killing words.
* Sentences::	  Moving over and killing sentences.
* Paragraphs::	  Moving over paragraphs.
* Pages::	  Moving over pages.
* Filling::	  Filling or justifying text.
* Case::	  Changing the case of text.
* Text Mode::	  The major modes for editing text files.
* Outline Mode::  The major mode for editing outlines.
* TeX Mode::	  The major modes for editing input to the formatter TeX.
* Nroff Mode::	  The major mode for editing input to the formatter nroff.

Filling Text

* Auto Fill::	  Auto Fill mode breaks long lines automatically.
* Fill Commands:: Commands to refill paragraphs and center lines.
* Fill Prefix::	  Filling when every line is indented or in a comment, etc.

Text Mode

* Nroff Mode::	  The major mode for editing input to the formatter nroff.
* TeX Mode::	  The major modes for editing input to the formatter TeX.
* Outline Mode::  The major mode for editing outlines.

Outline Mode

* Format: Outline Format.	   What the text of an outline looks like.
* Motion: Outline Motion.	   Special commands for moving through
				     outlines.
* Visibility: Outline Visibility.  Commands to control what is visible.

TeX Mode

* Editing: TeX Editing.	  Special commands for editing in TeX mode.
* LaTeX: LaTeX Editing.	  Additional commands for LaTeX input files.
* Printing: TeX Print.	  Commands for printing part of a file with TeX.
* Getting: TeX Distrib.	  Getting the latest Unix TeX distribution.

Editing Programs

* Program Modes::     Major modes for editing programs.
* Lists::	      Expressions with balanced parentheses.
* List Commands::     The commands for working with list and sexps.
* Defuns::	      Each program is made up of separate functions.
			There are editing commands to operate on them.
* Program Indent::    Adjusting indentation to show the nesting.
* Matching::	      Insertion of a close-delimiter flashes matching open.
* Comments::	      Inserting, killing, and aligning comments.
* Balanced Editing::  Inserting two matching parentheses at once, etc.
* Symbol Completion:: Completion on symbol names of your program or language.
* Documentation::     Getting documentation of functions you plan to call.
* Change Log::	      Maintaining a change history for your program.
* Tags::	      Go direct to any function in your program in one
			command.  Tags remembers which file it is in.
* Emerge::	      A convenient way of merging two versions of a program.
* C Mode::	      Special commands of C mode (and C++ mode).
* Fortran::	      Fortran mode and its special features.
* Asm Mode::	      Asm mode and its special features.

Indentation for Programs

* Basic Indent::	Indenting a single line.
* Multi-line Indent::	Commands to reindent many lines at once.
* Lisp Indent::		Specifying how each Lisp function should be indented.
* C Indent::		Choosing an indentation style for C code.

Tag Tables

* Tag Syntax::		Tag syntax for various types of code and text files.
* Create Tag Table::	Creating a tag table with `etags'.
* Select Tag Table::	How to visit a tag table.
* Find Tag::		Commands to find the definition of a specific tag.
* Tags Search::		Using a tag table for searching and replacing.
* Tags Stepping::	Visiting files in a tag table, one by one.
* List Tags::		Listing and finding tags defined in a file.

Merging Files with Emerge

* Overview of Emerge::	    How to start Emerge.  Basic concepts.
* Submodes of Emerge::	    Fast mode vs. Edit mode.
			      Skip Prefers mode and Auto Advance mode.
* State of Difference::	    You do the merge by specifying state A or B
			      for each difference.
* Merge Commands::	    Commands for selecting a difference,
			      changing states of differences, etc.
* Exiting Emerge::	    What to do when you've finished the merge.
* Combining in Emerge::	    How to keep both alternatives for a difference.
* Fine Points of Emerge::   Misc.

Fortran Mode

* Motion: Fortran Motion.	 Moving point by statements or subprograms.
* Indent: Fortran Indent.	 Indentation commands for Fortran.
* Comments: Fortran Comments.	 Inserting and aligning comments.
* Autofill: Fortran Autofill.	 Auto fill minor mode for Fortran.
* Columns: Fortran Columns.	 Measuring columns for valid Fortran.
* Abbrev: Fortran Abbrev.	 Built-in abbrevs for Fortran keywords.

Fortran Indentation

* Commands: ForIndent Commands.	 Commands for indenting Fortran.
* Contline: ForIndent Cont.	 How continuation lines indent.
* Numbers:  ForIndent Num.	 How line numbers auto-indent.
* Conv:	    ForIndent Conv.	 Conventions you must obey to avoid trouble.
* Vars:	    ForIndent Vars.	 Variables controlling Fortran indent style.

Compiling and Testing Programs

* Compilation::			  Compiling programs in languages other
				    than Lisp (C, Pascal, etc.)
* Debuggers::			  Running symbolic debuggers for
				    non-Lisp programs.
* Executing Lisp::		  Various modes for editing Lisp programs,
				    with different facilities for running
				    the Lisp programs.
* Libraries: Lisp Libraries.	  Creating Lisp programs to run in Emacs.
* Interaction: Lisp Interaction.  Executing Lisp in an Emacs buffer.
* Eval: Lisp Eval.		  Executing a single Lisp expression in Emacs.
* External Lisp::		  Communicating through Emacs with a
				    separate Lisp.

Running Debuggers Under Emacs

* Starting GUD::	How to start a debugger subprocess.
* Debugger Operation::	Connection between the debugger and source buffers.
* Commands of GUD::	Keybindings for common commands.
* GUD Customization::	Defining your own commands for GUD.

Editing Programs

* Lists::	      Expressions with balanced parentheses.
* List Commands::     The commands for working with list and sexps.
* Defuns::	      Each program is made up of separate functions.
			There are editing commands to operate on them.
* Program Indent::    Adjusting indentation to show the nesting.
* Matching::	      Insertion of a close-delimiter flashes matching open.
* Comments::	      Inserting, killing, and aligning comments.

Abbrevs

* Defining Abbrevs::  Defining an abbrev, so it will expand when typed.
* Expanding Abbrevs:: Controlling expansion: prefixes, canceling expansion.
* Editing Abbrevs::   Viewing or editing the entire list of defined abbrevs.
* Saving Abbrevs::    Saving the entire list of abbrevs for another session.
* Dynamic Abbrevs::   Abbreviations for words already in the buffer.

Editing Pictures

* Basic Picture::	  Basic concepts and simple commands of Picture Mode.
* Insert in Picture::	  Controlling direction of cursor motion
			    after "self-inserting" characters.
* Tabs in Picture::	  Various features for tab stops and indentation.
* Rectangles in Picture:: Clearing and superimposing rectangles.

Sending Mail

* Format: Mail Format.	     Format of the mail being composed.
* Headers: Mail Headers.     Details of permitted mail header fields.
* Aliases: Mail Aliases.     Abbreviating and grouping mail addresses.
* Mode: Mail Mode.	     Special commands for editing mail being composed.
* Spook: Distracting NSA.    How to distract the NSA's attention.

Reading Mail with Rmail

* Scroll: Rmail Scrolling.   Scrolling through a message.
* Motion: Rmail Motion.	     Moving to another message.
* Deletion: Rmail Deletion.  Deleting and expunging messages.
* Inbox: Rmail Inbox.	     How mail gets into the Rmail file.
* Files: Rmail Files.	     Using multiple Rmail files.
* Output: Rmail Output.	     Copying message out to files.
* Labels: Rmail Labels.	     Classifying messages by labeling them.
* Reply: Rmail Reply.	     Sending replies to messages you are viewing.
* Summary: Rmail Summary.    Summaries show brief info on many messages.
* Display: Rmail Display.    How Rmail displays a message; customization.
* Editing: Rmail Editing.    Editing message text and headers in Rmail.
* Digest: Rmail Digest.	     Extracting the messages from a digest message.
* Out of Rmail::	     Converting an Rmail file to mailbox format.
* Rot13: Rmail Rot13.	     Reading messages encoded in the rot13 code.

Summaries

* Rmail Make Summary::	     Making various sorts of summaries.
* Rmail Summary Edit::	     Manipulating messages from the summary.

Dired, the Directory Editor

* Enter: Dired Enter.	      How to invoke Dired.
* Commands: Dired Commands.   Commands in the Dired buffer.
* Deletion: Dired Deletion.   Deleting files with Dired.
* Visit: Dired Visiting.      Other file operations through Dired.
* Marks vs Flags::	      Flagging for deletion vs marking.
* Operating on Files::	      How to copy, rename, print, compress, etc.
				either one file or several files.
* Shell Commands in Dired::   Running a shell command on the marked files.
* Transforming File Names::   Using patterns to rename multiple files.
* Comparison in Dired::	      Running `diff' by way of Dired.
* Subdirectories in Dired::   Adding subdirectories to the Dired buffer.
* Subdirectory Motion::	      Moving across subdirectories, and up and down.
* Hiding Subdirectories::     Making subdirectories visible or invisible.
* Updating: Dired Updating.   Discarding lines for files of no interest.
* Find: Dired and Find.	      Using `find' to choose the files for Dired.

The Calendar and the Diary

* Calendar Motion::	  Moving through the calendar; selecting a date.
* Scroll Calendar::	  Bringing earlier or later months onto the screen.
* Counting Days::	  How many days are there between two dates?
* General Calendar::	  Exiting or recomputing the calendar.
* Holidays::		  Displaying dates of holidays.
* Sunrise/Sunset::	  Displaying local times of sunrise and sunset.
* Lunar Phases::	  Displaying phases of the moon.
* Other Calendars::	  Converting dates to other calendar systems.
* Diary::		  Displaying events from your diary.
* Appointments::	  Reminders when it's time to do something.
* Daylight Savings::	  How to specify when daylight savings time is active.

Movement in the Calendar

* Calendar Unit Motion::      Moving by days, weeks, months, and years.
* Move to Beginning or End::  Moving to start/end of weeks, months, and years.
* Specified Dates::	      Moving to the current date or another
				specific date.

Conversion To and From Other Calendars

* Calendar Systems::	   The calendars Emacs understands
			     (aside from Gregorian).
* To Other Calendar::	   Converting the selected date to various calendars.
* From Other Calendar::	   Moving to a date specified in another calendar.
* Mayan Calendar::	   Moving to a date specified in a Mayan calendar.

The Diary

* Diary Commands::	   Viewing diary entries and associated calendar dates.
* Format of Diary File::   Entering events in your diary.
* Date Formats::	   Various ways you can specify dates.
* Adding to Diary::	   Commands to create diary entries.
* Special Diary Entries::  Anniversaries, blocks of dates, cyclic entries, etc.

GNUS

* Buffers of GNUS::	   The Newsgroups, Summary and Article buffers.
* GNUS Startup::	   What you should know about starting GNUS.
* Summary of GNUS::	   A short description of the basic GNUS commands.

Running Shell Commands from Emacs

* Single Shell::	   How to run one shell command and return.
* Interactive Shell::	   Permanent shell taking input via Emacs.
* Shell Mode::		   Special Emacs commands used with permanent shell.
* History: Shell History.  Repeating previous commands in a shell buffer.
* Options: Shell Options.  Options for customizing Shell mode.
* Remote Host::		   Connecting to another computer.

Shell Command History

* Ring: Shell Ring.		Fetching commands from the history list.
* Copy: Shell History Copying.	Moving to a command and then copying it.
* History References::		Expanding `!'-style history references.

Customization

* Minor Modes::		   Each minor mode is one feature you can turn on
			     independently of any others.
* Variables::		   Many Emacs commands examine Emacs variables
			     to decide what to do; by setting variables,
			     you can control their functioning.
* Keyboard Macros::	   A keyboard macro records a sequence of
			     keystrokes to be replayed with a single
			     command.
* Key Bindings::	   The keymaps say what command each key runs.
			     By changing them, you can "redefine keys".
* Keyboard Translations::  If your keyboard passes an undesired code
			     for a key, you can tell Emacs to
			     substitute another code.
* Syntax::		   The syntax table controls how words and
			      expressions are parsed.
* Init File::		   How to write common customizations in the
			     `.emacs' file.

Variables

* Examining::	     Examining or setting one variable's value.
* Edit Options::     Examining or editing list of all variables' values.
* Hooks::	     Hook variables let you specify programs for parts
		       of Emacs to run on particular occasions.
* Locals::	     Per-buffer values of variables.
* File Variables::   How files can specify variable values.

Keyboard Macros

* Basic Kbd Macro::  Defining and running keyboard macros.
* Save Kbd Macro::   Giving keyboard macros names; saving them in files.
* Kbd Macro Query::  Keyboard macros that do different things each use.

Customizing Key Bindings

* Keymaps::	     Generalities.  The global keymap.
* Prefix Keymaps::   Keymaps for prefix keys.
* Local Keymaps::    Major and minor modes have their own keymaps.
* Minibuffer Maps::  The minibuffer uses its own local keymaps.
* Rebinding::	     How to redefine one key's meaning conveniently.
* Init Rebinding::   Rebinding keys with your init file, `.emacs'.
* Function Keys::    Rebinding terminal function keys.
* Named ASCII Chars::Distinguishing TAB from `C-i', and so on.
* Mouse Buttons::    Rebinding mouse buttons in Emacs.
* Disabling::	     Disabling a command means confirmation is required
		       before it can be executed.  This is done to protect
		       beginners from surprises.

The Init File, `~/.emacs'

* Init Syntax::	     Syntax of constants in Emacs Lisp.
* Init Examples::    How to do some things with an init file.
* Terminal Init::    Each terminal type can have an init file.
* Find Init::	     How Emacs finds the init file.

Dealing with Emacs Trouble

* DEL Gets Help::	What to do if DEL doesn't delete.
* Stuck Recursive::	`[...]' in mode line around the parentheses.
* Screen Garbled::	Garbage on the screen.
* Text Garbled::	Garbage in the text.
* Unasked-for Search::	Spontaneous entry to incremental search.
* Emergency Escape::	Emergency escape--
			  What to do if Emacs stops responding.
* Total Frustration::	When you are at your wits' end.

Reporting Bugs

* Criteria:  Bug Criteria.	 Have you really found a bug?
* Understanding Bug Reporting::	 How to report a bug effectively.
* Checklist::			 Steps to follow for a good bug report.
* Sending Patches::		 How to send a patch for GNU Emacs.

Command Line Options and Arguments

* Ordinary Arguments::	Arguments to visit files, load libraries,
			  and call functions.
* Initial Options::	Arguments that must come at the start of the command.
* Command Example::	Examples of using command line arguments.
* Resume Arguments::	Specifying arguments when you resume a running Emacs.
* Environment::		Environment variables that Emacs uses.

* Display X::		Changing the default display and using remote login.
* Font X::		Choosing a font for text, under X.
* Colors X::		Choosing colors, under X.
* Window Size X::	Start-up window size, under X.
* Borders X::		Internal and external borders, under X.
* Icons X::		Choosing what sort of icon to use, under X.
* Resources X::		Advanced use of classes and resources, under X.

Environment Variables

* General Variables::	  Environment variables that all versions of Emacs use.
* MSDOG Variables::	  Variables specific to the MsDos operating system.
* Misc Variables::	  Certain system specific variables.


File: emacs,  Node: Distrib,  Next: Copying,  Prev: Top,  Up: Top

Distribution
************

   GNU Emacs is "free"; this means that everyone is free to use it and
free to redistribute it on certain conditions.  GNU Emacs is not in the
public domain; it is copyrighted and there are restrictions on its
distribution, but these restrictions are designed to permit everything
that a good cooperating citizen would want to do.  What is not allowed
is to try to prevent others from further sharing any version of GNU
Emacs that they might get from you.  The precise conditions are found in
the GNU General Public License that comes with Emacs and also appears
following this section.

   The easiest way to get a copy of GNU Emacs is from someone else who
has it.  You need not ask for permission to do so, or tell any one else;
just copy it.  If you have access to the Internet, you can get the
latest distribution version of GNU Emacs from host `prep.ai.mit.edu'
using anonymous login.  See the file `/pub/gnu/GETTING.GNU.SOFTWARE' on
that host to find out about your options for copying and which files to
use.

   You may also receive GNU Emacs when you buy a computer.  Computer
manufacturers are free to distribute copies on the same terms that
apply to everyone else.  These terms require them to give you the full
sources, including whatever changes they may have made, and to permit
you to redistribute the GNU Emacs received from them under the usual
terms of the General Public License.  In other words, the program must
be free for you when you get it, not just free for the manufacturer.

   You can also order copies of GNU Emacs from the Free Software
Foundation, on various magnetic media or on CD-ROM.  This is a
convenient and reliable way to get a copy; it is also a good way to help
fund our work.  (The Foundation has always received most of its funds in
this way.)  An order form is included at the end of manuals printed by
the Foundation.  It is also included in the file `etc/ORDERS' in the
Emacs distribution.  For further information, write to

     Free Software Foundation
     675 Mass Ave
     Cambridge, MA 02139
     USA

   The income from distribution fees goes to support the foundation's
purpose: the development of new free software, and improvements to our
existing programs including GNU Emacs.

   If you find GNU Emacs useful, please *send a donation* to the Free
Software Foundation to support our work.  Donations to the Free
Software Foundation are tax deductible.  If you use GNU Emacs at your
workplace, suggest that the company make a donation.  If the management
of your office opposes the idea of donations, you might instead suggest
ordering a CD-ROM from the Foundation occasionally.

