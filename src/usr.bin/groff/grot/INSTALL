1. Get a C++ compiler.  The C++ source files use a suffix of `.cc', so
your C++ compiler must be able to handle this.  If you don't already
have a C++ compiler, I suggest gcc 2.3.1 or later (gcc version 2
includes GNU C++ as well as GNU C). If you are using gcc or g++ as
your C++ compiler, you will also need to install the corresponding
version of libg++, unless your system header files provide C++
support.

2. In the directory that this file is in, type `./configure'.  If
you're using `csh' on an old version of System V, you might need to
type `sh configure' instead to prevent `csh' from trying to execute
`configure' itself.

The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation, and
creates the Makefile.  It also creates a file `config.status' that you
can run in the future to recreate the current configuration.

Running `configure' takes a minute or two.  While it is running, it
prints some messages that tell what it is doing.  It also performs
some checks on your C++ compiler.  If these checks fail, it will print
a message and exit.  In this case, you should correct the problems
with your C++ compiler and then rerun configure.

To compile the package in a different directory from the one
containing the source code, you must use GNU make (or a version of
make that supports VPATH in the same way as GNU make).  `cd' to the
directory where you want the object files and executables to go and
run `configure'.  `configure' automatically checks for the source code
in the directory that `configure' is in and in `..'.  If for some
reason `configure' is not in the source code directory that you are
configuring, then it will report that it can't find the source code.
In that case, run `configure' with the option `--srcdir=DIR', where
DIR is the directory that contains the source code.

By default, `make install' will install the package's files in
/usr/local/bin, /usr/local/lib/groff, and /usr/local/man.  You can
specify an installation prefix other than /usr/local by giving
`configure' the option `--prefix=PATH'.  Alternately, you can do so by
changing the `prefix' variable in the Makefile that `configure'
creates.

You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If
you give `configure' the option `--exec_prefix=PATH', the package will
use PATH as the prefix for installing programs and libraries.  Data
files and documentation will still use the regular prefix.  Normally,
all files are installed using the regular prefix.

You can tell `configure' to figure out the configuration for your
system, and record it in `config.status', without actually configuring
the package (creating `Makefile's and perhaps a configuration header
file).  To do this, give `configure' the `--no-create' option.  Later,
you can run `./config.status' to actually configure the package.  This
option is useful mainly in `Makefile' rules for updating `config.status'
and `Makefile'.  You can also give `config.status' the `--recheck'
option, which makes it re-run `configure' with the same arguments you
used before.  This is useful if you change `configure'.

`configure' ignores any other arguments that you give it.

If your system requires unusual options for compilation or linking
that `configure' doesn't know about, you can give `configure' initial
values for some variables by setting them in the environment.  In
Bourne-compatible shells, you can do that on the command line like
this:
	CC='gcc -traditional' DEFS=-D_POSIX_SOURCE ./configure

The `make' variables that you might want to override with environment
variables when running `configure' are:

(For these variables, any value given in the environment overrides the
value that `configure' would choose:)
CC		C compiler program.
		Default is `cc', or `gcc' if `gcc' is in your PATH.
CCC		C++ compiler program (for .cc files).
		By default, configure will look for gcc version 2, g++,
		and then CC.
INSTALL		Program to use to install files.
		Default is `install' if you have it, `cp' otherwise.
PAGE		This should be `A4' if your PostScript printer uses
		A4 paper and `letter' if your printer uses 8.5x11in
		paper.

(For these variables, any value given in the environment is added to
the value that `configure' chooses:)
DEFS		Configuration options, in the form `-Dfoo -Dbar ...'
LIBS		Libraries to link with, in the form `-lfoo -lbar ...'
CCLIBS		Libraries to link C++ programs with, in the same form.


If you need to do unusual things to compile the package, we encourage
you to figure out how `configure' could check whether to do them, and
mail diffs or instructions to the address given in the README so we
can include them in the next release.

3. Have a look at the generated Makefile.  The options you are most
likely to want to change are near the beginning.  Make sure that the
definition of PAGE is correct.

4. Type `make'.

5. Use the test-groff script to try groff out on one of the man pages.
(Use the .n files not the .man files.)  The test-groff script sets up
environment variables to allow groff to run without being installed.
The current directory must be the build directory when the script is
run.  For example, you could do

  ./test-groff -man -Tascii groff/groff.n | less

6. If you want to install gxditview (an X11 previewer), follow the
instructions in the INSTALL file in the xditview directory.

7. Type `make install' to install groff.

8. Try the installed version of groff on one of the man pages.

If you have problems, read the PROBLEMS file.  If this doesn't help
send a bug report using the form in the file BUG-REPORT.
