UN(4)                     386BSD Programmer's Manual                     UN(4)

NNAAMMEE
     uunn - UNIX-domain protocol family

SSYYNNOOPPSSIISS
     $$((NNOONNSSTTDDIINNCC)) ++== $$((IINNCCDDOOMMAAIINN))
     ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
     ##iinncclluuddee <<uunn..hh>>

DDEESSCCRRIIPPTTIIOONN
     The UNIX-domain protocol family is a collection of protocols that
     provides local (on-machine) interprocess communication through the normal
     socket(2) mechanisms.  The UNIX-domain family supports the SOCK_STREAM
     and SOCK_DGRAM socket types and uses filesystem pathnames for addressing.

AADDDDRREESSSSIINNGG
     UNIX-domain addresses are variable-length filesystem pathnames of at most
     104 characters.  The include file <_u_n._h> defines this address:

           struct sockaddr_un {
           u_char  sun_len;
           u_char  sun_family;
           char    sun_path[104];
           };

     Binding a name to a UNIX-domain socket with bind(2) causes a socket file
     to be created in the filesystem.  This file is _n_o_t removed when the
     socket is closed-unlink(2) must be used to remove the file.

     The UNIX-domain protocol family does not support broadcast addressing or
     any form of ``wildcard'' matching on incoming messages.  All addresses
     are absolute- or relative-pathnames of other UNIX-domain sockets.  Normal
     filesystem access-control mechanisms are also applied when referencing
     pathnames; e.g., the destination of a connect(2) or sendto(2) must be
     writable.

PPRROOTTOOCCOOLLSS
     The UNIX-domain protocol family is comprised of simple transport
     protocols that support the SOCK_STREAM and SOCK_DGRAM abstractions.
     SOCK_STREAM sockets also support the communication of UNIX file
     descriptors through the use of the _m_s_g__c_o_n_t_r_o_l field in the _m_s_g argument
     to sendmsg(2) and recvmsg(2).

     Any valid descriptor may be sent in a message.  The file descriptor(s) to
     be passed are described using a _s_t_r_u_c_t _c_m_s_g_h_d_r that is defined in the
     include file <_s_y_s/_s_o_c_k_e_t._h>. The type of the message is SCM_RIGHTS, and
     the data portion of the messages is an array of integers representing the
     file descriptors to be passed.  The number of descriptors being passed is
     defined by the length field of the message; the length field is the sum
     of the size of the header plus the size of the array of file descriptors.

     The received descriptor is a _d_u_p_l_i_c_a_t_e of the sender's descriptor, as if
     it were created with a call to dup(2).  Per-process descriptor flags, set
     with fcntl(2),  are _n_o_t passed to a receiver.  Descriptors that are
     awaiting delivery, or that are purposely not received, are automatically
     closed by the system when the destination socket is closed.

SSEEEE AALLSSOO
     socket(2),  intro(4)

     "An Introductory 4.3 BSD Interprocess Communication Tutorial", _P_S_1, 7.

     "An Advanced 4.3 BSD Interprocess Communication Tutorial", _P_S_1, 8.

HHIISSTTOORRYY
     The UNIX-domain protocol manual currently under development.

BSD Experimental                March 28, 1991                               2































































