VMSPACE(9)             386BSD Kernel Programmer's Manual            VMSPACE(9)

NNAAMMEE
     vvmmssppaaccee - virtual memory program interface functions

SSYYNNOOPPSSIISS
     ##iinncclluuddee ""vvmm..hh""
     ##iinncclluuddee ""vvmmssppaaccee..hh""

     _s_t_r_u_c_t _v_m_s_p_a_c_e *
     vvmmssppaaccee__ffoorrkk(_s_t_r_u_c_t _v_m_s_p_a_c_e *, _s_t_r_u_c_t _p_r_o_c *)

     _v_o_i_d
     vvmmssppaaccee__ffrreeee(_s_t_r_u_c_t _v_m_s_p_a_c_e *)

     _i_n_t
     vvmmssppaaccee__aallllooccaattee(_s_t_r_u_c_t _v_m_s_p_a_c_e *_v_s, _v_m__o_f_f_s_e_t__t *_a_d_d_r, _v_m__s_i_z_e__t _s_i_z_e,
             _i_n_t _f_i_n_d_s_p_a_c_e)

     _v_o_i_d
     vvmmssppaaccee__ddeelleettee(_s_t_r_u_c_t _v_m_s_p_a_c_e *_v_s, _c_a_d_d_r__t _v_a, _u_n_s_i_g_n_e_d _s_z)

     _i_n_t
     vvmmssppaaccee__mmmmaapp(_s_t_r_u_c_t _v_m_s_p_a_c_e *_v_s, _v_m__o_f_f_s_e_t__t *_a_d_d_r, _v_m__s_i_z_e__t _s_i_z_e,
             _v_m__p_r_o_t__t _p_r_o_t, _i_n_t _f_l_a_g_s, _c_a_d_d_r__t _h_a_n_d_l_e, _v_m__o_f_f_s_e_t__t _f_o_f_f)

     _i_n_t
     vvmmssppaaccee__pprrootteecctt(_s_t_r_u_c_t _v_m_s_p_a_c_e *_v_s, _c_a_d_d_r__t _v_a, _u_n_s_i_g_n_e_d _s_z, _i_n_t _s_e_t__m_a_x,
             _v_m__p_r_o_t__t _n_e_w__p_r_o_t)

     _i_n_t
     vvmmssppaaccee__aacccceessss(_s_t_r_u_c_t _v_m_s_p_a_c_e *_v_s, _c_a_d_d_r__t _v_a, _u_n_s_i_g_n_e_d _s_z, _i_n_t _p_r_o_t)

     _v_o_i_d
     vvmmssppaaccee__ppaaggeeaabbllee(_s_t_r_u_c_t _v_m_s_p_a_c_e *_v_s, _c_a_d_d_r__t _v_a, _u_n_s_i_g_n_e_d _s_z)

     _v_o_i_d
     vvmmssppaaccee__nnoottppaaggeeaabbllee(_s_t_r_u_c_t _v_m_s_p_a_c_e *_v_s, _c_a_d_d_r__t _v_a, _u_n_s_i_g_n_e_d _s_z)

     _i_n_t
     vvmmssppaaccee__aaccttiivvaattee(_s_t_r_u_c_t _v_m_s_p_a_c_e *_v_s, _c_a_d_d_r__t _v_a, _u_n_s_i_g_n_e_d _s_z)

     _i_n_t
     vvmmssppaaccee__iinnhheerriitt(_s_t_r_u_c_t _v_m_s_p_a_c_e *_v_s, _c_a_d_d_r__t _v_a, _u_n_s_i_g_n_e_d _s_z,
             _v_m__i_n_h_e_r_i_t__t _n_e_w__i_n_h_e_r_i_t_a_n_c_e)

DDEESSCCRRIIPPTTIIOONN
     Access to the facilities of the virtual memory system is made available
     via the "vmspace" program interface, which provides the methods to create
     new address spaces and allocate contents within them. In addition, the
     attributes and contents of the allocated address space can be adjusted as
     needed by the kernel to suite its needs. These functions can be applied
     to both kernel and user program address spaces, however, the kernel
     program has its own special interfaces as well (see kmem(9)).

     Each program has a small structure (struct vmspace) that is used to
     describe the characteristics of a particular address space. Modifications
     to an address space may be done from other process or thread contexts,
     however they currently may not be done from interrupt level as they may
     block for memory allocation or contention (a special exception is made
     for kernel memory allocation -- see kmem(9)).

     The vvmmssppaaccee__ffoorrkk() function creates a user address space for a new
     process by replicating an existing processes user address space. The
     vvmmssppaaccee__ffrreeee() function reclaims a user address space and any resources
     consumed by it. The vvmmssppaaccee__aallllooccaattee() function reserves a region of
     address space of a requested _s_i_z_e. This region can either begin at a
     specific desired location, or the caller can request that a search for an
     adjacent, allocatable region be performed in order to locate a free
     portion of address space. The vvmmssppaaccee__ddeelleettee() function deallocates a
     region of an address space, along with any resources consumed within it.
     The vvmmssppaaccee__mmmmaapp() function provides an interface similar the the mmap(2)
     system call to associate a region of address space with a device driver
     or file, and adjust the attributes of the region of memory to suite the
     needs of a mapped object.

     The vvmmssppaaccee__pprrootteecctt() function adjusts the current and maximum memory
     protection of a region of an address space, to alter the level of access
     allowed by programs. Similarly, the function vvmmssppaaccee__aacccceessss() can be used
     to check if a operation associated with a given memory protection level
     can be performed over a specified region of an address space.

     The vvmmssppaaccee__nnoottppaaggeeaabbllee() function forces a region of an address space to
     be entirely resident and allocated (however, not actively mapped -- just
     insured to be resident).  The vvmmssppaaccee__ppaaggeeaabbllee() function releases this
     restriction, allowing the memory to become reclaimable again. The
     vvmmssppaaccee__aaccttiivvee() function forces a region of address space to become
     addressable without fault at its maximum protection level (this will
     cause any copy-on-write portions of the region to have distinct copies as
     a side-effect), and can be used in concert with the resident state
     functions.

     The vvmmssppaaccee__iinnhheerriitt() function can be used to assign the inheritance
     attribute of regions of address space to determine the disposition of any
     contents upon the next address space replication operation (contents
     stays with original, contents passes to the copy, contents are copied).

RREETTUURRNN VVAALLUUEESS
     The vvmmssppaaccee__ffoorrkk() function returns the address of the vmspace instance
     associated with the new user address space copy. The vvmmssppaaccee__aallllooccaattee(),
     vvmmssppaaccee__mmmmaapp(), vvmmssppaaccee__pprrootteecctt(), vvmmssppaaccee__aacccceessss(), and
     vvmmssppaaccee__aaccttiivvaattee() functions returns the status of the requested
     operation attempt. The vvmmssppaaccee__iinnhheerriitt() function returns failure if an
     unimplemented inheritance type is requested.

SSEEEE AALLSSOO
     kmem(9),  mmap(2),  fork(2),  exit(2)

386BSD Release 1.0              August 29, 1994                              2























