ROUTE(4)                  386BSD Programmer's Manual                  ROUTE(4)

NNAAMMEE
     rroouuttee - Kernel Packet Forwarding Database

MMOODDUULLEE
     rroouuttee <<pprroottooccooll--ffaammiillyy>>..

SSYYNNOOPPSSIISS
     MMaakkeeffiillee::
     $$((NNOONNSSTTDDIINNCC)) ++== $$((IINNCCNNEETT))

     CC::
     ##iinncclluuddee <<ssyyss//ssoocckkeett..hh>>
     ##iinncclluuddee ""iiff..hh""
     ##iinncclluuddee ""rroouuttee..hh""

     _i_n_t
     ssoocckkeett(_P_F__R_O_U_T_E, _S_O_C_K__R_A_W, _i_n_t _f_a_m_i_l_y)

DDEESSCCRRIIPPTTIIOONN
     386BSD provides some packet routing facilities.  The kernel maintains a
     routing information database, which is used in selecting the appropriate
     network interface when transmitting packets. These facilities are
     implemented in a module that provides routing independant of protocol.

     A user process (or possibly multiple co-operating processes) maintains
     this database by sending messages over a special kind of socket.  This
     supplants fixed size ioctl(2)'s  used in earlier releases.  Routing table
     changes may only be carried out by the super user.

     The operating system may spontaneously emit routing messages in response
     to external events, such as recipt of a re-direct, or failure to locate a
     suitable route for a request.  The message types are described in greater
     detail below.

     Routing database entries come in two flavors: for a specific host, or for
     all hosts on a generic subnetwork (as specified by a bit mask and value
     under the mask.  The effect of wildcard or default route may be achieved
     by using a mask of all zeros, and there may be hierarchical routes.

     When the system is booted and addresses are assigned to the network
     interfaces, each protocol family installs a routing table entry for each
     interface when it is ready for traffic.  Normally the protocol specifies
     the route through each interface as a ``direct'' connection to the
     destination host or network.  If the route is direct, the transport layer
     of a protocol family usually requests the packet be sent to the same host
     specified in the packet.  Otherwise, the interface is requested to
     address the packet to the gateway listed in the routing entry (i.e. the
     packet is forwarded).

     When routing a packet, the kernel will first attempt to find a route to
     the destination host.  Failing that, a search is made for a route to the
     network of the destination.  Finally, any route to a default
     (``wildcard'') gateway is chosen.  If no entry is found, the destination
     is declared to be unreachable, and a routing-miss message is generated if
     there are any listers on the routing control socket described below.

     A wildcard routing entry is specified with a zero destination address
     value.  Wildcard routes are used only when the system fails to find a
     route to the destination host and network.  The combination of wildcard
     routes and routing redirects can provide an economical mechanism for
     routing traffic.


     One opens the channel for passing routing control messasges by using the
     socket call shown in the synopsis above:

     The _f_a_m_i_l_y paramter may be AF_UNSPEC which will provide routing
     information for all address families, or can be restricted to a specific
     address family by specifying which one is desired.  There can be more
     than one routing socket open per system.

     Messages are formed by a header followed by a small number of sockadders
     (now variable length particularly in the ISO case), interpreted by
     position, and delimited by the new length entry in the sockaddr.  An
     example of a message with four addresses might be an ISO redirect:
     Destination, Netmask, Gateway, and Author of the redirect.  The
     interpretation of which address are present is given by a bit mask within
     the header, and the sequence is least significant to most significant bit
     within the vector.

     Any messages sent to the kernel are returned, and copies are sent to all
     interested listeners.  The kernel will provide the process id. for the
     sender, and the sender may use an additional sequence field to
     distinguish between outstanding messages.  However, message replies may
     be lost when kernel buffers are exhausted.

     The kernel may reject certain messages, and will indicate this by filling
     in the _r_t_m__e_r_r_n_o field.  The routing code returns EEXIST if requested to
     duplicate an existing entry, ESRCH if requested to delete a non-existent
     entry, or ENOBUFS if insufficient resources were available to install a
     new route.  In the current implementation, all routing process run
     locally, and the values for _r_t_m__e_r_r_n_o are available through the normal
     _e_r_r_n_o mechanism, even if the routing reply message is lost.

     A process may avoid the expense of reading replies to its own messages by
     issuing a setsockopt(2) call indicating that the SO_USELOOPBACK option at
     the SOL_SOCKET level is to be turned off.  A process may ignore all
     messages from the routing socket by doing a shutdown(2) system call for
     further input.

     If a route is in use when it is deleted, the routing entry will be marked
     down and removed from the routing table, but the resources associated
     with it will not be reclaimed until all references to it are released.
     User processes can obtain information about the routing entry to a
     specific destination by using a RTM_GET message, or by reading the
     /_d_e_v/_k_m_e_m device, or by issuing a getkerninfo(2) system call.

     Messages include:

     #define RTM_ADD         0x1    /* Add Route */
     #define RTM_DELETE      0x2    /* Delete Route */
     #define RTM_CHANGE      0x3    /* Change Metrics, Flags, or Gateway */
     #define RTM_GET         0x4    /* Report Information */
     #define RTM_LOOSING     0x5    /* Kernel Suspects Partitioning */
     #define RTM_REDIRECT    0x6    /* Told to use different route */
     #define RTM_MISS        0x7    /* Lookup failed on this address */
     #define RTM_RESOLVE     0xb    /* request to resolve dst to LL addr */

     A message header consists of:

     struct rt_msghdr {
         u_short rmt_msglen;  /* to skip over non-understood messages */
         u_char  rtm_version; /* future binary compatability */
         u_char  rtm_type;    /* message type */
         u_short rmt_index;   /* index for associated ifp */
         pid_t   rmt_pid;     /* identify sender */
         int     rtm_addrs;   /* bitmask identifying sockaddrs in msg */
         int     rtm_seq;     /* for sender to identify action */
         int     rtm_errno;   /* why failed */
         int     rtm_flags;   /* flags, incl kern & message, e.g. DONE */
         int     rtm_use;     /* from rtentry */
         u_long  rtm_inits;   /* which values we are initializing */
         struct  rt_metrics rtm_rmx; /* metrics themselves */
     };

     where

     struct rt_metrics {
         u_long rmx_locks;     /* Kernel must leave these values alone */
         u_long rmx_mtu;       /* MTU for this path */
         u_long rmx_hopcount;  /* max hops expected */
         u_long rmx_expire;    /* lifetime for route, e.g. redirect */
         u_long rmx_recvpipe;  /* inbound delay-bandwith product */
         u_long rmx_sendpipe;  /* outbound delay-bandwith product */
         u_long rmx_ssthresh;  /* outbound gateway buffer limit */
         u_long rmx_rtt;       /* estimated round trip time */
         u_long rmx_rttvar;    /* estimated rtt variance */
     };

     Flags include the values:

     #define RTF_UP        0x1    /* route useable */
     #define RTF_GATEWAY   0x2    /* destination is a gateway */
     #define RTF_HOST      0x4    /* host entry (net otherwise) */
     #define RTF_NORMAL    0x8    /* subnet mask is cannonical */
     #define RTF_DYNAMIC   0x10   /* created dynamically (by redirect) */
     #define RTF_MODIFIED  0x20   /* modified dynamically (by redirect) */
     #define RTF_DONE      0x40   /* message confirmed */
     #define RTF_MASK      0x80   /* subnet mask present */

     Specfiers for metric values in rmx_locks and rtm_inits are:

     #define RTV_SSTHRESH  0x1    /* init or lock _ssthresh */
     #define RTV_RPIPE     0x2    /* init or lock _recvpipe */
     #define RTV_SPIPE     0x4    /* init or lock _sendpipe */
     #define RTV_HOPCOUNT  0x8    /* init or lock _hopcount */
     #define RTV_RTT       0x10   /* init or lock _rtt */
     #define RTV_RTTVAR    0x20   /* init or lock _rttvar */
     #define RTV_MTU       0x40   /* init or lock _mtu */

     Specifiers for which addresses are present in the messages are:

     #define RTA_DST       0x1    /* destination sockaddr present */
     #define RTA_GATEWAY   0x2    /* gateway sockaddr present */
     #define RTA_NETMASK   0x4    /* netmask sockaddr present */
     #define RTA_GENMASK   0x8    /* cloning mask sockaddr present */
     #define RTA_IFP       0x10   /* interface name sockaddr present */
     #define RTA_IFA       0x20   /* interface addr sockaddr present */
     #define RTA_AUTHOR    0x40   /* sockaddr for author of redirect */

HHIISSTTOORRYY
     The rroouuttee forwarding database currently under development.

BSD Experimental                 June 20, 1994                               3












