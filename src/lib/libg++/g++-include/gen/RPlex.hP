// This may look like C code, but it is really -*- C++ -*-
/* 
Copyright (C) 1988 Free Software Foundation
    written by Doug Lea (dl@rocky.oswego.edu)
    based on code by Marc Shapiro (shapiro@sor.inria.fr)

This file is part of GNU CC.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY.  No author or distributor
accepts responsibility to anyone for the consequences of using it
or for whether it serves any particular purpose or works at all,
unless he says so in writing.  Refer to the GNU CC General Public
License for full details.

Everyone is granted permission to copy, modify and redistribute
GNU CC, but only under the conditions described in the
GNU CC General Public License.   A copy of this license is
supposed to have been given to you along with GNU CC so you
can know your rights and responsibilities.  It should be in a
file named COPYING.  Among other things, the copyright notice
and this notice must be preserved on all copies.  
*/

#ifndef _<T>RPlex_h
#ifdef __GNUG__
#pragma once
#pragma interface
#endif
#define _<T>RPlex_h 1

#include "<T>.Plex.h"

// minimum number of chunks to index

#ifndef MIN_NCHUNKS
#define MIN_NCHUNKS  16
#endif

class <T>RPlex: public <T>Plex
{
  int              base;        // base index of lowest chunk
  int              lch;         // index of lowest used chunk
  int              fch;         // 1 + index of highest used chunk
  int              maxch;       // max chunks in array
  <T>IChunk**      chunks;      // array of chunks
  <T>IChunk*       ch;          // cached chunk

  void             make_initial_chunks(int up = 1);

  void             cache(int idx) const;
  void             cache(const <T>* p) const;
  <T>*             dopred(const <T>* p) const;
  <T>*             dosucc(const <T>* p) const;

  void             set_cache(const <T>IChunk* t) const; // logically, 
                                               // not physically const

public:
                   <T>RPlex();                 // set low = 0;
                                               // fence = 0;
                                               // csize = default

                   <T>RPlex(int ch_size);      // low = 0; 
                                               // fence = 0;
                                               // csize = ch_size

                   <T>RPlex(int lo,            // low = lo; 
                            int ch_size);      // fence=lo
                                               // csize = ch_size

                   <T>RPlex(int lo,            // low = lo
                            int hi,            // fence = hi+1
                            const <T&> initval,// fill with initval,
                            int ch_size = 0);  // csize= ch_size
                                               // or fence-lo if 0

                   <T>RPlex(const <T>RPlex&);

                   ~<T>RPlex();

  void             operator= (const <T>RPlex&);

// virtuals

  <T>&             high_element ();
  <T>&             low_element ();

  const <T>&       high_element () const;
  const <T>&       low_element () const;

  Pix              first() const;
  Pix              last() const;
  void             prev(Pix& ptr) const;
  void             next(Pix& ptr) const;
  int              owns(Pix p) const;
  <T>&             operator () (Pix p);
  const <T>&       operator () (Pix p) const;

  int              low() const; 
  int              high() const;
  int              valid(int idx) const;
  void             prev(int& idx) const;
  void             next(int& x) const;
  <T>&             operator [] (int index);
  const <T>&       operator [] (int index) const;
    
  int              Pix_to_index(Pix p) const;
  Pix              index_to_Pix(int idx) const;    

  int              can_add_high() const;
  int              can_add_low() const;
  int              full() const;

  int              add_high(const <T&> elem);
  int              del_high ();
  int              add_low (const <T&> elem);
  int              del_low ();

  void             fill(const <T&> x);
  void             fill(const <T&> x, int from, int to);
  void             clear();
  void             reverse();
  void             append(const <T>RPlex& a); 
  void             prepend(const <T>RPlex& a);

  int              reset_low(int newlow);
    
  int              OK () const; 
};

#if defined(__OPTIMIZE__) || defined(USE_LIBGXX_INLINES)

inline void <T>RPlex::prev(int& idx) const
{
  --idx;
}

inline void <T>RPlex::next(int& idx) const 
{
  ++idx;
}

inline  int <T>RPlex::full ()  const
{
  return 0;
}

inline int <T>RPlex::can_add_high() const
{
  return 1;
}

inline int <T>RPlex::can_add_low() const
{
  return 1;
}

inline  int <T>RPlex::valid (int idx) const
{
  return idx >= lo && idx < fnc;
}

inline int <T>RPlex::low() const
{
  return lo;
}

inline int <T>RPlex::high() const
{
  return fnc - 1;
}

inline void <T>RPlex::set_cache(const <T>IChunk* t) const
{
  ((<T>RPlex*)(this))->ch = (<T>IChunk*)t;
}

inline void <T>RPlex::cache(int idx) const
{
  if (idx < lo || idx >= fnc) index_error();
  set_cache(chunks[(idx - base) / csize]);
}  

inline  <T>& <T>RPlex::low_element () 
{
  cache(lo); return *(ch->pointer_to(lo));
}

inline  <T>& <T>RPlex::high_element ()
{
  cache(fnc-1); return *(ch->pointer_to(fnc - 1));
}

inline const <T>& <T>RPlex::low_element () const
{
  cache(lo); return *((const <T>*)(ch->pointer_to(lo)));
}

inline const <T>& <T>RPlex::high_element () const
{
  cache(fnc-1); return *((const <T>*)(ch->pointer_to(fnc - 1)));
}

inline  int <T>RPlex::Pix_to_index(Pix px) const
{
  <T>* p = (<T>*)px;
  if (!ch->actual_pointer(p)) cache(p);
  return ch->index_of(p);
}

inline  Pix <T>RPlex::index_to_Pix(int idx) const
{
  if (!ch->actual_index(idx)) cache(idx);
  return (Pix)(ch->pointer_to(idx));
}

inline Pix <T>RPlex::first() const
{
  return Pix(hd-><T>IChunk::first_pointer());
}

inline Pix <T>RPlex::last() const
{
  return Pix(tl()-><T>IChunk::last_pointer());
}

inline void <T>RPlex::prev(Pix& p) const
{
  Pix q = Pix(ch-><T>IChunk::pred((<T>*)p));
  p = (q == 0)? Pix(dopred((<T>*)p)) : q;
}

inline void <T>RPlex::next(Pix& p) const
{
  Pix q = Pix(ch-><T>IChunk::succ((<T>*)p));
  p = (q == 0)? Pix(dosucc((<T>*)p)) : q;
}

inline <T>& <T>RPlex:: operator () (Pix p)
{
  return *((<T>*)p);
}


inline <T>& <T>RPlex:: operator [] (int idx)
{
  cache(idx); return *(ch->pointer_to(idx));
}

inline const <T>& <T>RPlex:: operator () (Pix p) const
{
  return *((const <T>*)p);
}

inline const <T>& <T>RPlex:: operator [] (int idx) const
{
  cache(idx); return *((const <T>*)(ch->pointer_to(idx)));
}

inline <T>RPlex::~<T>RPlex()
{
  delete chunks;
}


#endif
#endif
